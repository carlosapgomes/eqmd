"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes", "on")

ALLOWED_HOSTS = [
    host.strip() for host in os.getenv("ALLOWED_HOSTS", "").split(",") if host.strip()
]

# CSRF Trusted Origins
# https://docs.djangoproject.com/en/5.2/ref/settings/#csrf-trusted-origins
DJANGO_CSRF_TRUSTED_ORIGINS_RAW = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "")
CSRF_TRUSTED_ORIGINS = [
    origin.strip()
    for origin in DJANGO_CSRF_TRUSTED_ORIGINS_RAW.split(",")
    if origin.strip()
]
# If DJANGO_CSRF_TRUSTED_ORIGINS is not set or empty, CSRF_TRUSTED_ORIGINS will be an empty list.
# For development, if you haven't set it in .env, you might want a default like:
# if not CSRF_TRUSTED_ORIGINS and DEBUG:
#     CSRF_TRUSTED_ORIGINS = ['http://localhost:8347', 'http://127.0.0.1:8347']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "taggit",
    "apps.core",  # New app for core/pages functionality
    "apps.accounts.apps.AccountsConfig",  # New accounts app
    "apps.hospitals",  # Hospital management app
    "apps.patients",  # Patient management app
    "apps.events",  # Events management app
    "apps.dailynotes",  # Daily notes app
    "apps.simplenotes",  # Simple notes app
    "apps.mediafiles",  # Media files app
    "apps.historyandphysicals",  # History and Physical examination app
    "apps.sample_content",  # Sample content app
    # django-allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # FilePond and related
    "django_drf_filepond",
    "storages",
    "rest_framework",
]

# Add custom user model setting
AUTH_USER_MODEL = "accounts.EqmdCustomUser"

# Site ID required by django-allauth
SITE_ID = int(os.getenv("SITE_ID", "1"))

# Authentication backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
    "apps.core.backends.EquipeMedPermissionBackend",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "apps.hospitals.middleware.HospitalContextMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "apps.patients.context_processors.patient_stats",
                "apps.patients.context_processors.recent_patients",
                "apps.hospitals.context_processors.hospital_context",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DATABASE_NAME", BASE_DIR / "db.sqlite3"),
        "USER": os.getenv("DATABASE_USER", ""),
        "PASSWORD": os.getenv("DATABASE_PASSWORD", ""),
        "HOST": os.getenv("DATABASE_HOST", ""),
        "PORT": os.getenv("DATABASE_PORT", ""),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "pt-br")

TIME_ZONE = os.getenv("TIME_ZONE", "America/Bahia")

USE_I18N = True

USE_TZ = True


# Cache configuration
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'eqmd-cache',
        'TIMEOUT': 300,  # 5 minutes default timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# Session configuration to use cache
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files (User uploads, Images)
# https://docs.djangoproject.com/en/5.2/topics/files/
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB for images
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB for videos

# Media-specific settings
MEDIA_IMAGE_MAX_SIZE = 5 * 1024 * 1024  # 5MB
MEDIA_VIDEO_MAX_SIZE = 50 * 1024 * 1024  # 50MB
MEDIA_VIDEO_MAX_DURATION = 120  # 2 minutes in seconds
MEDIA_ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/webp']
MEDIA_ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/quicktime']
MEDIA_ALLOWED_VIDEO_CODECS = ['h264', 'hevc', 'vp8', 'vp9', 'av1']

# Security settings for media files
MEDIA_ALLOWED_IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp']
MEDIA_ALLOWED_VIDEO_EXTENSIONS = ['.mp4', '.webm', '.mov']
MEDIA_ALLOWED_VIDEO_FORMATS = ['mp4', 'webm', 'mov']  # Container formats
MEDIA_MAX_FILENAME_LENGTH = 100
MEDIA_USE_UUID_FILENAMES = True  # Use UUID-based secure filenames
MEDIA_ENABLE_FILE_DEDUPLICATION = True  # Enable SHA-256 hash deduplication

# Video streaming security settings
MEDIA_VIDEO_MAX_DIMENSION = 4096  # Maximum video width/height (4K)
MEDIA_VIDEO_MAX_RANGE_SIZE = 10 * 1024 * 1024  # 10MB max range request size
MEDIA_VIDEO_STREAM_TIMEOUT = 30  # 30 seconds timeout for video operations

# Rate limiting settings for media access
MEDIA_RATE_LIMIT_UPLOADS = 10  # uploads per hour per user
MEDIA_RATE_LIMIT_DOWNLOADS = 100  # downloads per hour per user
MEDIA_RATE_LIMIT_STREAMS = 50  # video streams per hour per user

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Email configuration
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = os.getenv("EMAIL_HOST", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() in ("true", "1", "yes", "on")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@example.com")

# django-allauth configuration

ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = os.getenv("ACCOUNT_EMAIL_VERIFICATION", "mandatory")

# Login and Logout Configuration
LOGIN_REDIRECT_URL = "core:dashboard"
# LOGOUT_REDIRECT_URL = 'core:landing_page' # Optional: can be added later

# FilePond Configuration
DJANGO_DRF_FILEPOND_UPLOAD_TMP = '/tmp/filepond_uploads'
DJANGO_DRF_FILEPOND_FILE_STORE_PATH = '/tmp/filepond_stored'

# Custom storage for mediafiles with UUID naming
DJANGO_DRF_FILEPOND_STORAGES_BACKEND = 'apps.mediafiles.storage.SecureVideoStorage'

# Video processing settings
MEDIA_VIDEO_CONVERSION_ENABLED = True
MEDIA_VIDEO_OUTPUT_FORMAT = 'mp4'
MEDIA_VIDEO_CODEC = 'libx264'
MEDIA_VIDEO_PRESET = 'medium'  # Single quality preset
MEDIA_VIDEO_MAX_DURATION = 120  # 2 minutes
MEDIA_VIDEO_MAX_SIZE = 100 * 1024 * 1024  # 100MB input limit

# Django REST Framework settings for FilePond
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

