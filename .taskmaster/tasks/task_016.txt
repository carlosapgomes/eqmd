# Task ID: 16
# Title: Implement PrescriptionItem Model
# Status: pending
# Dependencies: 15
# Priority: high
# Description: Create model for individual prescription items with copied drug data
# Details:
Create PrescriptionItem model with fields: prescription (ForeignKey to OutpatientPrescription), drug_name (CharField, max_length=200), presentation (CharField, max_length=300), usage_instructions (TextField), quantity (CharField, max_length=100), order (PositiveIntegerField for sorting). Add Meta class with ordering=['order']. Implement __str__ method.

# Test Strategy:
Test model creation and relationships, verify ordering functionality, test field validation and constraints

# Subtasks:
## 1. Define Django Models with ForeignKey Relationships [pending]
### Dependencies: None
### Description: Create Django model classes that include fields and establish foreign key relationships to represent many-to-one associations.
### Details:
Use Django's ForeignKey field to define relationships between models, ensuring data integrity and proper relational mapping. For example, define a parent model and a child model where the child has a ForeignKey to the parent model as per Django documentation[2].

## 2. Implement Ordering of Model Instances Respecting ForeignKey [pending]
### Dependencies: 16.1
### Description: Add ordering to the models so that instances can be ordered relative to their foreign key relationships.
### Details:
Use Django ORM's native ordering features such as the 'order_with_respect_to' attribute or the 'order_by' method with double underscore syntax to order objects by fields on related models. Consider using django-ordered-model package for advanced ordering with respect to foreign keys[1][3][5].

## 3. Implement __str__ Method for Models [pending]
### Dependencies: 16.1
### Description: Define the __str__ method in each model to provide a human-readable string representation of model instances.
### Details:
Override the __str__ method in each Django model class to return meaningful string representations, such as the name or title field, to improve readability in admin interfaces and debugging.

## 4. Write Validation Tests for Models and Ordering [pending]
### Dependencies: 16.1, 16.2, 16.3
### Description: Create unit tests to validate the correctness of model field definitions, foreign key relationships, ordering behavior, and string representations.
### Details:
Write Django test cases to ensure that foreign key constraints are enforced, ordering works as expected (including ordering relative to foreign keys), and __str__ methods return correct strings. Tests should cover edge cases and data integrity scenarios.

