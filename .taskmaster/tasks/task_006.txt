# Task ID: 6
# Title: Implement DrugTemplate List View
# Status: pending
# Dependencies: 5
# Priority: high
# Description: Create view to display all accessible drug templates with filtering and pagination
# Details:
Create DrugTemplateListView using ListView. Filter templates to show public templates + user's private templates. Add GET parameters for filtering: name search, creator filter, visibility filter. Implement pagination with 20 items per page. Add sorting by name, created_at. Apply @login_required decorator.

# Test Strategy:
Test view access permissions, verify filtering works correctly, test pagination navigation, verify only appropriate templates are visible to each user

# Subtasks:
## 1. Create ListView Component [pending]
### Dependencies: None
### Description: Define and implement the ListView class to display a list of items or objects, setting up the data source and template for rendering the list.
### Details:
Use a framework-specific ListView class (e.g., Django ListView or Kivy ListView) to create a list display. Define the model or data source, context object name, and template or UI layout for the list items.

## 2. Implement Filtering Logic [pending]
### Dependencies: 6.1
### Description: Add functionality to filter the list items based on user input or predefined criteria to allow users to narrow down the displayed data.
### Details:
Extend the ListView to accept filter parameters and apply them to the data query or data source before rendering. This may involve overriding query methods or adding filter controls in the UI.

## 3. Add Pagination Support [pending]
### Dependencies: 6.1
### Description: Implement pagination to divide the list into pages, improving performance and usability when dealing with large datasets.
### Details:
Configure the ListView to limit the number of items per page and provide navigation controls to move between pages. This typically involves setting pagination attributes and handling page requests.

## 4. Implement Sorting Functionality [pending]
### Dependencies: 6.1
### Description: Enable sorting of list items by various fields or attributes to allow users to organize the data as needed.
### Details:
Add sorting parameters to the ListView, allowing users to select sort fields and order. Modify the data query or source to apply sorting before rendering the list.

## 5. Apply Access Control Decorators [pending]
### Dependencies: 6.1
### Description: Secure the ListView by applying access control decorators to restrict data visibility and actions based on user permissions.
### Details:
Use framework-specific decorators or middleware to enforce authentication and authorization on the ListView, ensuring only authorized users can access or modify the list data.

