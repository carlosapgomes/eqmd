{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create Drug Templates App Structure",
        "description": "Initialize the drugtemplates app with proper Django structure and configuration",
        "details": "Create drugtemplates app using 'python manage.py startapp drugtemplates apps/drugtemplates'. Add 'apps.drugtemplates' to INSTALLED_APPS in config/settings.py. Create directory structure with models, views, forms, templates, urls, and tests modules. Verify app is properly recognized by Django.",
        "testStrategy": "Test app import in Django shell, verify app appears in INSTALLED_APPS, check directory structure is complete",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create the Django app using the startapp command",
            "description": "Run the Django management command to create a new app directory with the default structure inside the project folder where manage.py resides.",
            "dependencies": [],
            "details": "Use the command `python manage.py startapp <appname>` to generate the app folder containing files like views.py, models.py, apps.py, admin.py, tests.py, and migrations/ directory.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update settings.py to register the new app",
            "description": "Add the new app's configuration to the INSTALLED_APPS list in the project's settings.py file to enable Django to recognize and include the app.",
            "dependencies": [
              1
            ],
            "details": "Open settings.py and append the app name or app config class (e.g., 'appname.apps.AppnameConfig') to the INSTALLED_APPS list.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set up the app directory structure",
            "description": "Organize and create necessary files and folders within the app directory for models, views, forms, templates, urls, and tests to support app functionality and maintainability.",
            "dependencies": [
              1
            ],
            "details": "Ensure the app folder contains or create subfolders and files such as models.py for data models, views.py for request handlers, forms.py for form classes, templates/ for HTML templates, urls.py for URL routing, and tests.py for unit tests.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Verify app registration and basic functionality",
            "description": "Confirm that the app is properly registered and integrated by running the development server and checking that the app responds correctly to requests.",
            "dependencies": [
              2,
              3
            ],
            "details": "Run `python manage.py runserver` and navigate to a URL routed to the app to verify it loads without errors, indicating successful registration and setup.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement DrugTemplate Model",
        "description": "Create the core DrugTemplate model with all required fields and validation",
        "details": "Create DrugTemplate model with fields: name (CharField, max_length=200, required), presentation (CharField, max_length=300), usage_instructions (TextField with markdown support), creator (ForeignKey to User), is_public (BooleanField, default=False), created_at (DateTimeField, auto_now_add=True), updated_at (DateTimeField, auto_now=True). Add __str__ method returning drug name, get_absolute_url method, and clean method for validation.",
        "testStrategy": "Unit tests for model creation, field validation, __str__ representation, and model methods. Test constraints and required field validation.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Model Fields",
            "description": "Design and implement the necessary fields for the Django model, selecting appropriate field types and options such as max_length, verbose_name, and help_text.",
            "dependencies": [],
            "details": "Use Django's built-in field types (CharField, IntegerField, ForeignKey, etc.) to define each attribute of the model. Follow best practices for naming fields using lowercase with underscores and ensure descriptive names. Consider validation constraints and database storage requirements while defining fields.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement __str__ Method",
            "description": "Create the __str__ method for the model to provide a human-readable string representation of model instances.",
            "dependencies": [
              1
            ],
            "details": "Override the __str__ method to return a meaningful string that identifies the model instance, typically using one or more key fields. This aids in debugging and admin interface display.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement get_absolute_url Method",
            "description": "Define the get_absolute_url method to return the canonical URL for a model instance.",
            "dependencies": [
              1
            ],
            "details": "Implement get_absolute_url to return a URL string that uniquely identifies the model instance, often using Django's reverse function with the instance's primary key or slug. This supports linking to detail views in templates and redirects.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement clean Method for Validation",
            "description": "Add a clean method to the model to enforce custom validation logic beyond field-level validation.",
            "dependencies": [
              1
            ],
            "details": "Override the clean method to perform model-wide validation checks, raising ValidationError for any invalid data combinations or constraints. This ensures data integrity before saving instances.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Write Unit Tests for Model Behavior",
            "description": "Develop unit tests to verify the correctness of field definitions, __str__, get_absolute_url, and clean methods.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Create test cases that instantiate the model with valid and invalid data, check string representations, URL generation, and validation logic. Use Django's testing framework to automate these tests and ensure model reliability.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Create DrugTemplate Database Migration",
        "description": "Generate and apply initial database migration for DrugTemplate model",
        "details": "Run 'python manage.py makemigrations drugtemplates' to create initial migration. Review migration file for correctness. Apply migration with 'python manage.py migrate'. Verify database table creation and field types.",
        "testStrategy": "Check migration file exists, verify database table created with correct columns and constraints, test rollback capability",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Generate Migration",
            "description": "Create the migration file that defines the changes needed to update the database schema to match the current model definitions.",
            "dependencies": [],
            "details": "This involves using the appropriate migration generation tools or commands to produce a migration script/file that captures schema changes such as table creation, modification, or deletion.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Review Migration File",
            "description": "Carefully examine the generated migration file to ensure it accurately reflects the intended schema changes and does not introduce errors.",
            "dependencies": [
              1
            ],
            "details": "Review the migration script for correctness, completeness, and potential issues such as data loss or incompatible changes. This step helps prevent runtime errors during migration application.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Apply Migration and Verify Database Changes",
            "description": "Execute the migration to update the database schema and verify that the changes have been applied correctly.",
            "dependencies": [
              2
            ],
            "details": "Run the migration against the target database, then verify the schema changes by inspecting the database structure or running tests to confirm the migration's success and integrity.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Setup DrugTemplate Admin Interface",
        "description": "Configure Django admin interface for DrugTemplate management",
        "details": "Create admin.py with DrugTemplateAdmin class. Configure list_display=['name', 'presentation', 'creator', 'is_public', 'created_at'], list_filter=['is_public', 'creator', 'created_at'], search_fields=['name', 'presentation']. Add readonly_fields for created_at/updated_at. Implement custom admin actions for bulk visibility changes.",
        "testStrategy": "Test admin interface accessibility, verify list display and filtering work correctly, test search functionality and bulk actions",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Admin Class",
            "description": "Define a custom admin class for the model to customize the Django admin interface behavior.",
            "dependencies": [],
            "details": "Create a class inheriting from admin.ModelAdmin in admin.py and register the model with this class to enable further customizations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure list_display and Filters",
            "description": "Set up the list_display attribute to control which model fields appear in the admin list view and configure filters for easy data filtering.",
            "dependencies": [
              1
            ],
            "details": "Add list_display tuple to show relevant fields in the admin list page and define list_filter to enable sidebar filters for quick filtering of records.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement search_fields",
            "description": "Enable search functionality in the admin list view by specifying fields to be searched.",
            "dependencies": [
              1
            ],
            "details": "Add search_fields attribute in the admin class with a list of model fields to allow keyword searching in the admin interface.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add Custom Admin Actions",
            "description": "Define custom actions that can be performed on selected records in the admin list view to enhance management efficiency.",
            "dependencies": [
              1
            ],
            "details": "Implement methods in the admin class decorated with @admin.action and add them to the actions list to provide batch operations.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Create DrugTemplate Forms",
        "description": "Implement forms for creating and editing drug templates with validation",
        "details": "Create DrugTemplateForm using Django ModelForm with crispy forms styling. Include fields: name, presentation, usage_instructions, is_public. Add form validation for required fields, clean_name method to prevent duplicates by same user. Use MarkdownWidget for usage_instructions field. Apply Bootstrap 5.3.6 styling with medical theme.",
        "testStrategy": "Test form validation rules, test form rendering with proper styling, verify markdown widget functionality, test duplicate name validation",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create a Django ModelForm",
            "description": "Define a ModelForm class based on the existing Django model to handle form data input and validation automatically.",
            "dependencies": [],
            "details": "Use Django's forms.ModelForm to create a form class linked to the model. This will simplify form creation by automatically generating fields corresponding to the model's fields.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add Crispy Forms Styling to the ModelForm",
            "description": "Integrate django-crispy-forms to enhance the form's appearance and layout with customizable styling and layout helpers.",
            "dependencies": [
              1
            ],
            "details": "Install and configure django-crispy-forms. In the ModelForm, add a FormHelper instance and define a Layout to control the rendering of form fields and buttons, improving UI consistency and responsiveness.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Custom Validation Logic",
            "description": "Add custom validation to the ModelForm, such as checking for duplicate names or other business rules beyond default model validation.",
            "dependencies": [
              1
            ],
            "details": "Override the clean() or clean_fieldname() methods in the ModelForm to perform checks like duplicate name detection. Raise ValidationError with appropriate messages if validation fails.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate a Markdown Widget for Text Fields",
            "description": "Enhance text input fields by integrating a Markdown editor widget to allow rich text formatting within the form.",
            "dependencies": [
              1,
              2
            ],
            "details": "Replace the default textarea widget for relevant text fields with a Markdown widget (e.g., django-markdownx or similar). Ensure the widget is properly configured and styled within the crispy form layout.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement DrugTemplate List View",
        "description": "Create view to display all accessible drug templates with filtering and pagination",
        "details": "Create DrugTemplateListView using ListView. Filter templates to show public templates + user's private templates. Add GET parameters for filtering: name search, creator filter, visibility filter. Implement pagination with 20 items per page. Add sorting by name, created_at. Apply @login_required decorator.",
        "testStrategy": "Test view access permissions, verify filtering works correctly, test pagination navigation, verify only appropriate templates are visible to each user",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create ListView Component",
            "description": "Define and implement the ListView class to display a list of items or objects, setting up the data source and template for rendering the list.",
            "dependencies": [],
            "details": "Use a framework-specific ListView class (e.g., Django ListView or Kivy ListView) to create a list display. Define the model or data source, context object name, and template or UI layout for the list items.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Filtering Logic",
            "description": "Add functionality to filter the list items based on user input or predefined criteria to allow users to narrow down the displayed data.",
            "dependencies": [
              1
            ],
            "details": "Extend the ListView to accept filter parameters and apply them to the data query or data source before rendering. This may involve overriding query methods or adding filter controls in the UI.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Pagination Support",
            "description": "Implement pagination to divide the list into pages, improving performance and usability when dealing with large datasets.",
            "dependencies": [
              1
            ],
            "details": "Configure the ListView to limit the number of items per page and provide navigation controls to move between pages. This typically involves setting pagination attributes and handling page requests.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Sorting Functionality",
            "description": "Enable sorting of list items by various fields or attributes to allow users to organize the data as needed.",
            "dependencies": [
              1
            ],
            "details": "Add sorting parameters to the ListView, allowing users to select sort fields and order. Modify the data query or source to apply sorting before rendering the list.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Apply Access Control Decorators",
            "description": "Secure the ListView by applying access control decorators to restrict data visibility and actions based on user permissions.",
            "dependencies": [
              1
            ],
            "details": "Use framework-specific decorators or middleware to enforce authentication and authorization on the ListView, ensuring only authorized users can access or modify the list data.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement DrugTemplate Detail View",
        "description": "Create detailed view for individual drug templates with usage statistics",
        "details": "Create DrugTemplateDetailView using DetailView. Display all template fields, show usage count (number of prescriptions using this template), display creation/modification dates. Add edit/delete links for template creator. Apply permission checks for private template access.",
        "testStrategy": "Test template detail display, verify permission checks for private templates, test usage statistics calculation, verify edit/delete links appear only for creators",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create DetailView for Object Display",
            "description": "Implement a Django DetailView class-based view to display detailed information of a single object, specifying the model, template, and context object name.",
            "dependencies": [],
            "details": "Define a class inheriting from django.views.generic.detail.DetailView, set the model attribute to the relevant model, specify context_object_name for template clarity, and optionally set template_name if default naming is not used.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Display Usage Statistics in DetailView",
            "description": "Enhance the DetailView to include usage statistics related to the object, adding necessary data to the context for template rendering.",
            "dependencies": [
              1
            ],
            "details": "Override the get_context_data method in the DetailView subclass to add usage statistics data to the context dictionary, enabling display in the detail template.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Permission Checks to DetailView",
            "description": "Implement permission logic to restrict access to the DetailView based on user roles or other criteria.",
            "dependencies": [
              1
            ],
            "details": "Incorporate permission checks by overriding the dispatch or get method in the DetailView to verify user permissions before rendering the view, redirecting or raising errors if unauthorized.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Edit/Delete Link Visibility Based on Permissions",
            "description": "Control the visibility of edit and delete links in the detail template depending on the user's permissions.",
            "dependencies": [
              3
            ],
            "details": "Pass permission flags or user role information to the template context and use conditional template logic to show or hide edit/delete links accordingly.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement DrugTemplate Create View",
        "description": "Create view for adding new drug templates with proper form handling",
        "details": "Create DrugTemplateCreateView using CreateView. Set form_class=DrugTemplateForm, automatically set creator to request.user. Add success message and redirect to detail view. Apply @login_required and @doctor_required decorators. Implement CSRF protection and form validation error handling.",
        "testStrategy": "Test view access permissions, verify form submission and validation, test success redirect, verify creator is automatically set",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up CreateView with form_class",
            "description": "Define a Django CreateView subclass specifying the form_class attribute to use a custom form for object creation.",
            "dependencies": [],
            "details": "Create a class inheriting from Django's CreateView and assign the form_class attribute to the desired ModelForm to handle form rendering and validation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Automatically set the creator in form_valid",
            "description": "Override the form_valid method to set the creator (e.g., the current user) on the object before saving it.",
            "dependencies": [
              1
            ],
            "details": "In form_valid, call form.save(commit=False), assign the creator field from request.user, then save the object and redirect to success_url.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Handle success messages and redirects",
            "description": "Implement success message display and define the redirect URL after successful form submission.",
            "dependencies": [
              2
            ],
            "details": "Use Django's messages framework to add a success message in form_valid and define success_url or override get_success_url for redirection.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Apply decorators to the CreateView",
            "description": "Apply decorators such as login_required or permission_required to the CreateView to control access.",
            "dependencies": [
              1
            ],
            "details": "Use method_decorator to decorate dispatch or other HTTP method handlers to enforce authentication or permissions on the view.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Manage CSRF protection and validation errors",
            "description": "Ensure CSRF protection is enabled and handle form validation errors gracefully in the CreateView.",
            "dependencies": [
              1
            ],
            "details": "By default, Django's CreateView includes CSRF protection; customize form_invalid to handle validation errors and redisplay the form with error messages.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement DrugTemplate Edit View",
        "description": "Create view for editing existing drug templates with permission checks",
        "details": "Create DrugTemplateUpdateView using UpdateView. Add permission check to ensure only creator can edit. Set form_class=DrugTemplateForm. Add success message and redirect to detail view. Apply @login_required decorator and custom permission check.",
        "testStrategy": "Test permission restrictions (only creator can edit), verify form pre-population, test form submission and validation, test success redirect",
        "priority": "high",
        "dependencies": [
          7,
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create the UpdateView subclass",
            "description": "Define a Django UpdateView subclass for the model to be edited, specifying the model and fields to be updated.",
            "dependencies": [],
            "details": "Use Django's generic UpdateView to create a class-based view that handles editing an existing model instance. Specify the model and the fields to be included in the form. This sets up the basic editing interface and form handling.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement permission checks for creator only",
            "description": "Add logic to ensure that only the creator of the object can access and update it.",
            "dependencies": [
              1
            ],
            "details": "Override the get_object method or use a mixin to check if the current user is the creator of the object. If not, deny access or raise a permission error. This enforces that only authorized users can update the object.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Handle form pre-population and validation",
            "description": "Ensure the form is pre-populated with the existing object data and validate the form input on submission.",
            "dependencies": [
              1
            ],
            "details": "The UpdateView automatically pre-populates the form with the current instance data. Customize form validation if needed by overriding form_valid or form_invalid methods to maintain data integrity during updates.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Manage success feedback after update",
            "description": "Provide user feedback upon successful update and redirect appropriately.",
            "dependencies": [
              1,
              3
            ],
            "details": "Define success_url or override form_valid to redirect the user after a successful update. Optionally, add messages or notifications to inform the user that the update was successful.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement DrugTemplate Delete View",
        "description": "Create view for deleting drug templates with confirmation and dependency checks",
        "details": "Create DrugTemplateDeleteView using DeleteView. Add permission check for creator only. Check if template is used in existing prescriptions before deletion. Show confirmation page with usage warning. Add success message and redirect to list view. Apply @login_required decorator.",
        "testStrategy": "Test deletion permissions, verify confirmation page, test prevention of deletion when template is in use, verify success redirect",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create DeleteView for the model",
            "description": "Implement a Django class-based DeleteView to handle the deletion of a specific model instance, including URL routing and template setup for the confirmation page.",
            "dependencies": [],
            "details": "Define a DeleteView subclass for the target model, configure the URL pattern to point to this view, and create a basic confirmation template that asks the user to confirm deletion.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add permission checks to DeleteView",
            "description": "Integrate permission checks into the DeleteView to ensure only authorized users can perform deletions.",
            "dependencies": [
              1
            ],
            "details": "Override the DeleteView methods to check user permissions before allowing deletion, such as using Django's built-in permission system or custom logic to restrict access.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement dependency checks before deletion",
            "description": "Add logic to verify if the object to be deleted has dependencies or related objects that prevent safe deletion.",
            "dependencies": [
              1
            ],
            "details": "Before deleting, check for related objects or constraints that would cause data integrity issues if deleted. If dependencies exist, prevent deletion and provide appropriate feedback.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create confirmation page with warnings",
            "description": "Design and implement a confirmation page that warns users about the consequences of deletion, including any dependency-related warnings.",
            "dependencies": [
              1,
              3
            ],
            "details": "Enhance the DeleteView confirmation template to display warnings about dependencies or other important information, ensuring users are fully informed before confirming deletion.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Create DrugTemplate URL Patterns",
        "description": "Configure URL routing for all drug template views",
        "details": "Create urls.py in drugtemplates app. Define URL patterns: '' (list), 'create/' (create), '<int:pk>/' (detail), '<int:pk>/edit/' (update), '<int:pk>/delete/' (delete). Use name parameter for reverse lookups. Set app_name='drugtemplates' for namespacing. Include in main urls.py with 'drugtemplates/' prefix.",
        "testStrategy": "Test all URL patterns resolve correctly, verify reverse URL lookups work, test namespacing functionality",
        "priority": "high",
        "dependencies": [
          10
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define URL Patterns in App's urls.py",
            "description": "Create and organize URL patterns specific to each Django app in its own urls.py file, using path converters for dynamic routing.",
            "dependencies": [],
            "details": "Use Django's path() function to define URL patterns that map URLs to views within the app. Include dynamic segments with converters like <int:id> or <slug:slug> for flexible routing. Keep patterns simple and readable to enhance maintainability.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Set app_name for URL Namespacing",
            "description": "Assign an app_name variable in the app's urls.py to enable URL namespacing for reverse lookups and avoid naming conflicts.",
            "dependencies": [
              1
            ],
            "details": "Add the app_name string at the top of the app's urls.py file to define a namespace. This allows referencing URLs with the namespace prefix in templates and views, improving clarity and preventing clashes between apps with similar URL names.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Include App URLs in Main Project Routing",
            "description": "Integrate each app's URL patterns into the main project's urls.py using the include() function and the app's namespace.",
            "dependencies": [
              1,
              2
            ],
            "details": "In the project's main urls.py, use path() with include() to incorporate the app's urls.py patterns under a specific URL prefix. This modular approach keeps the project routing organized and leverages the app_name for namespaced URL reversing.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Create DrugTemplate Base Templates",
        "description": "Implement base HTML templates for drug template views",
        "details": "Create templates/drugtemplates/ directory. Create base.html extending main base template. Implement list.html with Bootstrap table, pagination, and filter controls. Create detail.html showing all template information with action buttons. Follow Bootstrap 5.3.6 and medical theme styling.",
        "testStrategy": "Test template rendering, verify Bootstrap styling applies correctly, test responsive design, verify template inheritance works",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create base.html template",
            "description": "Develop the base HTML template with Bootstrap integration to serve as the foundation for other templates.",
            "dependencies": [],
            "details": "Include Bootstrap CSS and JS links, define a consistent header, footer, and navigation bar. Set up blocks for content injection by child templates to ensure consistent styling and layout across pages.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Develop list.html with Bootstrap table and pagination",
            "description": "Create the list view template displaying data in a Bootstrap-styled table with pagination controls.",
            "dependencies": [
              1
            ],
            "details": "Use Bootstrap table components to display data rows. Implement pagination using Bootstrap's pagination component to allow navigation through multiple pages of data. Ensure responsiveness and usability of the table and pagination controls.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create detail.html with action buttons",
            "description": "Design the detail view template showing individual item details with action buttons for user interactions.",
            "dependencies": [
              1
            ],
            "details": "Use Bootstrap styling to present detailed information clearly. Add action buttons such as Edit, Delete, or Back, styled consistently with Bootstrap button classes for user actions.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Apply consistent styling across all templates",
            "description": "Ensure all templates share a unified look and feel by applying consistent Bootstrap-based styling and theming.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Review and refine CSS classes, color schemes, spacing, and typography across base.html, list.html, and detail.html. Confirm responsive design and accessibility standards are met.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "Create DrugTemplate Form Templates",
        "description": "Implement HTML templates for create and edit forms",
        "details": "Create form.html template for create/edit views using crispy forms. Add proper form styling with Bootstrap classes. Include markdown editor for usage_instructions. Add form validation error display. Create delete_confirm.html template with warning messages.",
        "testStrategy": "Test form rendering with proper styling, verify markdown editor functionality, test validation error display, test delete confirmation page",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create form.html with crispy forms and markdown editor",
            "description": "Develop the form.html template that integrates Django crispy forms for styling and layout, and includes a markdown editor widget for relevant form fields.",
            "dependencies": [],
            "details": "Use crispy forms tags to render the form dynamically with proper styling. Integrate a markdown editor widget (such as SimpleMDE or similar) for text fields that require markdown input, ensuring the editor loads correctly within the template.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement validation error display in form.html",
            "description": "Enhance the form.html template to display validation errors clearly, both field-specific and non-field errors, using Django's form error handling and crispy forms capabilities.",
            "dependencies": [
              1
            ],
            "details": "Utilize Django's form.errors and crispy forms error rendering to show validation feedback. Display errors at the top of the form and next to the respective fields. Customize error list formatting if needed to improve user experience.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create delete confirmation template",
            "description": "Design a separate template to confirm deletion actions, providing users with a clear prompt before deleting an item.",
            "dependencies": [],
            "details": "The template should include a message confirming the delete action, buttons to confirm or cancel, and be styled consistently with the rest of the application. It should be simple and user-friendly.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 14,
        "title": "Create Outpatient Prescriptions App Structure",
        "description": "Initialize the outpatientprescriptions app with proper Django structure",
        "details": "Create outpatientprescriptions app using 'python manage.py startapp outpatientprescriptions apps/outpatientprescriptions'. Add 'apps.outpatientprescriptions' to INSTALLED_APPS. Create directory structure with models, views, forms, templates, urls, tests. Import drugtemplates app for integration.",
        "testStrategy": "Test app import in Django shell, verify app in INSTALLED_APPS, check directory structure, test drugtemplates import",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Django App Using Command",
            "description": "Use the Django management command to create a new app within the project directory.",
            "dependencies": [],
            "details": "Navigate to the project directory where manage.py is located and run `python manage.py startapp <app_name>`. This will generate the app folder with default files such as views.py, models.py, admin.py, apps.py, migrations folder, and others.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update settings.py to Include New App",
            "description": "Add the newly created app to the INSTALLED_APPS list in the project's settings.py file to register it with the Django project.",
            "dependencies": [
              1
            ],
            "details": "Open settings.py and append the app name string to the INSTALLED_APPS list to ensure Django recognizes and loads the app during runtime.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set Up Directory Structure and Files",
            "description": "Organize and verify the directory structure of the new app and create any additional files needed for integration.",
            "dependencies": [
              1
            ],
            "details": "Confirm the presence of the app folder with its default files (views.py, models.py, urls.py if needed, migrations folder, etc.). Create or modify files such as urls.py for routing and templates or static folders if required for the app's functionality.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Verify App Import and Integrate with drugtemplates",
            "description": "Ensure the app is correctly imported and integrated with the drugtemplates component or module within the project.",
            "dependencies": [
              2,
              3
            ],
            "details": "Test that the app is properly imported by running the server or executing test commands. Integrate the app's views or models with drugtemplates by importing necessary modules and linking URLs or templates as needed.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 15,
        "title": "Implement OutpatientPrescription Model",
        "description": "Create OutpatientPrescription model extending Event with event_type=11",
        "details": "Create OutpatientPrescription model inheriting from Event. Set event_type=11 in save method. Add additional fields: instructions (TextField for general prescription notes), status (CharField with choices: draft, finalized), prescription_date (DateField, auto-filled). Override __str__ method. Add get_absolute_url method.",
        "testStrategy": "Test model creation and Event inheritance, verify event_type is set correctly, test model methods and field validation",
        "priority": "high",
        "dependencies": [
          14
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Model Fields",
            "description": "Define the necessary fields for the Django model, including appropriate field types, choices, defaults, and indexes as needed.",
            "dependencies": [],
            "details": "Use Django's model field classes such as CharField, IntegerField, ForeignKey, etc., to define each field. Include constants for choice fields inside the model class. Ensure fields have proper max_length, default values, and db_index if required. Avoid naming conflicts with model methods.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Override the save() Method for event_type",
            "description": "Customize the model's save() method to implement specific behavior related to the event_type field before saving the instance.",
            "dependencies": [
              1
            ],
            "details": "Override the save() method to set or modify the event_type field based on custom logic before calling the superclass save method. Ensure to handle any validation or side effects related to event_type.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement __str__ Method",
            "description": "Define the __str__ method to provide a human-readable string representation of the model instances.",
            "dependencies": [
              1
            ],
            "details": "Implement the __str__ method to return a meaningful string that represents the model instance, typically using one or more of the model's fields.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement get_absolute_url Method",
            "description": "Define the get_absolute_url method to return the canonical URL for a model instance.",
            "dependencies": [
              1
            ],
            "details": "Implement get_absolute_url to return the URL string for the detail view of the model instance, typically using Django's reverse function with the instance's primary key or slug.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Write Unit Tests for Model",
            "description": "Create unit tests to verify the correct behavior of the model fields, save method override, __str__, and get_absolute_url methods.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Write tests to check field validations, default values, event_type logic in save(), string representation from __str__, and URL correctness from get_absolute_url. Use Django's TestCase framework.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 16,
        "title": "Implement PrescriptionItem Model",
        "description": "Create model for individual prescription items with copied drug data",
        "details": "Create PrescriptionItem model with fields: prescription (ForeignKey to OutpatientPrescription), drug_name (CharField, max_length=200), presentation (CharField, max_length=300), usage_instructions (TextField), quantity (CharField, max_length=100), order (PositiveIntegerField for sorting). Add Meta class with ordering=['order']. Implement __str__ method.",
        "testStrategy": "Test model creation and relationships, verify ordering functionality, test field validation and constraints",
        "priority": "high",
        "dependencies": [
          15
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Django Models with ForeignKey Relationships",
            "description": "Create Django model classes that include fields and establish foreign key relationships to represent many-to-one associations.",
            "dependencies": [],
            "details": "Use Django's ForeignKey field to define relationships between models, ensuring data integrity and proper relational mapping. For example, define a parent model and a child model where the child has a ForeignKey to the parent model as per Django documentation[2].",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Ordering of Model Instances Respecting ForeignKey",
            "description": "Add ordering to the models so that instances can be ordered relative to their foreign key relationships.",
            "dependencies": [
              1
            ],
            "details": "Use Django ORM's native ordering features such as the 'order_with_respect_to' attribute or the 'order_by' method with double underscore syntax to order objects by fields on related models. Consider using django-ordered-model package for advanced ordering with respect to foreign keys[1][3][5].",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement __str__ Method for Models",
            "description": "Define the __str__ method in each model to provide a human-readable string representation of model instances.",
            "dependencies": [
              1
            ],
            "details": "Override the __str__ method in each Django model class to return meaningful string representations, such as the name or title field, to improve readability in admin interfaces and debugging.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Write Validation Tests for Models and Ordering",
            "description": "Create unit tests to validate the correctness of model field definitions, foreign key relationships, ordering behavior, and string representations.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Write Django test cases to ensure that foreign key constraints are enforced, ordering works as expected (including ordering relative to foreign keys), and __str__ methods return correct strings. Tests should cover edge cases and data integrity scenarios.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 17,
        "title": "Create PrescriptionItem Database Migration",
        "description": "Generate and apply database migrations for prescription models",
        "details": "Run 'python manage.py makemigrations outpatientprescriptions' for both models. Review migration files for foreign key relationships and field types. Apply migrations with 'python manage.py migrate'. Verify database tables created correctly.",
        "testStrategy": "Check migration files exist, verify database tables with correct relationships, test foreign key constraints",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Generate Migration Files",
            "description": "Create migration scripts or files that define the changes to the database schema, including creating, altering, or dropping tables and other database objects.",
            "dependencies": [],
            "details": "This involves converting the desired schema changes into migration files using the appropriate tools or frameworks. It is essential to ensure that the migration files accurately represent the intended schema modifications before proceeding.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Review Migration Files",
            "description": "Carefully examine the generated migration files to verify correctness, completeness, and adherence to database standards and project requirements.",
            "dependencies": [
              1
            ],
            "details": "Review includes checking for syntax errors, ensuring that the migration logic will not cause data loss or corruption, and confirming that the migration aligns with the overall database design and project goals. This step helps prevent issues during migration execution.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Apply Migrations and Verify",
            "description": "Execute the reviewed migration files against the target database and verify that the schema changes have been applied correctly and the database remains consistent.",
            "dependencies": [
              2
            ],
            "details": "Applying migrations involves running the migration scripts in the correct order, monitoring for errors, and performing verification steps such as schema inspection, data integrity checks, and running tests to confirm successful migration.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 18,
        "title": "Implement PrescriptionTemplate Models",
        "description": "Create models for reusable prescription templates",
        "details": "Create PrescriptionTemplate model with fields: name (CharField), creator (ForeignKey to User), is_public (BooleanField), created_at/updated_at (DateTimeFields). Create PrescriptionTemplateItem model with fields: template (ForeignKey), drug_name, presentation, usage_instructions, quantity, order. Add __str__ methods and Meta ordering.",
        "testStrategy": "Test template model creation, verify relationships between template and items, test ordering and validation",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design PrescriptionTemplate and PrescriptionTemplateItem Models",
            "description": "Define the data models for PrescriptionTemplate and PrescriptionTemplateItem including fields, data types, and constraints based on pharmacy database design principles.",
            "dependencies": [],
            "details": "Create PrescriptionTemplate model to represent a reusable prescription format. Create PrescriptionTemplateItem model to represent individual items (medicines or instructions) within a template. Include fields such as template name, description, item name, dosage, frequency, and any other relevant attributes.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Define Relationships and Ordering Between Models",
            "description": "Establish the relationships between PrescriptionTemplate and PrescriptionTemplateItem models, including one-to-many association and ordering of items.",
            "dependencies": [
              1
            ],
            "details": "Implement a one-to-many relationship where a PrescriptionTemplate has many PrescriptionTemplateItems. Add ordering functionality to PrescriptionTemplateItems to maintain a specific sequence within each template, ensuring correct prescription item order.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Validation and Business Logic",
            "description": "Add validation rules and business logic to ensure data integrity and correct behavior of the PrescriptionTemplate and PrescriptionTemplateItem models.",
            "dependencies": [
              2
            ],
            "details": "Validate required fields, enforce unique constraints where necessary, and ensure that ordering indices are consistent and non-conflicting. Include logic to handle updates and deletions that maintain relational integrity.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Write Unit and Integration Tests for Models and Relationships",
            "description": "Develop comprehensive tests to verify the correctness of the PrescriptionTemplate and PrescriptionTemplateItem models, their relationships, ordering, and validations.",
            "dependencies": [
              3
            ],
            "details": "Create tests to check model creation, relationship integrity, ordering correctness, and validation enforcement. Include edge cases such as empty templates, duplicate items, and invalid ordering values.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 19,
        "title": "Create Prescription Template Migration",
        "description": "Generate and apply migrations for prescription template models",
        "details": "Generate migrations for PrescriptionTemplate and PrescriptionTemplateItem models. Review migration file for correct relationships. Apply migration and verify database table creation.",
        "testStrategy": "Verify migration files, check database table creation, test foreign key relationships",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Generate Migration Files for New Models",
            "description": "Create migration scripts that define the database schema changes required for the new models, including tables, columns, indexes, and constraints.",
            "dependencies": [],
            "details": "Use the appropriate framework or tool commands to generate migration files reflecting the new models' structure. Ensure the migrations capture all necessary schema changes before proceeding to review.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Review Migration Files",
            "description": "Thoroughly examine the generated migration files to verify correctness, completeness, and adherence to database design standards.",
            "dependencies": [
              1
            ],
            "details": "Check that the migration files accurately represent the intended schema changes, avoid redundant or conflicting operations, and conform to best practices for database migrations. Identify any potential issues or improvements before applying.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Apply Migrations and Verify",
            "description": "Execute the reviewed migration files against the target database and verify that the schema changes have been applied successfully without errors.",
            "dependencies": [
              2
            ],
            "details": "Run the migration commands to update the database schema. After applying, perform verification steps such as checking table structures, constraints, and data integrity to confirm the migration was successful and the database is in the expected state.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 20,
        "title": "Setup Prescription Admin Interface",
        "description": "Configure Django admin for prescription models",
        "details": "Create admin configurations for OutpatientPrescription, PrescriptionItem, PrescriptionTemplate, and PrescriptionTemplateItem. Add inline editing for items within prescriptions. Configure list displays, filters, and search fields. Add readonly fields for audit information.",
        "testStrategy": "Test admin interface functionality, verify inline editing works, test search and filtering capabilities",
        "priority": "low",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Admin for Each Model",
            "description": "Set up the Django admin interface for each model by registering them with the admin site and customizing the basic display and form layout.",
            "dependencies": [],
            "details": "Register each model with the Django admin site using ModelAdmin classes. Customize the admin interface by specifying which fields to display and how forms are laid out, including field order and grouping.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add Inline Editing for Related Models",
            "description": "Enable inline editing of related models within the admin detail views to allow editing related objects directly on the parent model's page.",
            "dependencies": [
              1
            ],
            "details": "Use Django admin inlines (TabularInline or StackedInline) to add related models to the parent model's admin form. This allows adding and editing related records inline, improving usability.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set List Displays and Filters",
            "description": "Customize the list views of each model in the admin by specifying which fields to display and adding filters to refine the displayed records.",
            "dependencies": [
              1
            ],
            "details": "Use the `list_display` attribute in ModelAdmin to control which fields appear in the list view. Add `list_filter` to enable filtering by specific fields such as dates or status values.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Test Search Functionality",
            "description": "Implement and verify search capabilities in the admin list views to allow searching records by specified fields.",
            "dependencies": [
              1,
              3
            ],
            "details": "Add `search_fields` to the ModelAdmin classes to enable search on relevant model fields. Test the search functionality to ensure it returns accurate results and integrates well with filters and list displays.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 21,
        "title": "Create Prescription Forms",
        "description": "Implement forms for creating and editing prescriptions with formsets",
        "details": "Create OutpatientPrescriptionForm extending appropriate Event form. Create PrescriptionItemForm for individual items. Create PrescriptionItemFormSet using inlineformset_factory for handling multiple items. Add JavaScript for dynamic form addition/removal. Include drug template selection widget.",
        "testStrategy": "Test form creation and validation, verify formset functionality, test drug template integration, test JavaScript dynamic forms",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Main Prescription Form",
            "description": "Design and implement the main prescription form in Django, including fields for patient details, prescription date, and other relevant metadata.",
            "dependencies": [],
            "details": "Use Django's forms framework to build a form class representing the prescription model. Ensure proper validation and rendering in templates.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create Item Form for Prescription Items",
            "description": "Develop a separate form for individual prescription items (e.g., drugs), including fields such as drug name, dosage, quantity, and instructions.",
            "dependencies": [
              1
            ],
            "details": "Implement a Django form class for prescription items that can be used within formsets to handle multiple items dynamically.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Formset for Multiple Prescription Items",
            "description": "Create a Django formset to manage multiple item forms within a single prescription, allowing users to add or remove items dynamically.",
            "dependencies": [
              2
            ],
            "details": "Use Django's formset_factory or inline formsets to link item forms to the main prescription form, enabling multiple entries per prescription.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add JavaScript for Dynamic Form Handling",
            "description": "Integrate JavaScript to enhance the user interface by allowing dynamic addition and removal of prescription item forms within the formset without page reloads.",
            "dependencies": [
              3
            ],
            "details": "Write JavaScript code to clone form templates, update form indices, and handle client-side validation and UI updates for dynamic forms.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Integrate Drug Template Selection Widget",
            "description": "Add a widget to the item form that allows users to select from predefined drug templates to auto-fill item details, improving usability and accuracy.",
            "dependencies": [
              4
            ],
            "details": "Develop or integrate a custom widget or autocomplete field in Django forms that fetches drug templates and populates form fields accordingly.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 22,
        "title": "Create Prescription Template Forms",
        "description": "Implement forms for managing prescription templates",
        "details": "Create PrescriptionTemplateForm for template management. Create PrescriptionTemplateItemForm for template items. Create PrescriptionTemplateItemFormSet for handling multiple template items. Add validation for template names and item requirements.",
        "testStrategy": "Test template form creation and validation, verify template item formset functionality, test form validation rules",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Template Form",
            "description": "Develop a Django form for the template model to capture the main template data.",
            "dependencies": [],
            "details": "Define a Django ModelForm or Form class for the template entity, specifying the necessary fields and widgets as per the project requirements.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create Template Item Form",
            "description": "Develop a Django form for the template item model to capture individual items related to the template.",
            "dependencies": [
              1
            ],
            "details": "Define a Django ModelForm or Form class for the template item entity, including fields that represent the item details. This form will be used within the formset.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Formset for Template Items",
            "description": "Implement a Django formset to manage multiple template item forms dynamically.",
            "dependencies": [
              2
            ],
            "details": "Use Django's formset_factory or inlineformset_factory to create a formset class based on the template item form. Configure parameters such as 'extra', 'min_num', and 'can_delete' as needed to control the number of forms and behavior.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add Validation Rules",
            "description": "Add custom validation logic to the template form, template item form, and the formset to ensure data integrity and business rules compliance.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Implement clean methods in forms and formsets to validate individual fields and inter-form relationships. For example, enforce minimum number of items in the formset or validate unique constraints.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 23,
        "title": "Implement Prescription List View",
        "description": "Create view to display patient prescriptions with filtering",
        "details": "Create OutpatientPrescriptionListView using ListView. Filter by patient parameter if provided. Add filtering by date range, status, creator. Implement pagination. Apply @login_required and @patient_access_required decorators. Add links to create new prescriptions.",
        "testStrategy": "Test view permissions and patient filtering, verify pagination and filtering work correctly, test prescription list display",
        "priority": "high",
        "dependencies": [
          21
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create ListView for Displaying Items",
            "description": "Define a Django ListView class to display a list of objects from the relevant model, specifying model and context object name.",
            "dependencies": [],
            "details": "Implement a class-based view inheriting from Django's ListView, set the model attribute to the target model (e.g., Patient), and define context_object_name for template use. Optionally specify template_name if deviating from default.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Patient and Other Filters",
            "description": "Add filtering functionality to the ListView to allow filtering by patient attributes and other criteria.",
            "dependencies": [
              1
            ],
            "details": "Override the get_queryset method in the ListView to apply filters based on request parameters, enabling dynamic filtering of the displayed list according to patient data and other filters.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Pagination to ListView",
            "description": "Incorporate pagination into the ListView to limit the number of items displayed per page and enable navigation between pages.",
            "dependencies": [
              1
            ],
            "details": "Set the paginate_by attribute in the ListView to define the number of items per page. Ensure the template supports pagination controls to navigate through pages.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Apply Permission and Other Decorators",
            "description": "Add decorators to the ListView to enforce permissions and other access controls.",
            "dependencies": [
              1
            ],
            "details": "Use Django's method_decorator to apply decorators such as login_required or custom permission checks to the dispatch method of the ListView, ensuring only authorized users can access the view.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Add Create Links for New Entries",
            "description": "Add links in the ListView template to allow users to navigate to a create view for adding new patient or related records.",
            "dependencies": [
              1
            ],
            "details": "Modify the ListView template to include hyperlinks or buttons that direct users to the CreateView for the relevant model, facilitating easy creation of new entries from the list page.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 24,
        "title": "Implement Prescription Create View",
        "description": "Create complex view for prescription creation with drug template integration",
        "details": "Create OutpatientPrescriptionCreateView using CreateView. Handle both prescription form and item formset. Add drug template selection interface with AJAX for auto-population. Add prescription template selection. Implement data copying from templates to ensure independence. Apply @patient_access_required decorator.",
        "testStrategy": "Test prescription creation workflow, verify drug template integration, test data copying independence, test form validation and submission",
        "priority": "high",
        "dependencies": [
          23
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Prescription Form and Item Formset",
            "description": "Create and configure the main prescription form and an associated item formset to handle multiple prescription items within a single view.",
            "dependencies": [],
            "details": "Use Django's forms and formsets (or modelformsets if tied to models) to build the prescription form and item formset. Ensure the formset can handle multiple items dynamically and supports validation and data binding on POST requests.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement AJAX Drug Template Selection",
            "description": "Add AJAX functionality to allow dynamic selection and loading of drug templates without full page reloads.",
            "dependencies": [
              1
            ],
            "details": "Create AJAX endpoints and JavaScript handlers to fetch drug template data asynchronously when a user selects a drug template. Update the item formset fields accordingly based on the selected template.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Prescription Template Selection with Data Copying Logic",
            "description": "Enable selection of prescription templates that pre-fill the prescription form and item formset with predefined data.",
            "dependencies": [
              1,
              2
            ],
            "details": "Develop logic to copy data from selected prescription templates into the main prescription form and item formset. This includes handling nested data and ensuring the formset updates correctly with the copied data.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Apply Decorators for Permissions and Access Control",
            "description": "Secure the view by applying appropriate decorators to enforce user permissions and access control.",
            "dependencies": [
              1
            ],
            "details": "Use Django decorators such as @login_required and custom permission decorators to restrict access to the prescription handling view, ensuring only authorized users can create or edit prescriptions.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Manage Validation and Submission Logic",
            "description": "Implement comprehensive validation for both the prescription form and item formset, and handle form submission with proper error handling and success redirects.",
            "dependencies": [
              1,
              3
            ],
            "details": "On POST requests, bind submitted data to forms and formsets, validate all inputs, handle errors by redisplaying forms with messages, and save valid data to the database. Ensure atomicity if needed.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Integrate All Components into a Complex View",
            "description": "Combine the prescription form, item formset, AJAX drug and prescription template selection, decorators, and validation into a single cohesive Django view.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "Create a class-based or function-based view that orchestrates rendering the forms, handling AJAX requests, applying decorators, processing submissions, and managing validation and data copying logic seamlessly.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 25,
        "title": "Implement Prescription Detail View",
        "description": "Create detailed view for viewing complete prescriptions",
        "details": "Create OutpatientPrescriptionDetailView using DetailView. Display complete prescription information including all items. Add print button and edit/delete links with appropriate permissions. Show prescription timeline and audit information. Apply @patient_access_required decorator.",
        "testStrategy": "Test prescription detail display, verify permission-based action buttons, test print button functionality",
        "priority": "high",
        "dependencies": [
          24
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create DetailView for Prescription",
            "description": "Define a Django DetailView class to display the details of a prescription object, specifying the model, template, and context object name.",
            "dependencies": [],
            "details": "Implement a class-based view inheriting from django.views.generic.detail.DetailView, set the model to Prescription, define context_object_name for template clarity, and specify or create the template file for rendering.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Display All Prescription Items in DetailView",
            "description": "Extend the DetailView template to list all related prescription items associated with the prescription object.",
            "dependencies": [
              1
            ],
            "details": "Modify the prescription detail template to iterate over the prescription items related to the prescription and display their details, using Django template language to loop through the related items queryset.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Print and Edit/Delete Links with Permissions",
            "description": "Add UI elements for printing, editing, and deleting the prescription, ensuring these links are shown only if the user has the appropriate permissions.",
            "dependencies": [
              1,
              2
            ],
            "details": "In the detail template, add buttons or links for print, edit, and delete actions. Use Django's permission system or user checks in the template to conditionally display these links based on user permissions.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Show Audit Information in DetailView",
            "description": "Display audit-related information such as creation date, last modified date, and user who made changes within the prescription detail view.",
            "dependencies": [
              1,
              2
            ],
            "details": "Extend the detail template to include audit fields from the prescription model or related audit logs, showing metadata about the prescription's history and changes.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 26,
        "title": "Implement Prescription Edit View",
        "description": "Create view for editing existing prescriptions with 24-hour window check",
        "details": "Create OutpatientPrescriptionUpdateView using UpdateView. Handle both prescription form and item formset updates. Apply @can_edit_event_required decorator for 24-hour window check. Preserve existing items and allow adding/removing items. Update audit trail information.",
        "testStrategy": "Test edit permissions and 24-hour window restriction, verify formset updates work correctly, test audit trail updates",
        "priority": "high",
        "dependencies": [
          25
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create UpdateView for the model",
            "description": "Implement a Django UpdateView subclass to handle editing of the main model instance, ensuring it loads the object correctly and displays the form with the appropriate fields.",
            "dependencies": [],
            "details": "Use Django's generic UpdateView to create a view that fetches the object by primary key and renders a form for editing. Define the model and fields to be updated. This forms the base for handling updates.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Handle form and formset updates in the UpdateView",
            "description": "Extend the UpdateView to process both the main form and associated formsets during POST requests, ensuring validation and saving of all related data.",
            "dependencies": [
              1
            ],
            "details": "Override methods like get_context_data to include formsets, and post to handle saving both the main form and formsets. Manage formset management forms and ensure the primary key is correctly used to update existing instances.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Enforce 24-hour edit window restriction",
            "description": "Implement logic in the UpdateView to restrict editing of the object to within 24 hours of its creation or last update, preventing edits beyond this time frame.",
            "dependencies": [
              1
            ],
            "details": "Add a permission check or override dispatch or get_object methods to verify the object's timestamp against the current time. If the edit window has expired, deny access or redirect with an appropriate message.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Preserve existing items during update",
            "description": "Ensure that during the update process, existing related items or formset entries are preserved unless explicitly modified or deleted by the user.",
            "dependencies": [
              2
            ],
            "details": "Handle formset instances carefully to avoid unintentional deletion of related objects. Use formset management forms and instance binding to maintain existing data integrity during updates.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Update audit trail on changes",
            "description": "Implement audit trail updates to log changes made during the update process, capturing who made the change and when.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Integrate audit logging either by overriding form_valid or post methods to record changes to the object and related formsets. Store audit data in a dedicated model or logging system.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 27,
        "title": "Implement Prescription Print View",
        "description": "Create print-ready view following HTML+browser print strategy",
        "details": "Create OutpatientPrescriptionPrintView using DetailView with print template. Include hospital information, doctor details, patient information, prescription items with instructions. Apply print-specific CSS with @media print rules. Follow medical document standards for layout.",
        "testStrategy": "Test print view rendering, verify print CSS applies correctly across browsers, test medical document format compliance",
        "priority": "high",
        "dependencies": [
          25
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Print-Specific DetailView",
            "description": "Develop a Django DetailView subclass dedicated to rendering the print view of hospital and patient information, specifying the model and template for print.",
            "dependencies": [],
            "details": "Use Django's generic DetailView to create a new view class that fetches the hospital and patient data. Configure it to use a print-specific template to separate print logic from regular views.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Print Template with Hospital and Patient Info",
            "description": "Design and implement an HTML template tailored for printing, including hospital and patient details formatted for print layout.",
            "dependencies": [
              1
            ],
            "details": "Create a dedicated print template extending the base layout but optimized for print, including all necessary hospital and patient information fields. Ensure the template is clean and suitable for paper or PDF output.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Print-Specific CSS Styling",
            "description": "Develop and integrate CSS rules specifically for print media to ensure the print template displays correctly and cleanly across browsers.",
            "dependencies": [
              2
            ],
            "details": "Write CSS using @media print queries to style the print template, hiding unnecessary elements and formatting content for optimal print readability and layout.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Test Cross-Browser Compatibility of Print View",
            "description": "Perform testing of the print-specific DetailView and template across multiple browsers to ensure consistent appearance and functionality.",
            "dependencies": [
              3
            ],
            "details": "Test the print view on major browsers (Chrome, Firefox, Edge, Safari) to verify that the print layout, styles, and data rendering are consistent and correct. Fix any browser-specific issues found.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 28,
        "title": "Implement Prescription Template Management Views",
        "description": "Create views for managing prescription templates",
        "details": "Create PrescriptionTemplateListView, DetailView, CreateView, UpdateView, and DeleteView. Apply appropriate permission decorators. Add filtering for public/private templates. Implement template item formset handling. Add usage statistics display.",
        "testStrategy": "Test all template management views, verify permission restrictions, test template item management, verify usage statistics",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement List and Detail Views with Filtering",
            "description": "Create list and detail views for the model, including filtering capabilities to allow users to search or filter the list based on criteria.",
            "dependencies": [],
            "details": "Develop a list view that supports filtering query parameters to display subsets of data. Implement a detail view to show individual record details. Use Django's generic views or function-based views as appropriate.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create Create and Update Views with Form Handling",
            "description": "Develop views to handle creating new records and updating existing ones, including form validation and handling formsets if multiple related forms are needed.",
            "dependencies": [
              1
            ],
            "details": "Use Django forms and formsets to manage input data. Ensure proper validation and error handling. Support both single and multiple related forms (formsets) for complex data entry scenarios.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Delete View with Confirmation and Permissions",
            "description": "Create a delete view that allows users to delete records with confirmation prompts and enforces permission checks to restrict access.",
            "dependencies": [
              1
            ],
            "details": "Add a confirmation step before deletion. Use Django's permission system to restrict delete operations to authorized users only.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add Permission Checks Across All CRUD Views",
            "description": "Integrate permission checks into all CRUD views to ensure users have the appropriate rights to view, create, update, or delete records.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Use Django's built-in permission decorators or mixins to enforce access control. Customize permissions as needed for different user roles.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Usage Statistics Display",
            "description": "Create a view or dashboard to display usage statistics related to the CRUD operations, such as number of records created, updated, or deleted over time.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Collect and aggregate data on CRUD operations. Present statistics in a user-friendly format, possibly using charts or tables.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 29,
        "title": "Create Prescription URL Patterns",
        "description": "Configure URL routing for all prescription views",
        "details": "Create urls.py in outpatientprescriptions app. Define URL patterns for all prescription views including patient-specific routes. Add template management routes. Include print view routes. Set app_name='outpatientprescriptions'. Include in main urls.py.",
        "testStrategy": "Test all URL patterns resolve correctly, verify patient-specific routing, test reverse URL lookups",
        "priority": "high",
        "dependencies": [
          28
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define URL Patterns for All Views",
            "description": "Create URL patterns in the app's urls.py file that map specific URL paths to their corresponding views, using the path() function and optionally including dynamic parameters.",
            "dependencies": [],
            "details": "Import the path function and views module in the app's urls.py. Define urlpatterns as a list of path() calls, each linking a URL pattern to a view function or class-based view. Use angle brackets to capture parameters (e.g., <int:id>). Keep URL patterns simple and readable for maintainability.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Set app_name for URL Namespacing",
            "description": "Assign an app_name variable in the app's urls.py to enable URL namespacing, which helps organize URL names and avoid conflicts across multiple apps.",
            "dependencies": [
              1
            ],
            "details": "Add a line app_name = 'your_app_name' at the top of the app's urls.py file. This allows the use of namespaced URL references in templates and reverse() calls, improving clarity and maintainability.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Include App URLs in Main Project Routing",
            "description": "Integrate the app's URL patterns into the main project's urls.py by using the include() function, enabling modular and hierarchical URL routing.",
            "dependencies": [
              1,
              2
            ],
            "details": "In the project's main urls.py, import include and add a path() entry that includes the app's urls.py patterns under a desired prefix (e.g., path('app/', include('app.urls'))). This keeps project-level routing organized and delegates app-specific routing to the app itself.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 30,
        "title": "Create Prescription Base Templates",
        "description": "Implement base HTML templates for prescription views",
        "details": "Create templates/outpatientprescriptions/ directory. Create base.html extending main template. Implement list.html with prescription table and filtering. Create detail.html with complete prescription display. Follow Bootstrap 5.3.6 and medical theme styling.",
        "testStrategy": "Test template rendering and styling, verify responsive design, test template inheritance",
        "priority": "medium",
        "dependencies": [
          29
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create base.html template",
            "description": "Develop the base HTML template that includes the common layout structure, Bootstrap medical theme styling, navigation, and footer to be extended by other templates.",
            "dependencies": [],
            "details": "Use a clean, responsive Bootstrap medical template such as Medilab or Medicio as the foundation. Integrate the Bootstrap CSS and JS files, set up the header with navigation links, and footer with contact info or copyright. Ensure the base.html supports blocks for content injection by child templates.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create list.html template with filtering",
            "description": "Build the list view template that extends base.html and displays a filtered list of medical-related items (e.g., doctors, clinics). Include filtering controls and responsive Bootstrap styling.",
            "dependencies": [
              1
            ],
            "details": "Implement filtering UI elements such as dropdowns or search inputs styled with Bootstrap components. Display the filtered results in a responsive grid or table format consistent with the medical theme. Ensure the template uses Bootstrap classes for layout and styling.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create detail.html template with full display",
            "description": "Develop the detail view template that extends base.html and shows full details of a selected medical item with comprehensive information and Bootstrap styling.",
            "dependencies": [
              1
            ],
            "details": "Design the detail page to present all relevant information clearly, using Bootstrap cards, typography, and layout utilities. Include images, descriptions, contact info, and any other pertinent details. Maintain consistent styling with the medical theme.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Apply consistent Bootstrap medical theme styling",
            "description": "Ensure all templates (base.html, list.html, detail.html) have consistent styling using a chosen Bootstrap medical theme and responsive design principles.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Review and unify the color schemes, fonts, spacing, and component styles across all templates. Use a free Bootstrap medical template like Medilab or Medicio as a style guide. Test responsiveness and accessibility on various devices.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 31,
        "title": "Create Prescription Form Templates",
        "description": "Implement complex form templates for prescription creation/editing",
        "details": "Create form.html template with prescription form and item formset. Add JavaScript for dynamic item addition/removal. Create drug template selection modal. Add prescription template selection interface. Implement form validation error display with proper styling.",
        "testStrategy": "Test form template rendering, verify JavaScript functionality for dynamic forms, test template selection interfaces",
        "priority": "high",
        "dependencies": [
          30
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create form.html with form and formset",
            "description": "Develop the HTML template 'form.html' that includes the main form and integrates a Django formset to allow multiple form instances on the page.",
            "dependencies": [],
            "details": "Implement the formset management form and render each form in the formset within the template. Ensure the formset is properly included to handle multiple entries as per Django's formset conventions.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add JavaScript for dynamic formset item management",
            "description": "Implement JavaScript functionality to dynamically add and remove formset forms on the client side.",
            "dependencies": [
              1
            ],
            "details": "Use JavaScript to clone existing formset forms, increment form indices, update the management form's total form count, and insert new forms into the DOM dynamically, enabling users to add multiple items without page reloads.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement drug and prescription template selection modals",
            "description": "Create modal dialogs within the template to allow users to select drugs and prescriptions from predefined templates.",
            "dependencies": [
              1
            ],
            "details": "Design and integrate modal components that can be triggered from the form, enabling selection of drug and prescription templates. Ensure selections update the form fields accordingly.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement validation error display in the form and formset",
            "description": "Add mechanisms to display validation errors clearly for both the main form and the formset items.",
            "dependencies": [
              1
            ],
            "details": "Ensure that validation errors from Django forms and formsets are rendered in the template near the relevant fields, providing clear feedback to users on submission errors.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 32,
        "title": "Create Prescription Print Template",
        "description": "Implement print-ready template following medical document standards",
        "details": "Create print.html template with medical prescription layout. Include hospital letterhead section, doctor information, patient details section, prescription items table with proper spacing. Add print-specific CSS for page breaks, margins, and professional formatting.",
        "testStrategy": "Test print template across different browsers, verify medical document formatting, test page breaks and margins",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create print.html with Medical Layout",
            "description": "Develop the basic HTML structure for print.html focusing on a medical-themed layout that includes hospital and patient sections.",
            "dependencies": [],
            "details": "Set up the HTML skeleton with semantic elements to represent hospital information, patient details, and prescription items. Ensure the layout is clean and professional, suitable for medical documentation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Hospital and Patient Sections",
            "description": "Add detailed hospital and patient information sections within print.html.",
            "dependencies": [
              1
            ],
            "details": "Include fields such as hospital name, address, contact info, patient name, ID, demographics, and relevant medical details. Use clear headings and structured formatting to enhance readability.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Prescription Items Table",
            "description": "Design and implement a table within print.html to display prescription items clearly.",
            "dependencies": [
              2
            ],
            "details": "The table should list medication names, dosages, frequency, duration, and any special instructions. Use accessible table markup and ensure it fits well within the medical layout.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Develop Print-Specific CSS for Formatting",
            "description": "Write CSS styles specifically for print media to format print.html for optimal printing.",
            "dependencies": [
              3
            ],
            "details": "Include styles to control page breaks, font sizes (preferably sans-serif fonts like Arial or Helvetica), margins, and color schemes aligned with medical branding. Ensure the layout is clear, professional, and easy to read on paper.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 33,
        "title": "Implement Data Independence System",
        "description": "Ensure prescription data independence from templates",
        "details": "Implement copy_from_drug_template method in PrescriptionItem model. Create copy_from_prescription_template method in OutpatientPrescription model. Ensure all template data is copied rather than referenced. Add tests to verify template modifications don't affect existing prescriptions.",
        "testStrategy": "Test data copying functionality, verify independence by modifying templates after prescription creation, confirm existing prescriptions remain unchanged",
        "priority": "high",
        "dependencies": [
          31
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement copy_from_drug_template method",
            "description": "Develop the copy_from_drug_template method to create a deep copy of the drug template data into the target object, ensuring no shared references remain.",
            "dependencies": [],
            "details": "Use Python's copy.deepcopy() to recursively copy all attributes and nested objects from the drug template to the current instance. This prevents side effects from shared mutable objects.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement copy_from_prescription_template method",
            "description": "Develop the copy_from_prescription_template method to create a deep copy of the prescription template data into the target object, ensuring complete data independence.",
            "dependencies": [
              1
            ],
            "details": "Similarly to the drug template copy, use copy.deepcopy() to recursively copy all relevant data from the prescription template to the current instance, avoiding shared references.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Ensure deep copy of data in both methods",
            "description": "Verify and enforce that both copy_from_drug_template and copy_from_prescription_template methods perform deep copies of all nested and mutable data structures.",
            "dependencies": [
              1,
              2
            ],
            "details": "Review the implementation to confirm that copy.deepcopy() is used appropriately on all nested objects and attributes, preventing any shallow copy or reference sharing issues.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Write tests for data independence",
            "description": "Create comprehensive unit tests to validate that the copied objects from both methods are fully independent and modifications to copies do not affect the originals.",
            "dependencies": [
              3
            ],
            "details": "Design tests that modify nested data in the copied objects and assert that the original templates remain unchanged, confirming deep copy behavior and data independence.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 34,
        "title": "Integrate Permission System",
        "description": "Apply EquipeMed permission system to all prescription views",
        "details": "Apply @patient_access_required decorator to patient-specific views. Add @can_edit_event_required and @can_delete_event_required decorators. Implement @doctor_required for template creation. Add hospital context integration. Test all permission scenarios.",
        "testStrategy": "Test all permission decorators work correctly, verify 24-hour edit window enforcement, test hospital context integration",
        "priority": "high",
        "dependencies": [
          32
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement patient_access_required decorator",
            "description": "Develop the patient_access_required decorator to restrict view access based on patient-related permissions, ensuring only authorized users can access patient data.",
            "dependencies": [],
            "details": "Create a decorator that checks if the requesting user has the necessary permissions to access patient information. This may involve checking user roles, group permissions, or specific user-patient relationships.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement can_edit_event_required and can_delete_event_required decorators",
            "description": "Create decorators to enforce permissions for editing and deleting events, ensuring only users with the appropriate rights can perform these actions.",
            "dependencies": [
              1
            ],
            "details": "Develop two separate decorators: one to check if the user can edit an event and another to check if the user can delete an event. These should verify user permissions or roles related to event management.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement doctor_required decorator",
            "description": "Develop a decorator to restrict access to views only to users with a doctor role or equivalent permissions.",
            "dependencies": [
              1
            ],
            "details": "This decorator should verify that the user has a doctor role, potentially using role-based access control mechanisms or group membership checks.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate hospital context into views",
            "description": "Incorporate hospital context into the views to ensure that permissions and data access are scoped appropriately to the hospital environment.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Modify views and decorators to include hospital context, which may involve passing hospital identifiers or objects and validating user permissions within that context.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test all permission scenarios comprehensively",
            "description": "Develop and execute tests covering all permission scenarios for the implemented decorators and hospital context integration to ensure correct access control.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Write unit and integration tests that simulate various user roles, permissions, and hospital contexts to verify that access is correctly granted or denied according to the decorators and context logic.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 35,
        "title": "Implement AJAX Drug Template Integration",
        "description": "Create AJAX endpoints for drug template selection and auto-population",
        "details": "Create AJAX view for drug template search and selection. Implement auto-population of prescription item fields when template is selected. Add JavaScript for seamless user experience. Create JSON endpoints for template data retrieval.",
        "testStrategy": "Test AJAX endpoints return correct data, verify auto-population functionality, test JavaScript integration and error handling",
        "priority": "medium",
        "dependencies": [
          33
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create AJAX Search Endpoint",
            "description": "Develop a backend REST API endpoint to handle AJAX search requests, process search terms, query the database, and return search results in JSON format.",
            "dependencies": [],
            "details": "Implement a REST API route (e.g., /search) that accepts GET or POST requests with a search parameter. Use backend logic to query relevant data (posts, pages, or custom post types) based on the search term and format the results for frontend consumption. Include error handling for no results found.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Auto-Population Logic",
            "description": "Develop the logic to dynamically generate search suggestions or results as the user types in the search input field.",
            "dependencies": [
              1
            ],
            "details": "Use the AJAX search endpoint to fetch matching results in real-time. Implement throttling or debouncing to optimize requests. Format and prepare the data to be displayed as suggestions or auto-complete options in the UI.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add JavaScript Integration",
            "description": "Integrate frontend JavaScript to connect the search input field with the AJAX endpoint and display auto-populated search results.",
            "dependencies": [
              2
            ],
            "details": "Write JavaScript code to listen for input events on the search box, send AJAX requests to the backend endpoint, receive JSON responses, and update the UI with search suggestions. Ensure smooth user experience and accessibility.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Handle Error Cases",
            "description": "Implement error handling for both backend and frontend to manage cases such as no search results, network errors, or invalid input.",
            "dependencies": [
              1,
              3
            ],
            "details": "On the backend, return appropriate error responses (e.g., WP_Error or HTTP error codes) when no results are found or input is invalid. On the frontend, detect these errors and display user-friendly messages or fallback UI states. Also handle network failures gracefully.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 36,
        "title": "Add Event Timeline Integration",
        "description": "Integrate prescriptions into patient event timeline",
        "details": "Create prescription event card template in events/partials/. Add prescription-specific timeline display. Implement event_type=11 handling in timeline views. Add prescription summary display in timeline cards.",
        "testStrategy": "Test prescription events appear in patient timeline, verify event card rendering, test timeline integration",
        "priority": "medium",
        "dependencies": [
          34
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Prescription Event Card Template",
            "description": "Design and develop a reusable UI template for displaying prescription event cards within the timeline. This template should visually represent prescription details clearly and be consistent with the overall UI style.",
            "dependencies": [],
            "details": "Focus on layout, styling, and placeholders for prescription data such as medication name, dosage, prescribing doctor, and date. Ensure the template is adaptable for different prescription event data.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Event_Type Handling in Timeline Views",
            "description": "Add logic to the timeline views to recognize and correctly render different event types, including the newly created prescription event cards.",
            "dependencies": [
              1
            ],
            "details": "Modify the timeline rendering engine to detect event_type for prescriptions and use the prescription event card template for display. Ensure seamless integration with existing event types and smooth UI updates.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Prescription Summary Display",
            "description": "Develop a summary display feature for prescriptions that aggregates key prescription information and presents it in a concise format within the timeline or a dedicated summary section.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implement summary logic to extract and show essential prescription details such as total medications prescribed, active prescriptions, and recent changes. Integrate this summary with the timeline views for enhanced user insight.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 37,
        "title": "Implement Comprehensive Testing Suite",
        "description": "Create complete test coverage for both apps",
        "details": "Create unit tests for all models, forms, and views. Add integration tests for complete workflows. Test permission scenarios and edge cases. Create test data factories. Add test cases for data independence. Achieve >90% test coverage.",
        "testStrategy": "Run test suite with coverage reporting, verify all critical paths tested, test edge cases and error conditions",
        "priority": "high",
        "dependencies": [
          36
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Unit Tests for Models",
            "description": "Develop unit tests to verify the correctness of model methods, field validations, and database interactions.",
            "dependencies": [],
            "details": "Write tests for model field constraints, custom methods, and string representations to ensure data integrity and expected behavior.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Develop Unit Tests for Forms",
            "description": "Implement unit tests to validate form input handling, field validations, and error messages.",
            "dependencies": [
              1
            ],
            "details": "Test form validation logic including required fields, custom validators, and form submission scenarios.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Write Unit Tests for Views",
            "description": "Create unit tests for view functions and class-based views to check response status, context data, and template rendering.",
            "dependencies": [
              1,
              2
            ],
            "details": "Use Django's RequestFactory or test client to simulate requests and verify view outputs and side effects.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Integration Tests for Workflows",
            "description": "Design integration tests that cover end-to-end workflows involving multiple components like models, views, and templates.",
            "dependencies": [
              3
            ],
            "details": "Test interactions between components to ensure they work together correctly, including database state changes and API responses.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create Permission Scenario Tests",
            "description": "Develop tests to verify access control and permission enforcement across different user roles and scenarios.",
            "dependencies": [
              3
            ],
            "details": "Simulate requests from users with varying permissions to ensure unauthorized access is properly restricted and authorized access is granted.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Set Up Test Data Factories and Coverage Reporting",
            "description": "Establish test data factories for reusable test data creation and configure coverage tools to measure test coverage.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "Use libraries like factory_boy to create test data efficiently and integrate coverage.py or similar tools to generate coverage reports.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 38,
        "title": "Optimize Performance and Add Caching",
        "description": "Implement performance optimizations and caching strategies",
        "details": "Add database indexes for common query patterns. Implement select_related and prefetch_related optimizations. Add caching for template lists and frequently accessed data. Optimize formset rendering. Add pagination optimizations.",
        "testStrategy": "Run performance tests, verify query optimization with Django Debug Toolbar, test caching functionality",
        "priority": "medium",
        "dependencies": [
          37
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze and Add Database Indexes",
            "description": "Profile the database queries to identify slow queries and determine which fields would benefit from indexing. Add appropriate indexes to frequently queried fields using Django's db_index attribute or Meta.indexes option.",
            "dependencies": [],
            "details": "Use profiling tools to find bottlenecks in database queries. Add single-column or composite indexes as needed, considering the trade-offs of index maintenance overhead. Implement indexes in Django models and migrate the database accordingly.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement select_related and prefetch_related Optimizations",
            "description": "Optimize ORM queries by using select_related for single-valued relationships and prefetch_related for many-valued relationships to reduce the number of database queries.",
            "dependencies": [
              1
            ],
            "details": "Review query patterns to identify where related objects are accessed. Replace multiple queries with select_related or prefetch_related to fetch related data in fewer queries, improving performance.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Caching for Frequent Queries",
            "description": "Implement caching mechanisms to store results of frequent and expensive queries to reduce database load and improve response times.",
            "dependencies": [
              2
            ],
            "details": "Identify queries that are executed frequently and have relatively static results. Use Django's caching framework or external caches like Redis or Memcached to cache querysets or serialized data.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Optimize Formset Rendering and Pagination",
            "description": "Improve the performance of formset rendering and pagination by minimizing database hits and optimizing template rendering.",
            "dependencies": [
              3
            ],
            "details": "Use pagination to limit the number of objects rendered at once. Optimize formset queries by using select_related/prefetch_related where applicable. Cache rendered pages or partials if possible to reduce repeated processing.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 39,
        "title": "Create Documentation and User Guide",
        "description": "Develop comprehensive documentation for both features",
        "details": "Create user documentation explaining drug template and prescription workflows. Add developer documentation with API references. Create deployment guide with configuration steps. Add troubleshooting section and FAQ.",
        "testStrategy": "Review documentation completeness, test all documented procedures, verify code examples work correctly",
        "priority": "low",
        "dependencies": [
          38
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create User Documentation Section",
            "description": "Develop clear, concise, and well-organized user documentation that explains how to use the software effectively, including examples and visuals to aid understanding.",
            "dependencies": [],
            "details": "Focus on clarity and simplicity, avoiding unnecessary jargon. Use headings, subheadings, bullet points, and images to enhance readability and comprehension. Ensure the documentation covers all key user features and workflows.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Develop Developer API References",
            "description": "Produce detailed API reference documentation for developers, including endpoint descriptions, parameters, request/response examples, and usage guidelines.",
            "dependencies": [],
            "details": "Ensure the API documentation is thorough and technically accurate. Use a consistent format and structure to improve navigation and usability. Include code snippets and examples to demonstrate API usage.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Write Deployment Guide",
            "description": "Create a comprehensive deployment guide that outlines the steps and requirements for installing and configuring the software in various environments.",
            "dependencies": [],
            "details": "Include prerequisites, installation instructions, configuration options, and troubleshooting tips related to deployment. Use clear, step-by-step instructions and visuals where appropriate.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Compile Troubleshooting and FAQ Section",
            "description": "Assemble a troubleshooting and FAQ section addressing common issues, errors, and questions users and developers might encounter.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Gather common problems and their solutions from user feedback and developer input. Organize the content logically with clear headings and concise answers. Update regularly based on new issues and queries.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 40,
        "title": "Final Integration Testing and Deployment Preparation",
        "description": "Perform final testing and prepare for deployment",
        "details": "Run complete integration test suite. Test cross-browser compatibility for print functionality. Verify all permission scenarios work correctly. Test data migration scripts. Create deployment checklist and rollback procedures. Prepare production configuration.",
        "testStrategy": "Execute full test suite, perform user acceptance testing, verify deployment checklist completeness, test rollback procedures",
        "priority": "high",
        "dependencies": [
          39
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Run Full Integration Tests",
            "description": "Execute comprehensive integration testing covering all critical integration points using a balanced approach such as incremental integration testing. Prioritize tests based on risk and functionality, use realistic test data, and automate tests where possible to ensure early detection of integration issues.",
            "dependencies": [],
            "details": "Plan and prioritize integration tests focusing on high-risk areas. Use realistic data sets that mimic production environments. Employ automation tools and integrate tests into the CI pipeline for continuous testing. Isolate modules for targeted testing and refine test cases regularly to adapt to new features.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Conduct Cross-Browser Print Testing",
            "description": "Verify that printing functionality works correctly across all supported browsers and platforms, ensuring consistent output and formatting.",
            "dependencies": [
              1
            ],
            "details": "Test print layouts and outputs on major browsers (e.g., Chrome, Firefox, Edge, Safari) and different operating systems. Identify and fix any discrepancies in print rendering, styles, or permissions that could affect user experience.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Verify Permissions and Access Controls",
            "description": "Test and validate user permissions and access controls to ensure security policies are correctly enforced across the application.",
            "dependencies": [
              1
            ],
            "details": "Perform role-based access testing to confirm that users can only access authorized features and data. Include negative testing to verify that unauthorized access is properly blocked. Automate permission tests where feasible to maintain coverage during ongoing development.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Test Data Migration Scripts",
            "description": "Validate the accuracy and integrity of data migration scripts by running them in a controlled environment and verifying the results.",
            "dependencies": [
              1
            ],
            "details": "Execute migration scripts on representative datasets and compare pre- and post-migration data for consistency. Check for data loss, corruption, or transformation errors. Include rollback testing to ensure migrations can be safely reversed if needed.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Prepare Deployment and Rollback Procedures",
            "description": "Develop and document detailed deployment and rollback plans to minimize risks during production release.",
            "dependencies": [
              1,
              4
            ],
            "details": "Create step-by-step deployment instructions including environment setup, configuration, and validation checks. Define rollback criteria and procedures to quickly restore previous stable states in case of failure. Test deployment and rollback processes in staging environments to ensure readiness.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-28T20:43:07.408Z",
      "updated": "2025-06-29T17:51:05.785Z",
      "description": "Tasks for master context"
    }
  }
}