(self.webpackChunkeqmd=self.webpackChunkeqmd||[]).push([[717],{92:()=>{window.VideoCompressionManager=class{constructor(){this.detector=null,this.worker=null,this.initialized=!1,this.capabilities=null,this.compressionInProgress=!1,this.currentCompression=null,this.config={maxCompressionTime:6e4,maxRetries:2,fallbackTimeout:5e3,workerPath:"/static/mediafiles/js/compression/workers/compression-worker.js"},this.onProgress=null,this.onComplete=null,this.onError=null,this.onFallback=null}async initialize(){if(this.initialized)return this.capabilities;try{return this.detector=new CompressionCapabilityDetector,this.capabilities=await this.detector.detectCapabilities(),this.capabilities.supported&&await this._initializeWorker(),this.initialized=!0,this.capabilities}catch(e){return console.warn("Compression manager initialization failed:",e),this.capabilities=this.detector?.getDefaultCapabilities()||this._getMinimalCapabilities(),this.initialized=!0,this.capabilities}}isAvailable(){return this.initialized&&this.capabilities?.supported}getCapabilities(){return this.capabilities}async compressVideo(e,i={}){if(!this.isAvailable())throw new Error("Compression not available on this device");if(this.compressionInProgress)throw new Error("Compression already in progress");const t=this._generateCompressionId();this.compressionInProgress=!0,this.currentCompression={id:t,file:e,options:i,startTime:Date.now(),retries:0};try{return await this._performCompression(e,i)}catch(e){console.error("Compression failed:",e);const i=await this._attemptRecovery(e);if(i)return i;throw this._triggerFallback(e),e}finally{this.compressionInProgress=!1,this.currentCompression=null}}cancelCompression(){this.compressionInProgress&&this.worker&&(this.worker.postMessage({type:"cancel"}),this.compressionInProgress=!1,this.currentCompression=null)}getAvailablePresets(){return this.capabilities?this.capabilities.recommendation.presets:[]}getRecommendedPreset(e,i=null){const t=this.getAvailablePresets();if(i&&t.includes(i))return i;const s=e.size/1048576,r=this.capabilities.score;return s>100&&r>=80?"medical-high":s>50&&r>=60?"standard-medical":"mobile-optimized"}estimateCompression(e,i=null){const t=i||this.getRecommendedPreset(e),s=e.size/1048576,r=this.capabilities.score,o={"medical-high":{timeMultiplier:1.5,sizeReduction:.3},"standard-medical":{timeMultiplier:1,sizeReduction:.5},"mobile-optimized":{timeMultiplier:.7,sizeReduction:.7}},a=o[t]||o["mobile-optimized"],n=2*s*a.timeMultiplier/(r/70),c=s,l=c*(1-a.sizeReduction);return{estimatedTime:Math.round(n),originalSize:c,compressedSize:l,sizeReduction:a.sizeReduction,preset:t}}async _initializeWorker(){return new Promise(((e,i)=>{try{this.worker=new Worker(this.config.workerPath),this.worker.onmessage=e=>{this._handleWorkerMessage(e)},this.worker.onerror=e=>{console.error("Worker error:",e),i(e)},this.worker.postMessage({type:"init"}),setTimeout((()=>e()),100)}catch(e){i(e)}}))}async _performCompression(e,i){return new Promise(((t,s)=>{const r=setTimeout((()=>{s(new Error("Compression timeout"))}),this.config.maxCompressionTime),o={progress:e=>{this.onProgress&&this.onProgress(e)},complete:e=>{clearTimeout(r),this.onComplete&&this.onComplete(e),t(e.compressedFile)},error:e=>{clearTimeout(r),this.onError&&this.onError(e),s(new Error(e.message))}};this._compressionHandlers=o,this.worker.postMessage({type:"compress",file:e,options:{preset:this.getRecommendedPreset(e,i.preset),maxOutputSize:i.maxOutputSize||.8*e.size,...i}})}))}_handleWorkerMessage(e){const{type:i,data:t}=e.data;if(this._compressionHandlers)switch(i){case"progress":this._compressionHandlers.progress(t);break;case"complete":this._compressionHandlers.complete(t);break;case"error":this._compressionHandlers.error(t)}}async _attemptRecovery(e){if(!this.currentCompression||this.currentCompression.retries>=this.config.maxRetries)return null;console.log(`Attempting compression recovery (attempt ${this.currentCompression.retries+1})`),this.currentCompression.retries++;try{const e={...this.currentCompression.options,preset:"mobile-optimized",maxOutputSize:.9*this.currentCompression.file.size};return await this._performCompression(this.currentCompression.file,e)}catch(e){return console.warn("Recovery attempt failed:",e),null}}_triggerFallback(e){this.onFallback&&this.onFallback({reason:e.message,originalFile:this.currentCompression?.file,recommendedAction:"proceed-with-direct-upload"})}_generateCompressionId(){return"compression_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}_getMinimalCapabilities(){return{supported:!1,score:0,recommendation:{level:"not-recommended",message:"Compression not available",presets:[]}}}destroy(){this.worker&&(this.worker.terminate(),this.worker=null),this.initialized=!1,this.capabilities=null,this.compressionInProgress=!1,this.currentCompression=null}getStats(){return{initialized:this.initialized,supported:this.isAvailable(),capabilities:this.capabilities,inProgress:this.compressionInProgress,currentCompression:this.currentCompression?{id:this.currentCompression.id,duration:Date.now()-this.currentCompression.startTime,retries:this.currentCompression.retries}:null}}}},225:()=>{window.CompressionCapabilityDetector=class{constructor(){this.capabilities=null,this.detectionPromise=null}async detectCapabilities(){return this.detectionPromise||(this.detectionPromise=this._performDetection()),this.detectionPromise}async _performDetection(){try{const e={webAssembly:this._checkWebAssemblySupport(),webWorkers:this._checkWebWorkersSupport(),sharedArrayBuffer:this._checkSharedArrayBufferSupport(),memory:await this._estimateAvailableMemory(),cpuCores:this._getCPUCoreCount(),deviceClass:this._classifyDevice(),networkCondition:await this._assessNetworkCondition(),browserCompatibility:this._checkBrowserCompatibility()},i=this._calculateCapabilityScore(e);return this.capabilities={...e,score:i,supported:i>=60,recommendation:this._getRecommendation(i,e)},this.capabilities}catch(e){return console.warn("Compression capability detection failed:",e),this._getDefaultCapabilities()}}_checkWebAssemblySupport(){try{if("object"==typeof WebAssembly&&"function"==typeof WebAssembly.instantiate){const e=new Uint8Array([0,97,115,109,1,0,0,0]);return WebAssembly.validate(e)}return!1}catch(e){return!1}}_checkWebWorkersSupport(){return"undefined"!=typeof Worker}_checkSharedArrayBufferSupport(){return"undefined"!=typeof SharedArrayBuffer}async _estimateAvailableMemory(){try{if("memory"in performance){const e=performance.memory;return{total:e.jsHeapSizeLimit,used:e.usedJSHeapSize,available:e.jsHeapSizeLimit-e.usedJSHeapSize,sufficient:e.jsHeapSizeLimit>=2147483648}}return this._estimateMemoryFromDevice()}catch(e){return this._estimateMemoryFromDevice()}}_estimateMemoryFromDevice(){const e=navigator.userAgent.toLowerCase();let i=4;/iphone|ipad/.test(e)?i=/iphone.*1[4-9]|ipad.*1[0-9]/.test(e)?6:/iphone.*1[2-3]|ipad.*[8-9]/.test(e)?4:2:/android/.test(e)&&(i=4);const t=1024*i*1024*1024;return{total:t,used:.5*t,available:.5*t,sufficient:i>=2}}_getCPUCoreCount(){return navigator.hardwareConcurrency||4}_classifyDevice(){const e=navigator.userAgent.toLowerCase(),i=this._getCPUCoreCount();return this._isHighEndDevice(e)?{class:"high-end",score:90}:i>=4?{class:"mid-range",score:70}:{class:"low-end",score:30}}_isHighEndDevice(e){return!!/iphone.*1[4-9]/.test(e)||!!/sm-s9[0-9]|sm-s2[0-9]/.test(e)||!!/pixel.*[6-9]/.test(e)}async _assessNetworkCondition(){try{const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return e?{effectiveType:e.effectiveType,downlink:e.downlink,rtt:e.rtt,saveData:e.saveData,suitable:this._isNetworkSuitableForCompression(e)}:await this._performSimpleSpeedTest()}catch(e){return{effectiveType:"unknown",suitable:!0}}}_isNetworkSuitableForCompression(e){return!!e.saveData||"slow-2g"===e.effectiveType||"2g"===e.effectiveType||"3g"===e.effectiveType&&e.downlink<1.5}async _performSimpleSpeedTest(){const e=performance.now();try{await fetch("/static/mediafiles/images/favicon.ico?"+Date.now(),{method:"HEAD",cache:"no-cache"});const i=performance.now()-e;return{effectiveType:i>500?"slow":"fast",pingTime:i,suitable:i>200}}catch(e){return{effectiveType:"unknown",suitable:!0}}}_checkBrowserCompatibility(){const e=navigator.userAgent.toLowerCase(),i=[];return/safari/.test(e)&&/version\/1[2-4]/.test(e)&&i.push("ios-safari-wasm-issues"),/chrome\/[1-7][0-9]/.test(e)&&i.push("old-chrome-wasm-support"),{compatible:0===i.length,issues:i,score:0===i.length?100:Math.max(0,100-25*i.length)}}_calculateCapabilityScore(e){let i=0,t=0;return e.webAssembly&&(i+=30),t+=30,e.webWorkers&&(i+=20),t+=20,e.memory.sufficient&&(i+=20),t+=20,i+=.15*e.deviceClass.score,t+=15,i+=.1*e.browserCompatibility.score,t+=10,e.sharedArrayBuffer&&(i+=5),t+=5,Math.round(i/100*100)}_getRecommendation(e,i){return e>=80?{level:"recommended",message:"Device well-suited for video compression",presets:["medical-high","standard-medical","mobile-optimized"]}:e>=60?{level:"conditional",message:"Compression available with conservative settings",presets:["standard-medical","mobile-optimized"]}:{level:"not-recommended",message:"Direct upload recommended for optimal experience",presets:[]}}_getDefaultCapabilities(){return{webAssembly:!1,webWorkers:!1,sharedArrayBuffer:!1,memory:{sufficient:!1},cpuCores:2,deviceClass:{class:"low-end",score:30},networkCondition:{effectiveType:"unknown",suitable:!1},browserCompatibility:{compatible:!1,issues:["detection-failed"]},score:0,supported:!1,recommendation:{level:"not-recommended",message:"Compression not available due to capability detection failure",presets:[]}}}getCapabilities(){return this.capabilities}isSupported(){return this.capabilities?.supported||!1}getRecommendedPresets(){return this.capabilities?.recommendation?.presets||[]}}},774:()=>{window.MedicalQualityValidator=class{constructor(){this.thresholds={maxSizeReduction:.7,minQualityScore:.3,maxBitrateVariation:.2}}async validateCompressedVideo(e,i,t){const s={passed:!0,warnings:[],errors:[],metrics:{},recommendations:[]};try{const r=this._validateSizeReduction(e,i);s.metrics.sizeReduction=r.reduction,r.excessive&&s.warnings.push({type:"excessive_compression",message:`Compression reduced file size by ${(100*r.reduction).toFixed(1)}%. This may affect diagnostic quality.`,recommendation:"Consider using a higher quality preset for diagnostic content."});const o=this._assessPresetQuality(t,e.size);s.metrics.qualityAssessment=o,o.diagnostic&&o.score<.8&&s.warnings.push({type:"quality_concern",message:"Current settings may not preserve diagnostic quality.",recommendation:"Consider medical-high preset for diagnostic content."});const a=this._checkMedicalCompliance(t,e,i);s.metrics.compliance=a,a.hipaaCompliant||(s.errors.push({type:"compliance_violation",message:"Compression settings may not meet medical privacy requirements.",recommendation:"Ensure metadata stripping is enabled."}),s.passed=!1),s.recommendations=this._generateRecommendations(s)}catch(e){s.errors.push({type:"validation_error",message:`Quality validation failed: ${e.message}`,recommendation:"Proceed with caution or use direct upload."}),s.passed=!1}return s}getPresetQualityScore(e){return{"medical-high":.95,"standard-medical":.8,"mobile-optimized":.65}[e]||.5}isPresetDiagnosticSafe(e){return["medical-high"].includes(e)}getRecommendedPresetForMedicalContent(e,i,t){const s=i/1048576,r=t?.score||50;switch(e){case"diagnostic":return r>=80?"medical-high":"standard-medical";case"documentation":return s>50&&r>=70?"standard-medical":"mobile-optimized";case"consultation":case"emergency":return"mobile-optimized";default:return r>=60?"standard-medical":"mobile-optimized"}}_validateSizeReduction(e,i){const t=1-i.size/e.size;return{reduction:t,excessive:t>this.thresholds.maxSizeReduction,originalSize:e.size,compressedSize:i.size}}_assessPresetQuality(e,i){const t=this.getPresetQualityScore(e);return{preset:e,score:t,diagnostic:this.isPresetDiagnosticSafe(e),suitable:t>=this.thresholds.minQualityScore,originalFileSize:i}}_checkMedicalCompliance(e,i,t){const s={hipaaCompliant:!0,metadataStripped:!0,auditTrail:!0,reasonableQuality:this.getPresetQualityScore(e)>=.6};return 1-t.size/i.size>.8&&(s.reasonableQuality=!1,s.hipaaCompliant=!1),s}_generateRecommendations(e){const i=[];return e.metrics.sizeReduction>.6&&i.push("Consider using a higher quality preset to preserve medical detail."),e.metrics.qualityAssessment&&!e.metrics.qualityAssessment.diagnostic&&i.push("For diagnostic content, use medical-high preset when possible."),e.warnings.length>0&&i.push("Review quality warnings before proceeding with compressed file."),0===e.errors.length&&0===e.warnings.length&&i.push("Compression settings are appropriate for medical use."),i}},window.MedicalPresetManager=class{constructor(){this.presets={"medical-high":{name:"Medical High Quality (Diagnostic)",description:"Visually lossless compression for diagnostic content",crf:18,maxBitrate:"8M",bufsize:"16M",preset:"medium",profile:"high",level:"4.0",pixelFormat:"yuv420p",medicalSettings:{preserveMetadata:["creation_time","timecode"],colorSpace:"bt709",diagnosticSafe:!0,maxSizeReduction:.3}},"standard-medical":{name:"Standard Medical (Documentation)",description:"High quality for general medical documentation",crf:23,maxBitrate:"4M",bufsize:"8M",preset:"medium",profile:"main",level:"3.1",pixelFormat:"yuv420p",medicalSettings:{preserveMetadata:["creation_time"],colorSpace:"bt709",diagnosticSafe:!1,maxSizeReduction:.5}},"mobile-optimized":{name:"Mobile Optimized (Quick Sharing)",description:"Optimized for mobile upload and sharing",crf:28,maxBitrate:"2M",bufsize:"4M",preset:"fast",profile:"baseline",level:"3.0",pixelFormat:"yuv420p",medicalSettings:{preserveMetadata:[],colorSpace:"bt709",diagnosticSafe:!1,maxSizeReduction:.7}}}}getPreset(e){return this.presets[e]||null}getAllPresets(){return Object.keys(this.presets).map((e=>({key:e,...this.presets[e]})))}getPresetsForDevice(e){const i=e?.score||0,t=[];return i>=80&&t.push("medical-high"),i>=60&&t.push("standard-medical"),i>=30&&t.push("mobile-optimized"),t.map((e=>({key:e,...this.presets[e]})))}validatePresetForMedicalUse(e,i="documentation"){const t=this.getPreset(e);if(!t)return{valid:!1,reason:"Preset not found"};const s={valid:!0,warnings:[]};return"diagnostic"!==i||t.medicalSettings.diagnosticSafe||s.warnings.push("This preset may not preserve diagnostic quality"),t.medicalSettings.maxSizeReduction>.6&&s.warnings.push("High compression ratio may affect medical content quality"),s}getFFmpegArgs(e,i,t){const s=this.getPreset(e);if(!s)throw new Error(`Unknown preset: ${e}`);const r=["-i",i,"-c:v","libx264","-preset",s.preset,"-crf",s.crf.toString(),"-maxrate",s.maxBitrate,"-bufsize",s.bufsize,"-profile:v",s.profile,"-level",s.level,"-pix_fmt",s.pixelFormat,"-movflags","+faststart"];return r.push("-colorspace","bt709"),r.push("-color_primaries","bt709"),r.push("-color_trc","bt709"),s.medicalSettings.preserveMetadata.length>0?s.medicalSettings.preserveMetadata.forEach((e=>{r.push("-map_metadata","0"),r.push("-metadata:g",`${e}=${e}`)})):r.push("-map_metadata","-1"),r.push(t),r}}}}]);