(()=>{console.log("VideoClip Compression Bundle loading...");class e{constructor(){this.flags=new Map,this.emergencyBypass=!1}async updateFlags(){Object.entries({compression_enabled:!0,advanced_compression:!1,mobile_compression_optimized:!0}).forEach((([e,o])=>{this.flags.set(e,o)}))}isEnabled(e,o={}){return!this.emergencyBypass&&(this.flags.get(e)||!1)}emergencyDisable(e){console.warn("Emergency bypass activated:",e),this.emergencyBypass=!0}getDebugInfo(){return{flags:Object.fromEntries(this.flags),emergencyBypass:this.emergencyBypass}}}class o{constructor(){this.compressions=new Map,this.stats={total:0,successful:0,failed:0,totalBytes:0,compressedBytes:0}}startCompressionTracking(e,o){this.compressions.set(e,{...o,startTime:Date.now(),stage:"starting"}),this.stats.total++}updateCompressionStage(e,o,s,t={}){const i=this.compressions.get(e);i&&(i.stage=o,i.progress=s,i.lastUpdate=Date.now())}completeCompressionTracking(e,o){this.compressions.get(e)&&(o.success?(this.stats.successful++,this.stats.totalBytes+=o.originalSize||0,this.stats.compressedBytes+=o.compressedSize||0):this.stats.failed++,this.compressions.delete(e))}trackEvent(e,o){console.log("Monitoring event:",e,o)}trackCompressionError(e,o,s){console.error("Compression error tracked:",{id:e,error:o,context:s})}trackErrorRecovery(e,o){console.log("Error recovery tracked:",{id:e,recovery:o})}getStatistics(){return{...this.stats}}}class s{constructor(){this.emergencyBypass=!1,this.medicalContext=null,this.errorStats={total:0,recovered:0,bypassed:0}}setMedicalContext(e){this.medicalContext=e}shouldSkipCompression(){return this.emergencyBypass}async handleError(e,o){return this.errorStats.total++,e.message.includes("timeout")?{success:!0,modifications:{timeout:6e4},fallback:!1}:{success:!1,fallback:!0}}activateEmergencyBypass(e){this.emergencyBypass=!0,this.errorStats.bypassed++,console.warn("Emergency bypass activated:",e)}getErrorStats(){return{...this.errorStats}}}class t{constructor(){this.compressions=new Map,this.isMobileDevice=this.detectMobileDevice(),this.stats={averageDuration:0,totalCompressions:0}}detectMobileDevice(){return/Mobi|Android/i.test(navigator.userAgent)}startCompressionTracking(e,o){this.compressions.set(e,{...o,startTime:performance.now()})}updateCompressionStage(e,o,s,t={}){const i=this.compressions.get(e);i&&(i.currentStage=o,i.progress=s)}completeCompressionTracking(e,o){const s=this.compressions.get(e);if(s){const o=performance.now()-s.startTime;this.updateAverageStats(o),this.compressions.delete(e)}}updateAverageStats(e){this.stats.totalCompressions++,this.stats.averageDuration=(this.stats.averageDuration*(this.stats.totalCompressions-1)+e)/this.stats.totalCompressions}shouldAllowCompressionOnMobile(){return{allowed:!0,warning:this.isMobileDevice?"Compression may be slower on mobile":null}}getMobileOptimizedSettings(){return this.isMobileDevice?{quality:"mobile-optimized",maxDuration:3e4,chunkSize:16777216}:null}getCompressionStats(){return{...this.stats}}}class i{constructor(){this.loadedModules=new Set}async loadForUseCase(e){return[!0]}async preloadCriticalModules(){return!0}}class n{constructor(e,o={}){this.container=e,this.options=o,this.enabled=!1,this.preset="medical-standard",this.init()}init(){this.render(),this.setupEventHandlers()}render(){this.container.innerHTML='\n            <div class="compression-controls mb-3">\n                <div class="card">\n                    <div class="card-header">\n                        <h6 class="mb-0">\n                            <i class="bi bi-film"></i>\n                            Configurações de Compressão\n                        </h6>\n                    </div>\n                    <div class="card-body">\n                        <div class="form-check mb-2">\n                            <input class="form-check-input" type="checkbox" id="enableCompression">\n                            <label class="form-check-label" for="enableCompression">\n                                Ativar compressão de vídeo\n                            </label>\n                        </div>\n                        <div class="compression-options" style="display: none;">\n                            <div class="mb-2">\n                                <label for="compressionPreset" class="form-label">Preset:</label>\n                                <select class="form-select form-select-sm" id="compressionPreset">\n                                    <option value="medical-standard">Padrão Médico</option>\n                                    <option value="mobile-fast">Rápido (Mobile)</option>\n                                    <option value="mobile-optimized">Otimizado (Mobile)</option>\n                                </select>\n                            </div>\n                            <div class="compression-progress" style="display: none;">\n                                <div class="progress mb-2">\n                                    <div class="progress-bar" role="progressbar" style="width: 0%"></div>\n                                </div>\n                                <small class="text-muted compression-status">Preparando...</small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        '}setupEventHandlers(){const e=this.container.querySelector("#enableCompression"),o=this.container.querySelector("#compressionPreset"),s=this.container.querySelector(".compression-options");e.addEventListener("change",(e=>{this.enabled=e.target.checked,s.style.display=this.enabled?"block":"none",this.dispatchEvent(this.enabled?"compressionEnabled":"compressionDisabled",{preset:this.preset})})),o.addEventListener("change",(e=>{this.preset=e.target.value,this.dispatchEvent("presetSelected",{preset:this.preset})}))}updateProgress(e,o,s){const t=this.container.querySelector(".progress-bar"),i=this.container.querySelector(".compression-status"),n=this.container.querySelector(".compression-progress");n&&(n.style.display="block"),t&&(t.style.width=o+"%"),i&&(i.textContent=`${e}... ${Math.round(o)}%`)}completeCompression(e){const o=this.container.querySelector(".compression-status");o&&(o.textContent="Compressão concluída!"),setTimeout((()=>{const e=this.container.querySelector(".compression-progress");e&&(e.style.display="none")}),2e3)}handleCompressionError(e){console.error("[COMPRESSION UI] Handling compression error:",{error:e,errorMessage:e.message,errorStack:e.stack});const o=this.container.querySelector(".compression-status");o&&(o.textContent=`Erro na compressão: ${e.message}`,o.classList.add("text-danger")),setTimeout((()=>{const e=this.container.querySelector(".compression-progress");e&&(e.style.display="none"),o&&(o.textContent="Usando arquivo original",o.classList.remove("text-danger"),o.classList.add("text-warning"))}),5e3)}dispatchEvent(e,o){const s=new CustomEvent(`compression:${e}`,{detail:o});this.container.dispatchEvent(s)}}class r{constructor(e={}){this.options={enableFeatureFlags:!0,enableMonitoring:!0,enableLazyLoading:!0,medicalContext:null,...e},this.initialized=!1,this.components={},this.activeCompressions=new Map}async init(){try{console.log("Initializing Phase 3 Video Compression System..."),this.components.featureFlags=new e,this.components.monitoring=new o,this.components.errorHandler=new s,this.components.performanceMonitor=new t,this.components.lazyLoader=new i,await this.components.featureFlags.updateFlags(),this.initialized=!0,console.log("Phase 3 Video Compression System initialized successfully")}catch(e){console.error("Failed to initialize Phase 3 compression:",e),this.initialized=!1}}async checkCompressionAvailability(e,o={}){console.log("[COMPRESSION DEBUG] Checking compression availability for file:",{name:e.name,type:e.type,size:e.size,sizeFormatted:this.formatFileSize(e.size),options:o});const s={available:!1,recommended:!1,reason:"",settings:null};if(!this.initialized)return s.reason="System not initialized",console.error("[COMPRESSION DEBUG] System not initialized"),s;const t=this.isValidCompressionFile(e);return console.log("[COMPRESSION DEBUG] File validation result:",t),t?(s.settings=this.getOptimizedSettings(e,o),s.recommended=this.isCompressionRecommended(e,s.settings),s.available=!0,s.reason="Compression available",console.log("[COMPRESSION DEBUG] Compression availability check passed:",{available:s.available,recommended:s.recommended,settings:s.settings}),s):(s.reason="File not suitable for compression",console.error("[COMPRESSION DEBUG] File validation failed:",{fileType:e.type,fileSize:e.size,validTypes:["video/mp4","video/avi","video/mov","video/webm"],minSize:1048576,maxSize:2147483648}),s)}async compressVideo(e,o={}){const s=this.generateCompressionId();console.log("[COMPRESSION DEBUG] Starting compression process:",{compressionId:s,fileName:e.name,fileType:e.type,fileSize:e.size,sizeFormatted:this.formatFileSize(e.size),preset:o.preset,options:o});try{console.log("[COMPRESSION DEBUG] Checking availability...");const t=await this.checkCompressionAvailability(e,o);if(!t.available){const e=`Compression not available: ${t.reason}`;throw console.error("[COMPRESSION DEBUG] Availability check failed:",{reason:t.reason,availability:t}),new Error(e)}console.log("[COMPRESSION DEBUG] Starting compression tracking..."),this.components.monitoring.startCompressionTracking(s,{fileSize:e.size,fileName:e.name,preset:o.preset}),this.activeCompressions.set(s,{file:e,options:o,startTime:Date.now(),status:"starting"}),console.log("[COMPRESSION DEBUG] Performing compression...");const i=await this.performMockCompression(s,e,o);return console.log("[COMPRESSION DEBUG] Compression completed successfully:",{compressionId:s,originalSize:i.originalSize,compressedSize:i.compressedSize,compressionRatio:i.compressionRatio,duration:i.duration}),this.components.monitoring.completeCompressionTracking(s,i),this.activeCompressions.delete(s),{success:!0,compressionId:s,...i}}catch(o){return console.error("[COMPRESSION DEBUG] Compression failed with error:",{compressionId:s,error:o,errorMessage:o.message,errorStack:o.stack,fileName:e.name,fileType:e.type,fileSize:e.size}),this.components.monitoring.completeCompressionTracking(s,{success:!1,error:o.message}),this.activeCompressions.delete(s),{success:!1,compressionId:s,error:o.message,fallback:!0}}}async performMockCompression(e,o,s){console.log("[COMPRESSION DEBUG] Starting mock compression stages for:",e);const t=["initializing","loading","processing","finalizing"];try{for(let o=0;o<t.length;o++){const s=o/t.length*100;console.log(`[COMPRESSION DEBUG] Stage ${o+1}/${t.length}: ${t[o]} (${Math.round(s)}%)`),this.updateCompressionStage(e,t[o],s),await new Promise((e=>setTimeout(e,500)))}const s=Math.floor(.7*o.size),i=1-s/o.size,n=Date.now()-this.activeCompressions.get(e).startTime;return console.log("[COMPRESSION DEBUG] Mock compression completed:",{compressionId:e,originalSize:o.size,compressedSize:s,compressionRatio:i,duration:n}),{success:!0,compressedFile:o,originalSize:o.size,compressedSize:s,compressionRatio:i,duration:n}}catch(o){throw console.error("[COMPRESSION DEBUG] Mock compression failed:",{compressionId:e,error:o,errorMessage:o.message}),o}}updateCompressionStage(e,o,s,t={}){const i=this.activeCompressions.get(e);i&&(i.status=o,i.progress=s),this.components.monitoring.updateCompressionStage(e,o,s,t),this.components.performanceMonitor.updateCompressionStage(e,o,s,t);const n=this.activeCompressions.get(e);n&&n.options.onProgress&&n.options.onProgress({stage:o,progress:s,eta:null})}getOptimizedSettings(e,o){return{preset:o.preset||"medical-standard",quality:o.quality||"balanced",maxDuration:6e4,chunkSize:33554432}}isCompressionRecommended(e,o){return e.size>52428800}isValidCompressionFile(e){return["video/mp4","video/avi","video/quicktime","video/webm"].includes(e.type)&&e.size>=1048576&&e.size<=2147483648}generateCompressionId(){return`compression_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}formatFileSize(e){if(0===e)return"0 Bytes";const o=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,o)).toFixed(2))+" "+["Bytes","KB","MB","GB"][o]}}!function(){"use strict";console.log("VideoClip Compression IIFE executing...");const e={maxVideoDuration:120,maxVideoSize:52428800,allowedVideoTypes:["video/mp4","video/webm","video/quicktime"],allowedVideoExtensions:[".mp4",".webm",".mov"],previewMaxWidth:800,previewMaxHeight:600},o=window.MediaFiles?window.MediaFiles.utils:{formatFileSize:function(e){if(0===e)return"0 Bytes";const o=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,o)).toFixed(2))+" "+["Bytes","KB","MB","GB"][o]},getFileExtension:function(e){return e.slice((e.lastIndexOf(".")-1>>>0)+2).toLowerCase()},showToast:function(e,o="info"){console.log(`Toast: ${e} (${o})`),window.bootstrap&&window.bootstrap.Toast||alert(e)},formatDuration:function(e){return`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`}},s={compressionManager:null,compressionControls:null,compressionEnabled:!1,compressionPreset:"medical-standard",emergencyMode:!1,init:function(){console.log("Initializing VideoClip upload functionality..."),this.setupDragAndDrop(),this.setupFileInputs(),this.setupPreviewControls(),this.initCompression()},setupDragAndDrop:function(){document.querySelectorAll(".video-upload-form, #uploadArea").forEach((e=>{e.addEventListener("dragover",this.handleDragOver.bind(this)),e.addEventListener("dragleave",this.handleDragLeave.bind(this)),e.addEventListener("drop",this.handleDrop.bind(this))}))},setupFileInputs:function(){document.querySelectorAll('input[type="file"][accept*="video"]').forEach((e=>{e.addEventListener("change",this.handleFileSelect.bind(this))}));const e=document.getElementById("uploadArea");e&&e.addEventListener("click",(function(){const o=e.querySelector('input[type="file"]');o&&o.click()}))},setupPreviewControls:function(){const e=document.querySelectorAll("#removeVideo, .video-preview-remove"),o=document.querySelectorAll(".video-preview-change");e.forEach((e=>{e.addEventListener("click",this.removePreview.bind(this))})),o.forEach((e=>{e.addEventListener("click",this.changeVideo.bind(this))}))},handleDragOver:function(e){e.preventDefault(),e.currentTarget.classList.add("dragover")},handleDragLeave:function(e){e.preventDefault(),e.currentTarget.classList.remove("dragover")},handleDrop:function(e){e.preventDefault(),e.currentTarget.classList.remove("dragover");const o=e.dataTransfer.files;if(o.length>0){const s=e.currentTarget.querySelector('input[type="file"]');s&&(s.files=o,this.handleFileSelect({target:s}))}},handleFileSelect:function(e){const o=e.target.files[0];o&&(this.validateVideo(o)?(this.showUploadProgress(),this.compressionManager?this.processVideoWithCompression(o,e.target):this.processVideo(o,e.target)):e.target.value="")},validateVideo:function(s){if(!e.allowedVideoTypes.includes(s.type))return o.showToast("Tipo de arquivo não permitido. Use MP4, WebM ou MOV.","danger"),!1;const t="."+o.getFileExtension(s.name);if(!e.allowedVideoExtensions.includes(t))return o.showToast("Extensão de arquivo não permitida.","danger"),!1;if(s.size>e.maxVideoSize){const s=e.maxVideoSize/1048576;return o.showToast(`Arquivo muito grande. Máximo: ${s}MB`,"danger"),!1}return!0},processVideo:function(s,t){const i=document.createElement("video");i.preload="metadata",i.onloadedmetadata=()=>{if(i.duration>e.maxVideoDuration){const s=o.formatDuration(e.maxVideoDuration);return o.showToast(`Vídeo muito longo. Máximo: ${s}`,"danger"),t.value="",void this.hideUploadProgress()}this.showVideoPreview(URL.createObjectURL(s),s,i.duration),this.hideUploadProgress(),o.showToast("Vídeo carregado com sucesso!","success")},i.onerror=()=>{o.showToast("Erro ao carregar o vídeo.","danger"),t.value="",this.hideUploadProgress()},i.src=URL.createObjectURL(s)},showVideoPreview:function(e,o,s){const t=document.getElementById("videoPreview"),i=document.getElementById("uploadArea");if(!t)return;const n=t.querySelector("#previewVideo");n&&(n.src=e),this.updateVideoMetadata(o,s),t.style.display="block",i&&(i.style.display="none")},showCompressedVideoPreview:function(e){console.log("[UPLOAD DEBUG] Loading compressed video metadata..."),console.log("[FRONTEND SIZE] Compressed file size:",{size:e.size,sizeFormatted:o.formatFileSize(e.size),fileName:e.name,type:e.type});const s=document.createElement("video");s.preload="metadata",s.onloadedmetadata=()=>{console.log("[UPLOAD DEBUG] Compressed video metadata loaded, duration:",s.duration),console.log("[FRONTEND SIZE] Final compressed video ready for upload:",{fileName:e.name,fileSize:e.size,sizeFormatted:o.formatFileSize(e.size),duration:s.duration,type:e.type}),this.showVideoPreview(URL.createObjectURL(e),e,s.duration),this.hideUploadProgress(),o.showToast("Vídeo comprimido e carregado com sucesso!","success")},s.onerror=()=>{console.error("[UPLOAD DEBUG] Failed to load compressed video metadata"),o.showToast("Erro ao carregar o vídeo comprimido.","danger"),this.hideUploadProgress()},s.src=URL.createObjectURL(e)},updateVideoMetadata:function(e,s){const t={fileName:document.getElementById("fileName"),fileSize:document.getElementById("fileSize"),videoDuration:document.getElementById("videoDuration"),fileType:document.getElementById("fileType")};if(t.fileName&&(t.fileName.textContent=e.name),t.fileSize&&(t.fileSize.textContent=o.formatFileSize(e.size)),t.videoDuration){const e=function(e){return`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`};t.videoDuration.textContent=e(s)}t.fileType&&(t.fileType.textContent=e.type)},removePreview:function(e){e.preventDefault();const o=document.getElementById("videoPreview"),s=document.getElementById("uploadArea"),t=document.querySelector('input[type="file"][accept*="video"]');t&&(t.value=""),o&&(o.style.display="none"),s&&(s.style.display="block"),document.querySelectorAll(".media-error").forEach((e=>e.remove()))},changeVideo:function(e){e.preventDefault();const o=document.querySelector('input[type="file"][accept*="video"]');o&&o.click()},showUploadProgress:function(){const e=document.getElementById("uploadProgress");if(e){e.style.display="block";const o=e.querySelector("#progressBar");if(o){let e=0;const s=setInterval((()=>{e+=20*Math.random(),e>=100&&(e=100,clearInterval(s)),o.style.width=e+"%"}),200)}}},hideUploadProgress:function(){const e=document.getElementById("uploadProgress");e&&(e.style.display="none")},initCompression:function(){try{console.log("Initializing compression manager..."),this.compressionManager=new r({enableFeatureFlags:!0,enableMonitoring:!0,enableLazyLoading:!0}),this.compressionManager.init().then((()=>{console.log("Compression manager initialized successfully"),this.setupCompressionControls()})).catch((e=>{console.warn("Compression not available:",e),this.setupFallbackUpload()}))}catch(e){console.warn("Failed to initialize compression manager:",e),this.setupFallbackUpload()}},setupCompressionControls:function(){const e=document.getElementById("uploadArea");if(e)try{const o=document.createElement("div");o.className="compression-controls-container",o.id="compressionControlsContainer",e.parentNode.insertBefore(o,e),this.compressionControls=new n(o,{medicalContext:this.getMedicalContext()}),this.setupCompressionEventHandlers(),console.log("Compression controls initialized successfully")}catch(e){console.warn("Failed to setup compression controls:",e),this.setupFallbackUpload()}},setupCompressionEventHandlers:function(){const e=document.getElementById("compressionControlsContainer");e&&(e.addEventListener("compression:compressionEnabled",(e=>{console.log("[UPLOAD DEBUG] Compression enabled by user:",e.detail),this.compressionEnabled=!0,this.compressionPreset=e.detail.preset})),e.addEventListener("compression:compressionDisabled",(()=>{console.log("[UPLOAD DEBUG] Compression disabled by user"),this.compressionEnabled=!1})),e.addEventListener("compression:presetSelected",(e=>{console.log("[UPLOAD DEBUG] Compression preset selected:",e.detail),this.compressionPreset=e.detail.preset})))},processVideoWithCompression:async function(e,s){if(console.log("[UPLOAD DEBUG] Processing video with compression:",{compressionEnabled:this.compressionEnabled,emergencyMode:this.emergencyMode,fileName:e.name,fileType:e.type,fileSize:e.size,preset:this.compressionPreset}),!this.compressionEnabled||this.emergencyMode)return console.log("[UPLOAD DEBUG] Compression disabled or emergency mode, using standard upload"),this.processVideo(e,s);try{console.log("[UPLOAD DEBUG] Checking compression availability...");const t=await this.compressionManager.checkCompressionAvailability(e,{preset:this.compressionPreset});if(console.log("[UPLOAD DEBUG] Availability check result:",t),!t.available)return console.warn("[UPLOAD DEBUG] Compression not available:",t.reason),this.processVideo(e,s);console.log("[UPLOAD DEBUG] Starting compression process...");const i=await this.compressVideoFile(e);console.log("[UPLOAD DEBUG] Compression result:",{success:i.success,error:i.error,compressionId:i.compressionId}),i.success?(console.log("[UPLOAD DEBUG] Compression successful, showing preview"),console.log("[FRONTEND SIZE] Compression results:",{originalSize:i.originalSize,originalSizeFormatted:o.formatFileSize(i.originalSize),compressedSize:i.compressedSize,compressedSizeFormatted:o.formatFileSize(i.compressedSize),compressionRatio:i.compressionRatio,sizeSavings:o.formatFileSize(i.originalSize-i.compressedSize),sizeSavingsPercent:Math.round(100*i.compressionRatio)+"%"}),this.compressionControls.completeCompression(i),this.showCompressedVideoPreview(i.compressedFile)):(console.error("[UPLOAD DEBUG] Compression failed, falling back to original:",i.error),this.compressionControls.handleCompressionError(new Error(i.error)),this.processVideo(e,s))}catch(o){console.error("[UPLOAD DEBUG] Compression process threw exception:",{error:o,errorMessage:o.message,errorStack:o.stack}),this.compressionControls&&this.compressionControls.handleCompressionError(o),this.processVideo(e,s)}},compressVideoFile:async function(e){return await this.compressionManager.compressVideo(e,{preset:this.compressionPreset,onProgress:e=>{this.compressionControls&&this.compressionControls.updateProgress(e.stage,e.progress,e.eta)}})},getMedicalContext:function(){const e=document.querySelector("[data-patient-id]"),o=document.querySelector("[data-medical-priority]");return{patientId:e?.dataset.patientId,priority:o?.dataset.medicalPriority||"routine",specialty:o?.dataset.specialty||"general"}},setupFallbackUpload:function(){console.info("Video compression not available, using standard upload")}};window.VideoCompressionPhase3=r,window.CompressionControls=n,console.log("VideoClip type before assignment:",typeof window.VideoClip),window.VideoClip={init:function(){console.log("VideoClip.init() called"),s.init()},utils:o,upload:s,config:e},console.log("VideoClip IIFE completed, window.VideoClip =",window.VideoClip),console.log("VideoClip type after assignment:",typeof window.VideoClip)}(),console.log("VideoClip Compression Bundle fully loaded")})();