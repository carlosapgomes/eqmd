window.VideoClipUpload=function(){"use strict";const e={maxVideoDuration:120,maxVideoSize:52428800,allowedVideoTypes:["video/mp4","video/webm","video/quicktime"],allowedVideoExtensions:[".mp4",".webm",".mov"],previewMaxWidth:800,previewMaxHeight:600},t=window.MediaFiles?window.MediaFiles.utils:{formatFileSize:function(e){if(console.warn("MediaFiles not loaded, using fallback formatFileSize"),0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB"][t]},getFileExtension:function(e){return console.warn("MediaFiles not loaded, using fallback getFileExtension"),e.slice((e.lastIndexOf(".")-1>>>0)+2).toLowerCase()},showToast:function(e,t="info"){console.warn("MediaFiles not loaded, using fallback showToast"),alert(e)},formatDuration:function(e){return`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`}},s={compressionManager:null,compressionControls:null,compressionEnabled:!1,compressionPreset:"medical-standard",emergencyMode:!1,init:function(){document.querySelector(".video-upload-form")&&(this.setupDragAndDrop(),this.setupFileInputs(),this.setupPreviewControls(),this.initCompression())},setupDragAndDrop:function(){document.querySelectorAll(".video-upload-form, #uploadArea").forEach((e=>{e.addEventListener("dragover",this.handleDragOver.bind(this)),e.addEventListener("dragleave",this.handleDragLeave.bind(this)),e.addEventListener("drop",this.handleDrop.bind(this))}))},setupFileInputs:function(){document.querySelectorAll('input[type="file"][accept*="video"]').forEach((e=>{e.addEventListener("change",this.handleFileSelect.bind(this))}));const e=document.getElementById("uploadArea");e&&e.addEventListener("click",(function(){const t=e.querySelector('input[type="file"]');t&&t.click()}))},setupPreviewControls:function(){const e=document.querySelectorAll("#removeVideo, .video-preview-remove"),t=document.querySelectorAll(".video-preview-change");e.forEach((e=>{e.addEventListener("click",this.removePreview.bind(this))})),t.forEach((e=>{e.addEventListener("click",this.changeVideo.bind(this))}))},handleDragOver:function(e){e.preventDefault(),e.currentTarget.classList.add("dragover")},handleDragLeave:function(e){e.preventDefault(),e.currentTarget.classList.remove("dragover")},handleDrop:function(e){e.preventDefault(),e.currentTarget.classList.remove("dragover");const t=e.dataTransfer.files;if(t.length>0){const s=e.currentTarget.querySelector('input[type="file"]');s&&(s.files=t,this.handleFileSelect({target:s}))}},handleFileSelect:function(e){const t=e.target.files[0];t&&(this.validateVideo(t)?(this.showUploadProgress(),this.compressionManager?this.processVideoWithCompression(t,e.target):this.processVideo(t,e.target)):e.target.value="")},validateVideo:function(s){if(!e.allowedVideoTypes.includes(s.type))return t.showToast("Tipo de arquivo não permitido. Use MP4, WebM ou MOV.","danger"),!1;const o="."+t.getFileExtension(s.name);if(!e.allowedVideoExtensions.includes(o))return t.showToast("Extensão de arquivo não permitida.","danger"),!1;if(s.size>e.maxVideoSize){const s=e.maxVideoSize/1048576;return t.showToast(`Arquivo muito grande. Máximo: ${s}MB`,"danger"),!1}return!0},processVideo:function(s,o){const n=document.createElement("video");n.preload="metadata",n.onloadedmetadata=()=>{if(n.duration>e.maxVideoDuration){const s=t.formatDuration(e.maxVideoDuration);return t.showToast(`Vídeo muito longo. Máximo: ${s}`,"danger"),o.value="",void this.hideUploadProgress()}this.showVideoPreview(URL.createObjectURL(s),s,n.duration),this.hideUploadProgress(),t.showToast("Vídeo carregado com sucesso!","success")},n.onerror=()=>{t.showToast("Erro ao carregar o vídeo.","danger"),o.value="",this.hideUploadProgress()},n.src=URL.createObjectURL(s)},showVideoPreview:function(e,t,s){const o=document.getElementById("videoPreview"),n=document.getElementById("uploadArea");if(!o)return;const i=o.querySelector("#previewVideo");i&&(i.src=e),this.updateVideoMetadata(t,s),o.style.display="block",n&&(n.style.display="none")},updateVideoMetadata:function(e,s){const o={fileName:document.getElementById("fileName"),fileSize:document.getElementById("fileSize"),videoDuration:document.getElementById("videoDuration"),fileType:document.getElementById("fileType")};o.fileName&&(o.fileName.textContent=e.name),o.fileSize&&(o.fileSize.textContent=t.formatFileSize(e.size)),o.videoDuration&&(o.videoDuration.textContent=t.formatDuration(s)),o.fileType&&(o.fileType.textContent=e.type)},removePreview:function(e){e.preventDefault();const t=document.getElementById("videoPreview"),s=document.getElementById("uploadArea"),o=document.querySelector('input[type="file"][accept*="video"]');o&&(o.value=""),t&&(t.style.display="none"),s&&(s.style.display="block"),document.querySelectorAll(".media-error").forEach((e=>e.remove()))},changeVideo:function(e){e.preventDefault();const t=document.querySelector('input[type="file"][accept*="video"]');t&&t.click()},showUploadProgress:function(){const e=document.getElementById("uploadProgress");if(e){e.style.display="block";const t=e.querySelector("#progressBar");if(t){let e=0;const s=setInterval((()=>{e+=20*Math.random(),e>=100&&(e=100,clearInterval(s)),t.style.width=e+"%"}),200)}}},hideUploadProgress:function(){const e=document.getElementById("uploadProgress");e&&(e.style.display="none")},initCompression:function(){window.VideoCompressionPhase3?(this.compressionManager=new VideoCompressionPhase3({enableFeatureFlags:!0,enableMonitoring:!0,enableLazyLoading:!0}),this.compressionManager.init().then((()=>{this.setupCompressionControls()})).catch((e=>{console.warn("Compression not available:",e),this.setupFallbackUpload()}))):this.setupFallbackUpload()},setupCompressionControls:function(){const e=document.getElementById("uploadArea");if(!e)return;const t=document.createElement("div");t.className="compression-controls-container",t.id="compressionControlsContainer",e.parentNode.insertBefore(t,e),this.compressionControls=new CompressionControls(t,{medicalContext:this.getMedicalContext()}),this.setupCompressionEventHandlers()},setupCompressionEventHandlers:function(){const e=document.getElementById("compressionControlsContainer");e.addEventListener("compression:compressionEnabled",(e=>{this.compressionEnabled=!0,this.compressionPreset=e.detail.preset})),e.addEventListener("compression:compressionDisabled",(()=>{this.compressionEnabled=!1})),e.addEventListener("compression:presetSelected",(e=>{this.compressionPreset=e.detail.preset})),e.addEventListener("compression:emergencyBypass",(()=>{this.compressionEnabled=!1,this.emergencyMode=!0})),e.addEventListener("compression:compressionCancelled",(()=>{this.fallbackToDirectUpload()}))},processVideoWithCompression:async function(e,t){if(!this.compressionEnabled||this.emergencyMode)return this.processVideo(e,t);try{const s=await this.compressionManager.checkCompressionAvailability(e,{preset:this.compressionPreset});if(!s.available)return console.warn("Compression not available:",s.reason),this.processVideo(e,t);const o=await this.compressVideoFile(e);o.success?(this.compressionControls.completeCompression(o),this.showVideoPreview(URL.createObjectURL(o.compressedFile),o.compressedFile,o.duration)):(this.compressionControls.handleCompressionError(new Error(o.error)),this.processVideo(e,t))}catch(s){console.error("Compression failed:",s),this.compressionControls.handleCompressionError(s),this.processVideo(e,t)}},compressVideoFile:async function(e){return await this.compressionManager.compressVideo(e,{preset:this.compressionPreset,onProgress:e=>{this.compressionControls.updateProgress(e.stage,e.progress,e.eta)}})},getMedicalContext:function(){const e=document.querySelector("[data-patient-id]"),t=document.querySelector("[data-medical-priority]");return{patientId:e?.dataset.patientId,priority:t?.dataset.medicalPriority||"routine",specialty:t?.dataset.specialty||"general"}},fallbackToDirectUpload:function(){this.compressionEnabled=!1;const e=document.getElementById("compressionControlsContainer");e&&(e.style.display="none")},setupFallbackUpload:function(){console.info("Video compression not available, using standard upload")}};return{init:function(){s.init()},utils:t,upload:s,config:e}}(),window.VideoCompressionPhase3=class{constructor(e={}){this.options={enableFeatureFlags:!0,enableMonitoring:!0,enableLazyLoading:!0,medicalContext:null,...e},this.initialized=!1,this.components={},this.compressionQueue=[],this.activeCompressions=new Map,this.init()}async init(){try{console.log("Initializing Phase 3 Video Compression System..."),await this.initializeComponents(),this.options.medicalContext&&this.setMedicalContext(this.options.medicalContext),this.setupEventListeners(),this.options.enableLazyLoading&&await this.preloadCriticalModules(),this.initialized=!0,console.log("Phase 3 Video Compression System initialized successfully"),this.emit("initialized",{timestamp:Date.now()})}catch(e){console.error("Failed to initialize Phase 3 compression:",e),this.handleInitializationError(e)}}async initializeComponents(){this.options.enableFeatureFlags&&(this.components.featureFlags=new CompressionFeatureFlags,await this.components.featureFlags.updateFlags()),this.options.enableMonitoring&&(this.components.monitoring=new CompressionMonitoring),this.components.errorHandler=new CompressionErrorHandler,this.components.performanceMonitor=new CompressionPerformanceMonitor,this.options.enableLazyLoading&&(this.components.lazyLoader=new CompressionLazyLoader),console.log("All components initialized")}setMedicalContext(e){this.medicalContext=e,this.components.errorHandler&&this.components.errorHandler.setMedicalContext(e),this.components.monitoring&&this.components.monitoring.trackEvent("medical_context_set",e)}async checkCompressionAvailability(e,t={}){const s={available:!1,recommended:!1,reason:"",settings:null,warnings:[]};try{if(!this.isFeatureEnabled("compression_enabled",{medicalPriority:this.medicalContext?.priority}))return s.reason="Feature disabled",s;if(this.components.errorHandler?.shouldSkipCompression())return s.reason="Emergency bypass active",s.available=!0,s;if(this.components.performanceMonitor?.isMobileDevice){const e=this.components.performanceMonitor.shouldAllowCompressionOnMobile();if(!e.allowed)return s.reason=`Mobile limitation: ${e.reason}`,s;e.warning&&s.warnings.push(`Mobile warning: ${e.warning}`)}return this.isValidCompressionFile(e)?this.components.lazyLoader&&!await this.loadCompressionModules(t)?(s.reason="Failed to load compression modules",s):(s.settings=this.getOptimizedSettings(e,t),s.recommended=this.isCompressionRecommended(e,s.settings),s.available=!0,s.reason="Compression available",s):(s.reason="File not suitable for compression",s)}catch(e){return console.error("Error checking compression availability:",e),s.reason=`Error: ${e.message}`,s}}async compressVideo(e,t={}){const s=this.generateCompressionId();try{const o=await this.checkCompressionAvailability(e,t);if(!o.available)throw new Error(`Compression not available: ${o.reason}`);this.components.monitoring&&this.components.monitoring.startCompressionTracking(s,{fileSize:e.size,fileName:e.name,preset:t.preset,medicalContext:this.medicalContext,...t}),this.components.performanceMonitor&&this.components.performanceMonitor.startCompressionTracking(s,{originalFile:e,preset:t.preset}),this.activeCompressions.set(s,{file:e,options:t,startTime:Date.now(),status:"starting"}),this.emit("compressionStarted",{compressionId:s,file:e,options:t});const n=await this.performCompression(s,e,{...t,settings:o.settings});return this.components.monitoring&&this.components.monitoring.completeCompressionTracking(s,n),this.components.performanceMonitor&&this.components.performanceMonitor.completeCompressionTracking(s,n),this.activeCompressions.delete(s),this.emit("compressionCompleted",{compressionId:s,result:n}),{success:!0,compressionId:s,...n}}catch(o){console.error("Compression failed:",o);const n=await this.handleCompressionError(s,o,{file:e,options:t});return n&&n.success?await this.compressVideo(e,{...t,...n.modifications}):(this.components.monitoring&&this.components.monitoring.completeCompressionTracking(s,{success:!1,error:o.message}),this.activeCompressions.delete(s),this.emit("compressionError",{compressionId:s,error:o}),{success:!1,compressionId:s,error:o.message,fallback:n?.fallback||!0})}}async performCompression(e,t,s){try{this.updateCompressionStage(e,"initializing",0),this.updateCompressionStage(e,"loading",20);const o=await this.getCompressionWorker();this.updateCompressionStage(e,"processing",30);const n=await new Promise(((n,i)=>{const r=setTimeout((()=>{i(new Error("Compression timeout"))}),this.getCompressionTimeout(s));o.postMessage({type:"compress",compressionId:e,file:t,settings:s.settings});const a=t=>{const{type:s,data:c}=t.data;switch(s){case"progress":this.updateCompressionStage(e,"processing",30+.6*c.progress);break;case"complete":clearTimeout(r),o.removeEventListener("message",a),this.updateCompressionStage(e,"finalizing",95),n(c);break;case"error":clearTimeout(r),o.removeEventListener("message",a),i(new Error(c.message))}};o.addEventListener("message",a)}));return this.updateCompressionStage(e,"completed",100),{success:!0,compressedFile:n.compressedFile,originalSize:t.size,compressedSize:n.size,compressionRatio:1-n.size/t.size,duration:Date.now()-this.activeCompressions.get(e).startTime}}catch(t){throw this.updateCompressionStage(e,"error",0,{error:t.message}),t}}async handleCompressionError(e,t,s){if(!this.components.errorHandler)return{success:!1,fallback:!0};this.components.monitoring&&this.components.monitoring.trackCompressionError(e,t,s);const o=await this.components.errorHandler.handleError(t,s);return this.components.monitoring&&this.components.monitoring.trackErrorRecovery(e,o),o}updateCompressionStage(e,t,s,o={}){const n=this.activeCompressions.get(e);n&&(n.status=t,n.progress=s),this.components.monitoring&&this.components.monitoring.updateCompressionStage(e,t,s,o),this.components.performanceMonitor&&this.components.performanceMonitor.updateCompressionStage(e,t,s,o),this.emit("compressionProgress",{compressionId:e,stage:t,progress:s,data:o})}getOptimizedSettings(e,t){let s={preset:t.preset||"medical-standard",quality:t.quality||"balanced",maxDuration:6e4,chunkSize:33554432};if(this.components.performanceMonitor?.isMobileDevice){const e=this.components.performanceMonitor.getMobileOptimizedSettings();e&&(s={...s,...e})}if(this.medicalContext)switch(this.medicalContext.priority){case"emergency":s.preset="mobile-fast",s.maxDuration=15e3,s.quality="speed";break;case"urgent":s.preset="mobile-optimized",s.maxDuration=3e4,s.quality="balanced"}return this.isFeatureEnabled("advanced_compression")&&(s.advancedCodecs=!0),s}isCompressionRecommended(e,t){if(e.size>104857600)return!0;const s=navigator.connection;if(s){if("slow-2g"===s.effectiveType||"2g"===s.effectiveType)return!0;if("4g"===s.effectiveType&&e.size<10485760)return!1}return this.components.performanceMonitor?.isMobileDevice?e.size>26214400:e.size>52428800}isValidCompressionFile(e){return["video/mp4","video/avi","video/mov","video/webm"].includes(e.type)&&e.size>=1048576&&e.size<=2147483648}async loadCompressionModules(e){if(!this.components.lazyLoader)return!0;try{const t=this.determineUseCase(e);return(await this.components.lazyLoader.loadForUseCase(t)).every(Boolean)}catch(e){return console.error("Failed to load compression modules:",e),!1}}determineUseCase(e){return this.isFeatureEnabled("advanced_compression")?"advanced_compression":this.medicalContext?"medical_workflow":"basic_compression"}async getCompressionWorker(){return this.compressionWorker||(this.compressionWorker=new Worker("/static/mediafiles/js/compression/workers/compression-worker.js")),this.compressionWorker}getCompressionTimeout(e){return"emergency"===this.medicalContext?.priority?15e3:"urgent"===this.medicalContext?.priority?3e4:this.components.performanceMonitor?.isMobileDevice?45e3:12e4}isFeatureEnabled(e,t={}){return!this.components.featureFlags||this.components.featureFlags.isEnabled(e,t)}getFeatureVariant(e,t={}){return this.components.featureFlags?this.components.featureFlags.getVariant(e,t):null}activateEmergencyBypass(e){this.components.errorHandler&&this.components.errorHandler.activateEmergencyBypass(e),this.components.featureFlags&&this.components.featureFlags.emergencyDisable(e),this.emit("emergencyBypass",{reason:e,timestamp:Date.now()})}async preloadCriticalModules(){if(!this.components.lazyLoader)return!0;try{return await this.components.lazyLoader.preloadCriticalModules()}catch(e){return console.warn("Failed to preload critical modules:",e),!1}}setupEventListeners(){window.addEventListener("online",(()=>{this.emit("networkChange",{online:!0})})),window.addEventListener("offline",(()=>{this.emit("networkChange",{online:!1})})),document.addEventListener("visibilitychange",(()=>{this.emit("visibilityChange",{hidden:document.hidden})})),window.addEventListener("compression-performance-warning",(e=>{this.emit("performanceWarning",e.detail)})),window.addEventListener("compression-low-battery",(e=>{this.emit("lowBattery",e.detail)})),window.addEventListener("compression-thermal-throttling",(e=>{this.emit("thermalThrottling",e.detail)}))}handleInitializationError(e){console.error("Initialization failed:",e),this.options.enableFeatureFlags=!1,this.options.enableMonitoring=!1,this.options.enableLazyLoading=!1,this.emit("initializationError",{error:e,fallbackMode:!0})}generateCompressionId(){return`compression_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getSystemStatus(){return{initialized:this.initialized,activeCompressions:this.activeCompressions.size,components:{featureFlags:!!this.components.featureFlags,monitoring:!!this.components.monitoring,errorHandler:!!this.components.errorHandler,performanceMonitor:!!this.components.performanceMonitor,lazyLoader:!!this.components.lazyLoader},medicalContext:this.medicalContext,options:this.options}}getDetailedMetrics(){const e={systemStatus:this.getSystemStatus(),activeCompressions:Array.from(this.activeCompressions.entries())};return this.components.monitoring&&(e.monitoring=this.components.monitoring.getStatistics()),this.components.performanceMonitor&&(e.performance=this.components.performanceMonitor.getCompressionStats()),this.components.errorHandler&&(e.errors=this.components.errorHandler.getErrorStats()),this.components.featureFlags&&(e.featureFlags=this.components.featureFlags.getDebugInfo()),e}emit(e,t){const s=new CustomEvent(`videoCompression:${e}`,{detail:t});window.dispatchEvent(s)}cleanup(){this.activeCompressions.clear(),Object.values(this.components).forEach((e=>{e.cleanup&&e.cleanup()})),this.compressionWorker&&this.compressionWorker.terminate(),this.initialized=!1,console.log("Phase 3 Video Compression System cleaned up")}},window.CompressionControls=class{constructor(e,t={}){this.container=e,this.options={showPresets:!0,showProgress:!0,showEmergencyBypass:!0,medicalContext:null,...t},this.state={compressionEnabled:!1,selectedPreset:"medical-standard",isCompressing:!1,progress:0},this.init()}init(){this.createCompressionToggle(),this.createPresetSelector(),this.createProgressIndicator(),this.createEmergencyBypass(),this.setupEventHandlers()}createCompressionToggle(){const e=`\n            <div class="compression-toggle-container mb-3">\n                <div class="form-check form-switch">\n                    <input class="form-check-input" type="checkbox" role="switch" \n                           id="compressionToggle" ${this.state.compressionEnabled?"checked":""}>\n                    <label class="form-check-label fw-bold" for="compressionToggle">\n                        <i class="bi bi-cpu me-1"></i>\n                        Comprimir vídeo antes do envio\n                    </label>\n                </div>\n                <div class="form-text">\n                    <i class="bi bi-info-circle me-1"></i>\n                    Reduz o tamanho do arquivo mantendo a qualidade médica necessária\n                </div>\n            </div>\n        `;this.container.insertAdjacentHTML("afterbegin",e)}createPresetSelector(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="compression-presets" id="compressionPresets" style="display: none;">\n                <label class="form-label fw-bold mb-2">\n                    <i class="bi bi-sliders me-1"></i>\n                    Qualidade de Compressão\n                </label>\n                <div class="row g-3">\n                    <div class="col-md-4">\n                        <div class="compression-preset-card" data-preset="medical-high">\n                            <div class="preset-header">\n                                <i class="bi bi-award text-primary"></i>\n                                <span class="preset-name">Alta Qualidade</span>\n                            </div>\n                            <div class="preset-description">\n                                Ideal para conteúdo diagnóstico\n                            </div>\n                            <div class="preset-specs">\n                                <small class="text-muted">\n                                    • Qualidade: 95%<br>\n                                    • Redução: ~30%<br>\n                                    • Tempo: +30s\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-4">\n                        <div class="compression-preset-card active" data-preset="medical-standard">\n                            <div class="preset-header">\n                                <i class="bi bi-check-circle text-success"></i>\n                                <span class="preset-name">Padrão Médico</span>\n                            </div>\n                            <div class="preset-description">\n                                Equilibrio entre qualidade e tamanho\n                            </div>\n                            <div class="preset-specs">\n                                <small class="text-muted">\n                                    • Qualidade: 85%<br>\n                                    • Redução: ~50%<br>\n                                    • Tempo: +15s\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-4">\n                        <div class="compression-preset-card" data-preset="mobile-optimized">\n                            <div class="preset-header">\n                                <i class="bi bi-phone text-info"></i>\n                                <span class="preset-name">Otimizado</span>\n                            </div>\n                            <div class="preset-description">\n                                Rápido para dispositivos móveis\n                            </div>\n                            <div class="preset-specs">\n                                <small class="text-muted">\n                                    • Qualidade: 75%<br>\n                                    • Redução: ~70%<br>\n                                    • Tempo: +10s\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ')}createProgressIndicator(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="compression-progress-container" id="compressionProgress" style="display: none;">\n                <div class="progress-header mb-2">\n                    <span class="progress-label">Comprimindo vídeo...</span>\n                    <span class="progress-percentage">0%</span>\n                </div>\n                <div class="progress mb-2" style="height: 8px;">\n                    <div class="progress-bar bg-medical-primary" role="progressbar" \n                         style="width: 0%" id="compressionProgressBar"></div>\n                </div>\n                <div class="progress-details">\n                    <small class="text-muted">\n                        <span id="compressionStage">Inicializando...</span>\n                        <span class="float-end">\n                            <span id="compressionETA">Calculando tempo...</span>\n                        </span>\n                    </small>\n                </div>\n                <div class="progress-actions mt-2">\n                    <button type="button" class="btn btn-sm btn-outline-secondary" id="cancelCompression">\n                        <i class="bi bi-x-circle me-1"></i>\n                        Cancelar e Enviar Direto\n                    </button>\n                </div>\n            </div>\n        ')}createEmergencyBypass(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="emergency-bypass-container mt-3">\n                <button type="button" class="btn btn-outline-danger btn-sm" id="emergencyBypass">\n                    <i class="bi bi-exclamation-triangle me-1"></i>\n                    Emergência: Enviar Imediatamente\n                </button>\n                <div class="form-text">\n                    <small class="text-muted">\n                        Para casos de emergência médica que requerem envio imediato\n                    </small>\n                </div>\n            </div>\n        ')}setupEventHandlers(){const e=document.getElementById("compressionToggle");e?.addEventListener("change",(e=>{this.toggleCompression(e.target.checked)})),document.querySelectorAll(".compression-preset-card").forEach((e=>{e.addEventListener("click",(()=>{this.selectPreset(e.dataset.preset)}))})),document.getElementById("cancelCompression")?.addEventListener("click",(()=>{this.cancelCompression()})),document.getElementById("emergencyBypass")?.addEventListener("click",(()=>{this.activateEmergencyBypass()}))}toggleCompression(e){this.state.compressionEnabled=e;const t=document.getElementById("compressionPresets");e?(t.style.display="block",this.emit("compressionEnabled",{preset:this.state.selectedPreset})):(t.style.display="none",this.emit("compressionDisabled"))}selectPreset(e){document.querySelectorAll(".compression-preset-card").forEach((e=>{e.classList.remove("active")})),document.querySelector(`[data-preset="${e}"]`).classList.add("active"),this.state.selectedPreset=e,this.emit("presetSelected",{preset:e})}updateProgress(e,t,s=null){const o=document.getElementById("compressionProgress"),n=document.getElementById("compressionProgressBar"),i=o.querySelector(".progress-percentage"),r=document.getElementById("compressionStage"),a=document.getElementById("compressionETA");this.state.isCompressing||(o.style.display="block",this.state.isCompressing=!0),n.style.width=`${t}%`,i.textContent=`${Math.round(t)}%`,r.textContent={initializing:"Inicializando compressão...",loading:"Carregando módulos...",processing:"Comprimindo vídeo...",finalizing:"Finalizando...",completed:"Compressão concluída!"}[e]||e,s&&(a.textContent=`${s}s restantes`),this.emit("progressUpdate",{stage:e,progress:t,eta:s})}completeCompression(e){document.getElementById("compressionProgress").style.display="none",this.state.isCompressing=!1;const t=`\n            <div class="alert alert-success" role="alert">\n                <i class="bi bi-check-circle me-2"></i>\n                <strong>Compressão concluída!</strong>\n                Arquivo reduzido em ${Math.round(100*(1-e.compressionRatio))}%\n            </div>\n        `;this.container.insertAdjacentHTML("beforeend",t),this.emit("compressionComplete",e)}handleCompressionError(e){document.getElementById("compressionProgress").style.display="none",this.state.isCompressing=!1;const t=`\n            <div class="alert alert-warning" role="alert">\n                <i class="bi bi-exclamation-triangle me-2"></i>\n                <strong>Falha na compressão:</strong> ${e.message}\n                <div class="mt-2">\n                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="this.parentElement.parentElement.remove()">\n                        <i class="bi bi-upload me-1"></i>\n                        Continuar com envio direto\n                    </button>\n                </div>\n            </div>\n        `;this.container.insertAdjacentHTML("beforeend",t),this.emit("compressionError",e)}cancelCompression(){this.state.isCompressing=!1,document.getElementById("compressionProgress").style.display="none",this.emit("compressionCancelled")}activateEmergencyBypass(){if(confirm("Ativar modo de emergência? O vídeo será enviado imediatamente sem compressão.")){this.state.compressionEnabled=!1,document.getElementById("compressionToggle").checked=!1,document.getElementById("compressionPresets").style.display="none";const e='\n                <div class="alert alert-danger" role="alert">\n                    <i class="bi bi-exclamation-triangle me-2"></i>\n                    <strong>Modo de Emergência Ativado</strong>\n                    O arquivo será enviado imediatamente sem compressão.\n                </div>\n            ';this.container.insertAdjacentHTML("afterbegin",e),this.emit("emergencyBypass")}}getSettings(){return{enabled:this.state.compressionEnabled,preset:this.state.selectedPreset,medicalContext:this.options.medicalContext}}setMedicalContext(e){this.options.medicalContext=e,"emergency"===e.priority?this.activateEmergencyBypass():"urgent"===e.priority&&this.selectPreset("mobile-optimized")}emit(e,t={}){const s=new CustomEvent(`compression:${e}`,{detail:t});this.container.dispatchEvent(s)}},window.MedicalContextDetector=class{constructor(){this.context=this.detectContext()}detectContext(){window.location.pathname;const e=document.querySelector("[data-patient-id]");return{patientId:e?.dataset.patientId,priority:this.detectPriority(),specialty:this.detectSpecialty(),emergencyCase:this.isEmergencyCase(),workflowStep:this.detectWorkflowStep()}}detectPriority(){const e=new URLSearchParams(window.location.search);if(e.has("emergency"))return"emergency";if(e.has("urgent"))return"urgent";const t={emergency:[".emergency-case",".priority-emergency",'[data-emergency="true"]'],urgent:[".urgent-case",".priority-urgent",'[data-urgent="true"]'],routine:[".routine-case",".priority-routine"]};for(const[e,s]of Object.entries(t))if(s.some((e=>document.querySelector(e))))return e;return"routine"}detectSpecialty(){const e=document.querySelector("[data-specialty]");return e?.dataset.specialty||"general"}isEmergencyCase(){return"emergency"===this.context?.priority||null!==document.querySelector(".emergency-case")}detectWorkflowStep(){const e=window.location.pathname;return e.includes("/create/")?"initial_documentation":e.includes("/edit/")?"update_documentation":e.includes("/emergency/")?"emergency_documentation":"documentation"}getCompressionRecommendations(){const e={emergency:{enabled:!1,reason:"Emergency cases require immediate upload",preset:null,showEmergencyBypass:!0},urgent:{enabled:!0,reason:"Quick compression recommended for urgent cases",preset:"mobile-optimized",timeout:3e4},routine:{enabled:!0,reason:"Standard compression for optimal file size",preset:"medical-standard",timeout:6e4}};return e[this.context.priority]||e.routine}configureCompressionControls(e){const t=this.getCompressionRecommendations();return e.setMedicalContext(this.context),t.enabled?t.preset&&e.selectPreset(t.preset):e.activateEmergencyBypass(),t}};