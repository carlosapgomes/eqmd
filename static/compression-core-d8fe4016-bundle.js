(self.webpackChunkeqmd=self.webpackChunkeqmd||[]).push([[28],{85:()=>{window.CompressionPerformanceMonitor=class{constructor(){this.metrics={compressions:[],deviceMetrics:{},performanceHistory:[],mobileOptimizations:{}},this.thresholds={memoryUsage:.8,batteryLevel:.15,thermalState:"nominal",maxCompressions:3,mobileMemoryUsage:.7,mobileBatteryLevel:.25,thermalThrottleTemp:60},this.monitoring=!1,this.monitoringInterval=null,this.isMobileDevice=this.detectMobileDevice(),this.batteryMonitoring=!1,this.thermalMonitoring=!1,this.startMonitoring(),this.setupMobileOptimizations()}startMonitoring(){this.monitoring||(this.monitoring=!0,this.collectInitialMetrics(),this.monitoringInterval=setInterval((()=>{this.collectPerformanceMetrics()}),1e4))}stopMonitoring(){this.monitoring=!1,this.monitoringInterval&&(clearInterval(this.monitoringInterval),this.monitoringInterval=null)}async collectInitialMetrics(){if(this.metrics.deviceMetrics={timestamp:Date.now(),userAgent:navigator.userAgent,hardwareConcurrency:navigator.hardwareConcurrency||4,deviceMemory:navigator.deviceMemory||null,connection:this.getConnectionInfo(),platform:navigator.platform,maxTouchPoints:navigator.maxTouchPoints||0},"getBattery"in navigator)try{const e=await navigator.getBattery();this.metrics.deviceMetrics.battery={level:e.level,charging:e.charging,chargingTime:e.chargingTime,dischargingTime:e.dischargingTime}}catch(e){console.warn("Battery API not available:",e)}}collectPerformanceMetrics(){const e={timestamp:Date.now(),memory:this.getMemoryMetrics(),performance:this.getPerformanceMetrics(),thermal:this.getThermalMetrics(),network:this.getNetworkMetrics()};this.metrics.performanceHistory.push(e),this.metrics.performanceHistory.length>100&&this.metrics.performanceHistory.shift(),this.checkPerformanceThresholds(e)}getMemoryMetrics(){const e={available:!1,jsHeapSizeLimit:0,totalJSHeapSize:0,usedJSHeapSize:0,usageRatio:0};if("memory"in performance){const t=performance.memory;e.available=!0,e.jsHeapSizeLimit=t.jsHeapSizeLimit,e.totalJSHeapSize=t.totalJSHeapSize,e.usedJSHeapSize=t.usedJSHeapSize,e.usageRatio=t.usedJSHeapSize/t.jsHeapSizeLimit}return e}getPerformanceMetrics(){const e=performance.timing,t=performance.navigation;return{navigationStart:e.navigationStart,loadEventEnd:e.loadEventEnd,domContentLoaded:e.domContentLoadedEventEnd-e.navigationStart,pageLoadTime:e.loadEventEnd-e.navigationStart,navigationType:t.type,redirectCount:t.redirectCount}}getThermalMetrics(){return{available:!1,state:"unknown"}}getNetworkMetrics(){return this.getConnectionInfo()}getConnectionInfo(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return e?{available:!0,effectiveType:e.effectiveType,downlink:e.downlink,downlinkMax:e.downlinkMax,rtt:e.rtt,type:e.type,saveData:e.saveData}:{available:!1}}checkPerformanceThresholds(e){const t=[];e.memory.available&&e.memory.usageRatio>this.thresholds.memoryUsage&&t.push({type:"memory_pressure",severity:"high",message:`Memory usage at ${(100*e.memory.usageRatio).toFixed(1)}%`,recommendation:"Consider reducing compression quality or direct upload"}),e.network.available&&("slow-2g"!==e.network.effectiveType&&"2g"!==e.network.effectiveType||t.push({type:"slow_network",severity:"medium",message:"Slow network detected",recommendation:"Compression may take longer but will reduce upload time"})),t.length>0&&this.processPerformanceWarnings(t)}processPerformanceWarnings(e){e.forEach((e=>{console.warn("Performance warning:",e),window.dispatchEvent(new CustomEvent("compression-performance-warning",{detail:e}))}))}startCompressionTracking(e,t={}){const s={id:e,startTime:Date.now(),options:t,initialMetrics:{memory:this.getMemoryMetrics(),performance:this.getPerformanceMetrics()},stages:[],completed:!1};return this.metrics.compressions.push(s),s}updateCompressionStage(e,t,s=0,i={}){const o=this.metrics.compressions.find((t=>t.id===e));o&&o.stages.push({stage:t,progress:s,timestamp:Date.now(),duration:Date.now()-o.startTime,metrics:{memory:this.getMemoryMetrics()},...i})}completeCompressionTracking(e,t={}){const s=this.metrics.compressions.find((t=>t.id===e));s&&(s.completed=!0,s.endTime=Date.now(),s.totalDuration=s.endTime-s.startTime,s.result=t,s.finalMetrics={memory:this.getMemoryMetrics(),performance:this.getPerformanceMetrics()},this.calculateCompressionEfficiency(s))}calculateCompressionEfficiency(e){const t={timePerMB:0,compressionRatio:0,memoryEfficiency:0,overallRating:"unknown"};if(e.result.originalSize&&e.result.compressedSize){const s=e.result.originalSize/1048576;t.timePerMB=e.totalDuration/s,t.compressionRatio=1-e.result.compressedSize/e.result.originalSize}const s=e.initialMetrics.memory.usageRatio,i=e.finalMetrics.memory.usageRatio;t.memoryEfficiency=i-s,t.compressionRatio>.5&&t.timePerMB<5e3?t.overallRating="excellent":t.compressionRatio>.3&&t.timePerMB<1e4?t.overallRating="good":t.compressionRatio>.1&&t.timePerMB<2e4?t.overallRating="fair":t.overallRating="poor",e.efficiency=t}getPerformanceRecommendations(){const e=this.metrics.performanceHistory[this.metrics.performanceHistory.length-1],t=[];if(!e)return["Performance data not available"];e.memory.available&&(e.memory.usageRatio>.8?t.push("Alto uso de memória - considere fechar outras abas"):e.memory.usageRatio>.6?t.push("Uso moderado de memória - compressão disponível com configurações conservadoras"):t.push("Memória suficiente - todas as configurações de compressão disponíveis")),e.network.available&&("4g"===e.network.effectiveType||e.network.downlink>10?t.push("Rede rápida - compressão pode não ser necessária para arquivos pequenos"):"3g"===e.network.effectiveType?t.push("Rede moderada - compressão recomendada para arquivos grandes"):t.push("Rede lenta - compressão altamente recomendada"));const s=this.metrics.deviceMetrics.hardwareConcurrency;return s>=8?t.push("Dispositivo potente - compressão rápida disponível"):s>=4?t.push("Dispositivo moderado - compressão disponível"):t.push("Dispositivo limitado - use configurações de compressão rápida"),t}getCompressionStats(){const e=this.metrics.compressions.filter((e=>e.completed));if(0===e.length)return null;const t={totalCompressions:e.length,averageDuration:0,averageCompressionRatio:0,averageTimePerMB:0,successRate:0,ratingDistribution:{excellent:0,good:0,fair:0,poor:0}};let s=0,i=0,o=0,n=0;return e.forEach((e=>{s+=e.totalDuration,e.efficiency&&(i+=e.efficiency.compressionRatio,o+=e.efficiency.timePerMB,t.ratingDistribution[e.efficiency.overallRating]++,n++)})),t.averageDuration=s/e.length,t.successRate=n/e.length,n>0&&(t.averageCompressionRatio=i/n,t.averageTimePerMB=o/n),t}exportPerformanceData(){return{deviceMetrics:this.metrics.deviceMetrics,performanceHistory:this.metrics.performanceHistory,compressions:this.metrics.compressions.map((e=>({id:e.id,duration:e.totalDuration,efficiency:e.efficiency,options:e.options,stages:e.stages.length}))),stats:this.getCompressionStats(),recommendations:this.getPerformanceRecommendations()}}detectMobileDevice(){const e=navigator.userAgent.toLowerCase(),t=["mobile","android","iphone","ipad","ipod","blackberry","windows phone"].some((t=>e.includes(t))),s="ontouchstart"in window||navigator.maxTouchPoints>0,i=window.screen.width<=768||window.screen.height<=768,o=navigator.deviceMemory&&navigator.deviceMemory<=4;return t||s&&i||o}setupMobileOptimizations(){this.isMobileDevice&&(this.thresholds.memoryUsage=this.thresholds.mobileMemoryUsage,this.thresholds.batteryLevel=this.thresholds.mobileBatteryLevel,this.thresholds.maxCompressions=1,this.setupBatteryMonitoring(),this.setupThermalMonitoring(),this.setupPageLifecycleMonitoring(),this.setupNetworkChangeMonitoring(),console.log("Mobile optimizations enabled"))}async setupBatteryMonitoring(){try{if("getBattery"in navigator){const e=await navigator.getBattery();this.batteryMonitoring=!0,e.addEventListener("levelchange",(()=>{this.handleBatteryChange(e)})),e.addEventListener("chargingchange",(()=>{this.handleBatteryChange(e)})),this.handleBatteryChange(e)}}catch(e){console.warn("Battery monitoring setup failed:",e)}}handleBatteryChange(e){const t={level:e.level,charging:e.charging,timestamp:Date.now()};this.metrics.mobileOptimizations.lastBatteryUpdate=t,!e.charging&&e.level<this.thresholds.batteryLevel?this.triggerLowBatteryMode():(e.charging||e.level>this.thresholds.batteryLevel+.1)&&this.exitLowBatteryMode()}triggerLowBatteryMode(){this.metrics.mobileOptimizations.lowBatteryMode=!0,window.dispatchEvent(new CustomEvent("compression-low-battery",{detail:{batteryLevel:this.metrics.mobileOptimizations.lastBatteryUpdate?.level,recommendation:"Considere conectar o carregador antes de continuar"}})),console.warn("Low battery mode activated")}exitLowBatteryMode(){this.metrics.mobileOptimizations.lowBatteryMode&&(this.metrics.mobileOptimizations.lowBatteryMode=!1,window.dispatchEvent(new CustomEvent("compression-battery-ok",{detail:{batteryLevel:this.metrics.mobileOptimizations.lastBatteryUpdate?.level}})),console.log("Low battery mode deactivated"))}setupThermalMonitoring(){this.thermalMonitoring=!0,this.thermalCheckInterval=setInterval((()=>{this.checkThermalState()}),15e3)}checkThermalState(){const e=performance.now();let t=0;for(let e=0;e<1e5;e++)t+=Math.random();const s=performance.now()-e;if(this.metrics.mobileOptimizations.computationHistory||(this.metrics.mobileOptimizations.computationHistory=[]),this.metrics.mobileOptimizations.computationHistory.push({time:s,timestamp:Date.now()}),this.metrics.mobileOptimizations.computationHistory.length>10&&this.metrics.mobileOptimizations.computationHistory.shift(),this.metrics.mobileOptimizations.computationHistory.length>=5){const e=this.metrics.mobileOptimizations.computationHistory.slice(-3),t=this.metrics.mobileOptimizations.computationHistory.slice(0,3),s=e.reduce(((e,t)=>e+t.time),0)/e.length,i=t.reduce(((e,t)=>e+t.time),0)/t.length;s>1.5*i&&this.handleThermalThrottling()}}handleThermalThrottling(){this.metrics.mobileOptimizations.thermalThrottling=!0,window.dispatchEvent(new CustomEvent("compression-thermal-throttling",{detail:{recommendation:"Dispositivo aquecido. Recomendamos pausar a compressão."}})),console.warn("Thermal throttling detected")}setupPageLifecycleMonitoring(){document.addEventListener("visibilitychange",(()=>{document.hidden?this.handlePageHidden():this.handlePageVisible()})),document.addEventListener("freeze",(()=>{this.handlePageFreeze()})),document.addEventListener("resume",(()=>{this.handlePageResume()}))}handlePageHidden(){this.metrics.mobileOptimizations.pageHidden=!0,this.metrics.mobileOptimizations.pageHiddenTime=Date.now(),window.dispatchEvent(new CustomEvent("compression-page-hidden"))}handlePageVisible(){if(this.metrics.mobileOptimizations.pageHidden){this.metrics.mobileOptimizations.pageHidden=!1;const e=Date.now()-this.metrics.mobileOptimizations.pageHiddenTime;e>3e4?window.dispatchEvent(new CustomEvent("compression-page-visible-long",{detail:{hiddenDuration:e}})):window.dispatchEvent(new CustomEvent("compression-page-visible"))}}handlePageFreeze(){this.metrics.mobileOptimizations.pageFrozen=!0,window.dispatchEvent(new CustomEvent("compression-page-freeze"))}handlePageResume(){this.metrics.mobileOptimizations.pageFrozen=!1,window.dispatchEvent(new CustomEvent("compression-page-resume"))}setupNetworkChangeMonitoring(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;e&&e.addEventListener("change",(()=>{this.handleNetworkChange()}))}handleNetworkChange(){const e=this.getConnectionInfo();this.metrics.mobileOptimizations.lastNetworkChange={...e,timestamp:Date.now()},e.available&&("slow-2g"===e.effectiveType||"2g"===e.effectiveType?window.dispatchEvent(new CustomEvent("compression-network-slow",{detail:{networkType:e.effectiveType,downlink:e.downlink}})):("4g"===e.effectiveType||e.downlink>10)&&window.dispatchEvent(new CustomEvent("compression-network-fast",{detail:{networkType:e.effectiveType,downlink:e.downlink}})))}getMobilePerformanceRecommendations(){if(!this.isMobileDevice)return this.getPerformanceRecommendations();const e=[],t=this.metrics.mobileOptimizations;if(t.lowBatteryMode?e.push("⚠️ Bateria baixa - conecte o carregador antes de continuar"):t.lastBatteryUpdate&&!t.lastBatteryUpdate.charging&&e.push("🔋 Considere conectar o carregador para compressões longas"),t.thermalThrottling&&e.push("🌡️ Dispositivo aquecido - aguarde esfriar ou use envio direto"),t.lastNetworkChange){const s=t.lastNetworkChange;"slow-2g"===s.effectiveType||"2g"===s.effectiveType?e.push("📶 Rede lenta - compressão altamente recomendada"):"4g"===s.effectiveType&&s.downlink>10&&e.push("📶 Rede rápida - compressão opcional para arquivos pequenos")}t.pageHidden&&e.push("👁️ Mantenha a página ativa durante a compressão");const s=this.metrics.performanceHistory[this.metrics.performanceHistory.length-1];return s&&s.memory.available&&s.memory.usageRatio>.7&&e.push("💾 Alto uso de memória - use configurações rápidas ou envio direto"),e.push("📱 Para melhor performance: feche outras abas e aplicativos"),e}shouldAllowCompressionOnMobile(){if(!this.isMobileDevice)return!0;const e=this.metrics.mobileOptimizations;return e.lowBatteryMode?{allowed:!1,reason:"low_battery"}:e.thermalThrottling?{allowed:!1,reason:"thermal_throttling"}:e.pageFrozen?{allowed:!1,reason:"page_frozen"}:e.pageHidden?{allowed:!0,warning:"page_hidden"}:{allowed:!0}}getMobileOptimizedSettings(){if(!this.isMobileDevice)return null;const e={preset:"mobile-optimized",maxDuration:3e4,chunkSize:16777216,quality:"balanced"},t=this.metrics.mobileOptimizations;if(t.thermalThrottling&&(e.preset="mobile-fast",e.maxDuration=15e3,e.quality="speed"),t.lowBatteryMode&&(e.preset="mobile-fast",e.maxDuration=1e4,e.quality="speed"),t.lastNetworkChange){const s=t.lastNetworkChange;"slow-2g"===s.effectiveType||"2g"===s.effectiveType?e.quality="high_compression":"4g"===s.effectiveType&&s.downlink>10&&(e.quality="balanced")}return e}cleanup(){this.clearHistory(),this.thermalCheckInterval&&clearInterval(this.thermalCheckInterval),console.log("Mobile performance monitoring cleaned up")}clearHistory(){this.metrics.performanceHistory=[],this.metrics.compressions=[],this.metrics.mobileOptimizations={}}}},110:(e,t,s)=>{window.CompressionLazyLoader=class{constructor(){this.loadedModules=new Set,this.loadingPromises=new Map,this.moduleConfigs=new Map,this.cacheEnabled=!0,this.cacheExpiryTime=864e5,this.setupModuleConfigurations(),this.setupCaching()}setupModuleConfigurations(){this.moduleConfigs.set("ffmpeg-core",{url:"https://unpkg.com/@ffmpeg/core@0.12.4/dist/esm/ffmpeg-core.js",type:"module",size:13e5,critical:!0,dependencies:[]}),this.moduleConfigs.set("ffmpeg-wasm",{url:"https://unpkg.com/@ffmpeg/ffmpeg@0.12.4/dist/esm/index.js",type:"module",size:5e4,critical:!0,dependencies:["ffmpeg-core"]}),this.moduleConfigs.set("image-processing",{url:"/static/mediafiles/js/compression/modules/image-processing.js",type:"script",size:75e3,critical:!1,dependencies:[]}),this.moduleConfigs.set("advanced-codecs",{url:"/static/mediafiles/js/compression/modules/advanced-codecs.js",type:"script",size:12e4,critical:!1,dependencies:["ffmpeg-wasm"]}),this.moduleConfigs.set("medical-workflows",{url:"/static/mediafiles/js/compression/ui/medical-workflows.js",type:"script",size:25e3,critical:!1,dependencies:[]}),this.moduleConfigs.set("performance-monitor",{url:"/static/mediafiles/js/compression/utils/performance-monitor.js",type:"script",size:35e3,critical:!1,dependencies:[]})}setupCaching(){"caches"in window?this.setupServiceWorkerCache():this.moduleCache=new Map}async setupServiceWorkerCache(){try{this.cache=await caches.open("compression-modules-v1"),console.log("Service worker cache available for compression modules")}catch(e){console.warn("Service worker cache not available:",e),this.moduleCache=new Map}}async loadModule(e,t={}){if(this.loadedModules.has(e))return!0;if(this.loadingPromises.has(e))return await this.loadingPromises.get(e);const s=this.moduleConfigs.get(e);if(!s)throw new Error(`Unknown module: ${e}`);const i=this._loadModuleInternal(e,s,t);this.loadingPromises.set(e,i);try{const t=await i;return this.loadedModules.add(e),t}finally{this.loadingPromises.delete(e)}}async _loadModuleInternal(e,t,s){if(console.log(`Loading module: ${e}`),t.dependencies.length>0&&await this.loadDependencies(t.dependencies),t.size>1e5&&!this.checkDeviceCapabilities(t))throw new Error(`Device not capable of loading module: ${e}`);if(t.size>5e5&&!await this.checkNetworkConditions()&&!s.forceLoad)throw new Error(`Network conditions not suitable for loading ${e}`);const i=await this.loadFromCache(e,t);return i?await this.executeModule(e,t,i):await this.loadFromNetwork(e,t)}async loadDependencies(e){const t=e.map((e=>this.loadModule(e)));await Promise.all(t)}checkDeviceCapabilities(e){return navigator.deviceMemory&&navigator.deviceMemory<2?(console.warn("Low device memory, skipping heavy module:",e),!1):navigator.hardwareConcurrency&&navigator.hardwareConcurrency<2?(console.warn("Low CPU cores, skipping heavy module:",e),!1):!(this.isMobileDevice()&&e.size>1e6)||(console.warn("Mobile device with large module, checking further..."),this.isHighEndMobileDevice())}async checkNetworkConditions(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return!e||"slow-2g"!==e.effectiveType&&("4g"===e.effectiveType||e.downlink>5||!e.saveData)}async loadFromCache(e,t){try{if(this.cache){const s=await this.cache.match(t.url);if(s){const t=s.headers.get("cache-time");if(t&&Date.now()-parseInt(t)<this.cacheExpiryTime)return console.log(`Loaded ${e} from service worker cache`),await s.text()}}else if(this.moduleCache){const t=this.moduleCache.get(e);if(t&&Date.now()-t.timestamp<this.cacheExpiryTime)return console.log(`Loaded ${e} from memory cache`),t.content}}catch(t){console.warn(`Cache miss for ${e}:`,t)}return null}async loadFromNetwork(e,t){console.log(`Loading ${e} from network...`);try{t.size>5e5&&this.showLoadingIndicator(e,t.size);const s=await fetch(t.url);if(!s.ok)throw new Error(`Failed to load ${e}: ${s.status}`);const i=await s.text();return await this.cacheModule(e,t,i),await this.executeModule(e,t,i)}catch(t){throw console.error(`Failed to load module ${e}:`,t),t}finally{this.hideLoadingIndicator(e)}}async cacheModule(e,t,s){if(this.cacheEnabled)try{if(this.cache){const e=new Response(s,{headers:{"Content-Type":"application/javascript","cache-time":Date.now().toString()}});await this.cache.put(t.url,e)}else this.moduleCache&&this.moduleCache.set(e,{content:s,timestamp:Date.now()});console.log(`Cached module: ${e}`)}catch(t){console.warn(`Failed to cache ${e}:`,t)}}async executeModule(e,t,i){try{if("module"===t.type){const e=new Blob([i],{type:"application/javascript"}),t=URL.createObjectURL(e),o=await s(265)(t);return URL.revokeObjectURL(t),o}{const e=document.createElement("script");return e.textContent=i,document.head.appendChild(e),await new Promise((t=>{e.onload=t,"complete"===e.readyState&&t()})),!0}}catch(t){throw console.error(`Failed to execute module ${e}:`,t),t}}async preloadCriticalModules(){const e=Array.from(this.moduleConfigs.entries()).filter((([e,t])=>t.critical)).map((([e])=>e));console.log("Preloading critical modules:",e);const t=e.map((e=>this.loadModule(e,{forceLoad:!0}).catch((t=>(console.warn(`Failed to preload critical module ${e}:`,t),!1))))),s=(await Promise.all(t)).filter(Boolean).length;return console.log(`Preloaded ${s}/${e.length} critical modules`),s===e.length}async loadForUseCase(e,t={}){const s={basic_compression:["ffmpeg-wasm","performance-monitor"],advanced_compression:["ffmpeg-wasm","advanced-codecs","performance-monitor"],medical_workflow:["ffmpeg-wasm","medical-workflows","performance-monitor"],thumbnail_generation:["image-processing"],full_suite:["ffmpeg-wasm","advanced-codecs","image-processing","medical-workflows","performance-monitor"]}[e];if(!s)throw new Error(`Unknown use case: ${e}`);console.log(`Loading modules for use case: ${e}`);const i=s.map((s=>this.loadModule(s,t).catch((t=>(console.warn(`Failed to load module ${s} for ${e}:`,t),!1))))),o=await Promise.all(i),n=o.filter(Boolean).length;return console.log(`Loaded ${n}/${s.length} modules for ${e}`),o}showLoadingIndicator(e,t){const s=document.createElement("div");s.id=`loading-${e}`,s.className="compression-loading-indicator",s.innerHTML=`\n            <div class="spinner"></div>\n            <div class="message">Carregando módulo de compressão... (${Math.round(t/1024)}KB)</div>\n        `,document.getElementById(s.id)||document.body.appendChild(s)}hideLoadingIndicator(e){const t=document.getElementById(`loading-${e}`);t&&t.remove()}isMobileDevice(){const e=navigator.userAgent.toLowerCase();return/mobile|android|iphone|ipad|ipod/.test(e)||"ontouchstart"in window&&window.screen.width<=768}isHighEndMobileDevice(){return navigator.hardwareConcurrency>=6&&navigator.deviceMemory>=4}getLoadingStatus(){return{loadedModules:Array.from(this.loadedModules),loadingModules:Array.from(this.loadingPromises.keys()),availableModules:Array.from(this.moduleConfigs.keys()),cacheEnabled:this.cacheEnabled}}async clearCache(){try{this.cache&&await this.cache.clear(),this.moduleCache&&this.moduleCache.clear(),console.log("Module cache cleared")}catch(e){console.warn("Failed to clear cache:",e)}}async getCacheStats(){const e={enabled:this.cacheEnabled,type:this.cache?"service-worker":"memory",entries:0,size:0};try{if(this.cache){const t=await this.cache.keys();e.entries=t.length;for(const s of t){const t=await this.cache.match(s);if(t){const s=await t.blob();e.size+=s.size}}}else this.moduleCache&&(e.entries=this.moduleCache.size,e.size=Array.from(this.moduleCache.values()).reduce(((e,t)=>e+t.content.length),0))}catch(e){console.warn("Failed to get cache stats:",e)}return e}cleanup(){this.loadingPromises.clear(),document.querySelectorAll(".compression-loading-indicator").forEach((e=>e.remove())),console.log("Lazy loader cleaned up")}}},164:()=>{window.MedicalContextDetector=class{constructor(){this.context=this.detectContext()}detectContext(){window.location.pathname;const e=document.querySelector("[data-patient-id]");return{patientId:e?.dataset.patientId,priority:this.detectPriority(),specialty:this.detectSpecialty(),emergencyCase:this.isEmergencyCase(),workflowStep:this.detectWorkflowStep()}}detectPriority(){const e=new URLSearchParams(window.location.search);if(e.has("emergency"))return"emergency";if(e.has("urgent"))return"urgent";const t={emergency:[".emergency-case",".priority-emergency",'[data-emergency="true"]'],urgent:[".urgent-case",".priority-urgent",'[data-urgent="true"]'],routine:[".routine-case",".priority-routine"]};for(const[e,s]of Object.entries(t))if(s.some((e=>document.querySelector(e))))return e;return"routine"}detectSpecialty(){const e=document.querySelector("[data-specialty]");return e?.dataset.specialty||"general"}isEmergencyCase(){return"emergency"===this.context?.priority||null!==document.querySelector(".emergency-case")}detectWorkflowStep(){const e=window.location.pathname;return e.includes("/create/")?"initial_documentation":e.includes("/edit/")?"update_documentation":e.includes("/emergency/")?"emergency_documentation":"documentation"}getCompressionRecommendations(){const e={emergency:{enabled:!1,reason:"Emergency cases require immediate upload",preset:null,showEmergencyBypass:!0},urgent:{enabled:!0,reason:"Quick compression recommended for urgent cases",preset:"mobile-optimized",timeout:3e4},routine:{enabled:!0,reason:"Standard compression for optimal file size",preset:"medical-standard",timeout:6e4}};return e[this.context.priority]||e.routine}configureCompressionControls(e){const t=this.getCompressionRecommendations();return e.setMedicalContext(this.context),t.enabled?t.preset&&e.selectPreset(t.preset):e.activateEmergencyBypass(),t}}},664:()=>{window.CompressionMonitoring=class{constructor(){this.metrics={compressions:new Map,errors:[],performance:[],userSessions:new Map,deviceMetrics:{},networkMetrics:[]},this.config={maxMetricsHistory:1e3,maxErrorHistory:500,batchSize:50,flushInterval:6e4,emergencyFlushThreshold:100},this.monitoring=!0,this.flushTimer=null,this.initializeMonitoring()}initializeMonitoring(){this.collectDeviceMetrics(),this.setupPeriodicFlush(),this.setupGlobalErrorHandling(),this.setupPerformanceMonitoring(),this.startUserSession(),console.log("Compression monitoring initialized")}startCompressionTracking(e,t={}){const s={id:e,startTime:Date.now(),endTime:null,status:"started",options:{...t},stages:[],errors:[],performance:{fileSize:t.fileSize||0,estimatedDuration:null,actualDuration:null,compressionRatio:null,processingSpeed:null},device:{userAgent:navigator.userAgent,hardwareConcurrency:navigator.hardwareConcurrency,deviceMemory:navigator.deviceMemory,isMobile:this.isMobileDevice()},network:this.getCurrentNetworkInfo(),medicalContext:t.medicalContext||null};return this.metrics.compressions.set(e,s),this.trackEvent("compression_started",{compressionId:e,fileSize:t.fileSize,preset:t.preset,medicalPriority:t.medicalContext?.priority}),s}updateCompressionStage(e,t,s=0,i={}){const o=this.metrics.compressions.get(e);if(!o)return void console.warn("Compression not found:",e);const n={stage:t,progress:s,timestamp:Date.now(),duration:Date.now()-o.startTime,memoryUsage:this.getCurrentMemoryUsage(),...i};o.stages.push(n),o.status=t,this.trackEvent("compression_stage",{compressionId:e,stage:t,progress:s,duration:n.duration})}completeCompressionTracking(e,t={}){const s=this.metrics.compressions.get(e);if(s)return s.endTime=Date.now(),s.performance.actualDuration=s.endTime-s.startTime,s.status=t.success?"completed":"failed",t.success&&t.compressedSize&&(s.performance.compressionRatio=1-t.compressedSize/s.performance.fileSize,s.performance.processingSpeed=s.performance.fileSize/s.performance.actualDuration),this.trackEvent("compression_completed",{compressionId:e,success:t.success,duration:s.performance.actualDuration,compressionRatio:s.performance.compressionRatio,error:t.error}),this.calculateUserExperienceMetrics(s),s;console.warn("Compression not found:",e)}trackCompressionError(e,t,s={}){const i={compressionId:e,error:{message:t.message,stack:t.stack,name:t.name},context:s,timestamp:Date.now(),device:{userAgent:navigator.userAgent,isMobile:this.isMobileDevice(),memory:this.getCurrentMemoryUsage()},network:this.getCurrentNetworkInfo(),recovery:null};this.metrics.errors.push(i);const o=this.metrics.compressions.get(e);o&&(o.errors.push(i),o.status="error"),this.trackEvent("compression_error",{compressionId:e,errorType:t.name,errorMessage:t.message,context:s}),this.metrics.errors.length>=this.config.emergencyFlushThreshold&&this.flushMetrics(!0)}trackErrorRecovery(e,t){const s=this.metrics.compressions.get(e);s&&s.errors.length>0&&(s.errors[s.errors.length-1].recovery={strategy:t.strategy,successful:t.successful,timestamp:Date.now()}),this.trackEvent("error_recovery",{compressionId:e,strategy:t.strategy,successful:t.successful})}trackUserInteraction(e,t={}){this.trackEvent("user_interaction",{action:e,timestamp:Date.now(),...t})}trackPerformanceMetric(e,t,s={}){const i={metric:e,value:t,timestamp:Date.now(),context:s,device:{isMobile:this.isMobileDevice(),memory:this.getCurrentMemoryUsage()}};this.metrics.performance.push(i),this.metrics.performance.length>this.config.maxMetricsHistory&&this.metrics.performance.shift()}trackNetworkChange(e){const t={...e,timestamp:Date.now()};this.metrics.networkMetrics.push(t),this.trackEvent("network_change",e)}trackEvent(e,t={}){const s={type:e,data:t,timestamp:Date.now(),sessionId:this.getSessionId(),userId:this.getUserId()};this.addToBatch(s)}calculateUserExperienceMetrics(e){const t={timeToFirstProgress:null,timeToCompletion:e.performance.actualDuration,stageCount:e.stages.length,errorCount:e.errors.length,userSatisfaction:null};e.stages.length>0&&(t.timeToFirstProgress=e.stages[0].timestamp-e.startTime);let s=100;const i=this.getExpectedDuration(e.performance.fileSize);e.performance.actualDuration>1.5*i&&(s-=20),s-=15*e.errors.length,e.performance.compressionRatio>.5&&(s+=10),"emergency"===e.medicalContext?.priority&&e.performance.actualDuration<15e3&&(s+=15),t.userSatisfaction=Math.max(0,Math.min(100,s)),e.userExperience=t,this.trackEvent("user_experience_calculated",{compressionId:e.id,...t})}getExpectedDuration(e){return e/1048576*2e3}setupGlobalErrorHandling(){window.addEventListener("unhandledrejection",(e=>{this.trackGlobalError(e.reason,"unhandled_promise_rejection")})),window.addEventListener("error",(e=>{e.filename&&e.filename.includes("compression")&&this.trackGlobalError(e.error||new Error(e.message),"javascript_error")}))}trackGlobalError(e,t){const s={type:t,error:{message:e.message,stack:e.stack,name:e.name},timestamp:Date.now(),url:window.location.href,device:{userAgent:navigator.userAgent,isMobile:this.isMobileDevice()}};this.metrics.errors.push(s),this.trackEvent("global_error",{errorType:t,errorMessage:e.message})}setupPerformanceMonitoring(){"performance"in window&&window.addEventListener("load",(()=>{setTimeout((()=>{this.collectPagePerformanceMetrics()}),1e3)})),setInterval((()=>{this.trackPerformanceMetric("memory_usage",this.getCurrentMemoryUsage())}),3e4)}collectPagePerformanceMetrics(){if(!performance.timing)return;const e=performance.timing,t={pageLoadTime:e.loadEventEnd-e.navigationStart,domContentLoaded:e.domContentLoadedEventEnd-e.navigationStart,firstPaint:this.getFirstPaintTime(),resourceLoadTime:e.loadEventEnd-e.domContentLoadedEventEnd};this.trackEvent("page_performance",t)}getFirstPaintTime(){try{const e=performance.getEntriesByType("paint").find((e=>"first-paint"===e.name));return e?e.startTime:null}catch(e){return null}}startUserSession(){const e=this.getSessionId(),t={id:e,startTime:Date.now(),endTime:null,compressions:[],interactions:[],device:this.metrics.deviceMetrics,network:this.getCurrentNetworkInfo()};this.metrics.userSessions.set(e,t),this.trackEvent("session_started",{sessionId:e,device:t.device,network:t.network}),window.addEventListener("beforeunload",(()=>{this.endUserSession()}))}endUserSession(){const e=this.getSessionId(),t=this.metrics.userSessions.get(e);t&&(t.endTime=Date.now(),t.duration=t.endTime-t.startTime,this.trackEvent("session_ended",{sessionId:e,duration:t.duration,compressionCount:t.compressions.length})),this.flushMetrics(!0)}collectDeviceMetrics(){this.metrics.deviceMetrics={userAgent:navigator.userAgent,platform:navigator.platform,hardwareConcurrency:navigator.hardwareConcurrency,deviceMemory:navigator.deviceMemory,language:navigator.language,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine,screenResolution:`${screen.width}x${screen.height}`,colorDepth:screen.colorDepth,timeZone:Intl.DateTimeFormat().resolvedOptions().timeZone,timestamp:Date.now()},this.collectBatteryInfo()}async collectBatteryInfo(){try{if("getBattery"in navigator){const e=await navigator.getBattery();this.metrics.deviceMetrics.battery={level:e.level,charging:e.charging,chargingTime:e.chargingTime,dischargingTime:e.dischargingTime}}}catch(e){}}getCurrentMemoryUsage(){if("memory"in performance){const e=performance.memory;return{usedJSHeapSize:e.usedJSHeapSize,totalJSHeapSize:e.totalJSHeapSize,jsHeapSizeLimit:e.jsHeapSizeLimit,usageRatio:e.usedJSHeapSize/e.jsHeapSizeLimit}}return null}getCurrentNetworkInfo(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return e?{effectiveType:e.effectiveType,downlink:e.downlink,downlinkMax:e.downlinkMax,rtt:e.rtt,type:e.type,saveData:e.saveData}:{available:!1}}isMobileDevice(){const e=navigator.userAgent.toLowerCase();return/mobile|android|iphone|ipad|ipod/.test(e)||"ontouchstart"in window&&window.screen.width<=768}getSessionId(){let e=sessionStorage.getItem("compression_session_id");return e||(e="session_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),sessionStorage.setItem("compression_session_id",e)),e}getUserId(){let e=localStorage.getItem("compression_user_id");return e||(e="user_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),localStorage.setItem("compression_user_id",e)),e}addToBatch(e){this.batchedEvents||(this.batchedEvents=[]),this.batchedEvents.push(e),this.batchedEvents.length>=this.config.emergencyFlushThreshold&&this.flushMetrics(!0)}setupPeriodicFlush(){this.flushTimer=setInterval((()=>{this.flushMetrics()}),this.config.flushInterval)}async flushMetrics(e=!1){if(!this.batchedEvents||0===this.batchedEvents.length)return;const t={sessionId:this.getSessionId(),userId:this.getUserId(),events:this.batchedEvents.splice(0,this.config.batchSize),deviceMetrics:this.metrics.deviceMetrics,timestamp:Date.now()};try{if(e&&"sendBeacon"in navigator)navigator.sendBeacon("/api/compression-monitoring/",JSON.stringify(t))&&console.log("Metrics flushed via beacon:",t.events.length,"events");else{const e=await fetch("/api/compression-monitoring/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":this.getCSRFToken()},body:JSON.stringify(t)});e.ok?console.log("Metrics flushed:",t.events.length,"events"):(console.warn("Failed to flush metrics:",e.status),this.batchedEvents.unshift(...t.events))}}catch(e){console.warn("Error flushing metrics:",e),this.batchedEvents.unshift(...t.events)}}getCSRFToken(){const e=document.cookie.split("; ").find((e=>e.startsWith("csrftoken=")))?.split("=")[1];return e||""}getStatistics(){const e={compressions:{total:this.metrics.compressions.size,completed:0,failed:0,inProgress:0},errors:{total:this.metrics.errors.length,byType:{}},performance:{averageDuration:0,averageCompressionRatio:0,averageUserSatisfaction:0},device:this.metrics.deviceMetrics,network:this.getCurrentNetworkInfo()};let t=0,s=0,i=0,o=0;return this.metrics.compressions.forEach((n=>{switch(n.status){case"completed":e.compressions.completed++,n.performance.actualDuration&&(t+=n.performance.actualDuration,o++),n.performance.compressionRatio&&(s+=n.performance.compressionRatio),n.userExperience?.userSatisfaction&&(i+=n.userExperience.userSatisfaction);break;case"failed":case"error":e.compressions.failed++;break;default:e.compressions.inProgress++}})),o>0&&(e.performance.averageDuration=t/o,e.performance.averageCompressionRatio=s/o,e.performance.averageUserSatisfaction=i/o),this.metrics.errors.forEach((t=>{const s=t.error?.name||"Unknown";e.errors.byType[s]=(e.errors.byType[s]||0)+1})),e}getDetailedMetrics(){return{compressions:Array.from(this.metrics.compressions.values()),errors:this.metrics.errors,performance:this.metrics.performance,userSessions:Array.from(this.metrics.userSessions.values()),deviceMetrics:this.metrics.deviceMetrics,networkMetrics:this.metrics.networkMetrics,statistics:this.getStatistics()}}cleanup(){this.monitoring=!1,this.flushTimer&&clearInterval(this.flushTimer),this.flushMetrics(!0),console.log("Compression monitoring cleaned up")}}},772:()=>{window.CompressionFeatureFlags=class{constructor(){this.flags=new Map,this.userSegments=new Set,this.experiments=new Map,this.analytics=[],this.initializeDefaultFlags(),this.loadUserSegments(),this.setupAnalytics()}initializeDefaultFlags(){this.flags.set("compression_enabled",{enabled:!0,rolloutPercentage:100,segments:["all"],conditions:{minBrowserVersion:{chrome:80,firefox:75,safari:13},deviceTypes:["desktop","mobile","tablet"],excludeUserAgents:[]},lastUpdated:Date.now()}),this.flags.set("advanced_compression",{enabled:!0,rolloutPercentage:80,segments:["beta_testers","power_users"],conditions:{minMemory:4,minCpuCores:4,excludeLowEndDevices:!0},lastUpdated:Date.now()}),this.flags.set("mobile_optimizations",{enabled:!0,rolloutPercentage:100,segments:["mobile_users"],conditions:{deviceTypes:["mobile"],minBatteryLevel:.2,allowThermalThrottling:!1},lastUpdated:Date.now()}),this.flags.set("emergency_bypass",{enabled:!0,rolloutPercentage:100,segments:["all"],conditions:{medicalContext:["emergency","urgent"]},lastUpdated:Date.now()}),this.flags.set("experimental_codecs",{enabled:!1,rolloutPercentage:5,segments:["beta_testers"],conditions:{browserSupport:["chrome","edge"],minVersion:{chrome:90,edge:90}},lastUpdated:Date.now()}),this.flags.set("compression_ui_v2",{enabled:!1,rolloutPercentage:50,segments:["ab_test_group_a"],abTest:{name:"compression_ui_test",variants:["v1","v2"],allocation:{v1:50,v2:50}},lastUpdated:Date.now()})}loadUserSegments(){this.userSegments.add("all"),this.isMobileDevice()?this.userSegments.add("mobile_users"):this.userSegments.add("desktop_users"),this.isHighEndDevice()?this.userSegments.add("power_users"):this.isLowEndDevice()&&this.userSegments.add("limited_users"),this.isBetaTester()&&this.userSegments.add("beta_testers"),this.assignABTestGroups(),console.log("User segments:",Array.from(this.userSegments))}setupAnalytics(){this.analyticsEnabled=!0,setInterval((()=>{this.sendAnalytics()}),3e5),window.addEventListener("beforeunload",(()=>{this.sendAnalytics(!0)}))}isEnabled(e,t={}){const s=this.flags.get(e);return s?s.enabled?this.checkRolloutPercentage(e,s.rolloutPercentage)?this.checkUserSegments(s.segments)?this.checkConditions(s.conditions,t)?(this.logFlagEvaluation(e,!0,"enabled"),!0):(this.logFlagEvaluation(e,!1,"conditions_not_met"),!1):(this.logFlagEvaluation(e,!1,"user_segments"),!1):(this.logFlagEvaluation(e,!1,"rollout_percentage"),!1):(this.logFlagEvaluation(e,!1,"globally_disabled"),!1):(this.logFlagEvaluation(e,!1,"flag_not_found"),!1)}getVariant(e,t={}){const s=this.flags.get(e);if(!s||!s.abTest)return null;if(!this.isEnabled(e,t))return null;const i=this.getUserId(),o=this.hashString(i+e)%100;let n=0;for(const[t,i]of Object.entries(s.abTest.allocation))if(n+=i,o<n)return this.logVariantAssignment(e,t),t;return null}checkRolloutPercentage(e,t){if(t>=100)return!0;const s=this.getUserId();return this.hashString(s+e)%100<t}checkUserSegments(e){return!e||0===e.length||e.some((e=>this.userSegments.has(e)||"all"===e))}checkConditions(e,t){if(!e)return!0;if(e.minBrowserVersion&&!this.checkBrowserVersion(e.minBrowserVersion))return!1;if(e.deviceTypes&&!this.checkDeviceType(e.deviceTypes))return!1;if(e.minMemory&&!this.checkMinMemory(e.minMemory))return!1;if(e.minCpuCores&&!this.checkMinCpuCores(e.minCpuCores))return!1;if(e.minBatteryLevel&&!this.checkMinBatteryLevel(e.minBatteryLevel))return!1;if(e.medicalContext&&t.medicalPriority&&!e.medicalContext.includes(t.medicalPriority))return!1;if(e.excludeLowEndDevices&&this.isLowEndDevice())return!1;if(e.excludeUserAgents){const t=navigator.userAgent.toLowerCase();if(e.excludeUserAgents.some((e=>t.includes(e.toLowerCase()))))return!1}return!0}isMobileDevice(){const e=navigator.userAgent.toLowerCase();return/mobile|android|iphone|ipad|ipod/.test(e)||"ontouchstart"in window&&window.screen.width<=768}isHighEndDevice(){return navigator.hardwareConcurrency>=8&&navigator.deviceMemory>=8}isLowEndDevice(){return navigator.hardwareConcurrency<=2||navigator.deviceMemory<=2}isBetaTester(){return new URLSearchParams(window.location.search).has("beta")||"true"===localStorage.getItem("beta_tester")}checkBrowserVersion(e){const t=navigator.userAgent.toLowerCase();for(const[s,i]of Object.entries(e))if(t.includes(s))return!0;return!1}checkDeviceType(e){return!!e.includes("all")||!(!this.isMobileDevice()||!e.includes("mobile"))||!(this.isMobileDevice()||!e.includes("desktop"))}checkMinMemory(e){return!navigator.deviceMemory||navigator.deviceMemory>=e}checkMinCpuCores(e){return!navigator.hardwareConcurrency||navigator.hardwareConcurrency>=e}async checkMinBatteryLevel(e){try{if("getBattery"in navigator){const t=await navigator.getBattery();return t.charging||t.level>=e}}catch(e){return!0}return!0}assignABTestGroups(){const e=this.getUserId();this.hashString(e)%2==0?this.userSegments.add("ab_test_group_a"):this.userSegments.add("ab_test_group_b")}getUserId(){let e=sessionStorage.getItem("compression_user_id");if(!e){const t=[navigator.userAgent,navigator.language,screen.width+"x"+screen.height,(new Date).getTimezoneOffset(),navigator.hardwareConcurrency,navigator.deviceMemory].join("|");e=this.hashString(t).toString(),sessionStorage.setItem("compression_user_id",e)}return e}hashString(e){let t=0;for(let s=0;s<e.length;s++)t=(t<<5)-t+e.charCodeAt(s),t&=t;return Math.abs(t)}logFlagEvaluation(e,t,s){if(!this.analyticsEnabled)return;const i={type:"flag_evaluation",flagName:e,enabled:t,reason:s,timestamp:Date.now(),userId:this.getUserId(),userSegments:Array.from(this.userSegments)};this.analytics.push(i),this.analytics.length>1e3&&this.analytics.shift()}logVariantAssignment(e,t){if(!this.analyticsEnabled)return;const s={type:"variant_assignment",flagName:e,variant:t,timestamp:Date.now(),userId:this.getUserId()};this.analytics.push(s)}trackFeatureUsage(e,t,s={}){if(!this.analyticsEnabled)return;const i={type:"feature_usage",featureName:e,action:t,metadata:s,timestamp:Date.now(),userId:this.getUserId()};this.analytics.push(i)}sendAnalytics(e=!1){if(!this.analyticsEnabled||0===this.analytics.length)return;const t={userId:this.getUserId(),userSegments:Array.from(this.userSegments),events:this.analytics.splice(0),timestamp:Date.now(),deviceInfo:{userAgent:navigator.userAgent,hardwareConcurrency:navigator.hardwareConcurrency,deviceMemory:navigator.deviceMemory,platform:navigator.platform}};e?"sendBeacon"in navigator&&navigator.sendBeacon("/api/compression-analytics/",JSON.stringify(t)):fetch("/api/compression-analytics/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":this.getCSRFToken()},body:JSON.stringify(t)}).catch((e=>{console.warn("Failed to send compression analytics:",e)})),console.log("Analytics sent:",t.events.length,"events")}getCSRFToken(){const e=document.cookie.split("; ").find((e=>e.startsWith("csrftoken=")))?.split("=")[1];return e||""}emergencyDisable(e="manual"){console.warn("Emergency disable activated:",e),this.flags.forEach(((e,t)=>{(t.includes("compression")||t.includes("advanced"))&&(e.enabled=!1)})),this.trackFeatureUsage("emergency_disable","activated",{reason:e}),window.dispatchEvent(new CustomEvent("compression-emergency-disable",{detail:{reason:e}}))}getDebugInfo(){return{userSegments:Array.from(this.userSegments),flags:Object.fromEntries(this.flags),userId:this.getUserId(),deviceInfo:{isMobile:this.isMobileDevice(),isHighEnd:this.isHighEndDevice(),isLowEnd:this.isLowEndDevice(),cpuCores:navigator.hardwareConcurrency,memory:navigator.deviceMemory},recentAnalytics:this.analytics.slice(-10)}}async updateFlags(){try{const e=await fetch("/api/compression-feature-flags/"),t=await e.json();for(const[e,s]of Object.entries(t))this.flags.set(e,{...this.flags.get(e),...s,lastUpdated:Date.now()});console.log("Feature flags updated from server")}catch(e){console.warn("Failed to update feature flags:",e)}}}},777:()=>{window.MedicalCompressionUI=class{constructor(e,t){this.container=e,this.compressionManager=t,this.presetManager=new MedicalPresetManager,this.qualityValidator=new MedicalQualityValidator,this.metadataManager=new MedicalMetadataManager,this.currentFile=null,this.selectedPreset=null,this.contentType="documentation",this.compressionInProgress=!1,this.elements={},this.init()}init(){this.createUI(),this.bindEvents(),this.updateDeviceCapabilities()}createUI(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="medical-compression-panel" style="display: none;">\n                <div class="compression-header">\n                    <h6 class="mb-3">\n                        <i class="fas fa-compress-alt text-primary"></i>\n                        Compressão de Vídeo Médico\n                    </h6>\n                    <div class="compression-toggle">\n                        <div class="form-check form-switch">\n                            <input class="form-check-input" type="checkbox" id="enableCompression">\n                            <label class="form-check-label" for="enableCompression">\n                                Ativar compressão\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="compression-options" style="display: none;">\n                    \x3c!-- Content Type Selection --\x3e\n                    <div class="row mb-3">\n                        <div class="col-md-6">\n                            <label class="form-label">Tipo de Conteúdo</label>\n                            <select class="form-select" id="contentType">\n                                <option value="documentation">Documentação Geral</option>\n                                <option value="diagnostic">Diagnóstico</option>\n                                <option value="consultation">Consulta</option>\n                                <option value="emergency">Emergência</option>\n                            </select>\n                            <div class="form-text">\n                                <span id="contentTypeHelp">Documentação médica padrão</span>\n                            </div>\n                        </div>\n                        <div class="col-md-6">\n                            <label class="form-label">Qualidade</label>\n                            <select class="form-select" id="qualityPreset">\n                                \x3c!-- Options populated dynamically --\x3e\n                            </select>\n                            <div class="form-text">\n                                <span id="qualityHelp">Carregando presets...</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    \x3c!-- Compression Estimates --\x3e\n                    <div class="compression-estimates mb-3" style="display: none;">\n                        <div class="row">\n                            <div class="col-md-4">\n                                <div class="estimate-card">\n                                    <div class="estimate-label">Tempo Estimado</div>\n                                    <div class="estimate-value" id="estimatedTime">-</div>\n                                </div>\n                            </div>\n                            <div class="col-md-4">\n                                <div class="estimate-card">\n                                    <div class="estimate-label">Redução de Tamanho</div>\n                                    <div class="estimate-value" id="sizeReduction">-</div>\n                                </div>\n                            </div>\n                            <div class="col-md-4">\n                                <div class="estimate-card">\n                                    <div class="estimate-label">Qualidade</div>\n                                    <div class="estimate-value" id="qualityScore">-</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    \x3c!-- Medical Compliance Info --\x3e\n                    <div class="compliance-info">\n                        <div class="alert alert-info alert-sm">\n                            <i class="fas fa-shield-alt"></i>\n                            <strong>Conformidade Médica:</strong>\n                            <span id="complianceStatus">Verificando...</span>\n                        </div>\n                    </div>\n\n                    \x3c!-- Emergency Bypass --\x3e\n                    <div class="emergency-bypass">\n                        <button type="button" class="btn btn-link btn-sm text-danger" id="emergencyBypass">\n                            <i class="fas fa-exclamation-triangle"></i>\n                            Pular compressão (Emergência)\n                        </button>\n                    </div>\n                </div>\n\n                \x3c!-- Compression Progress --\x3e\n                <div class="compression-progress" style="display: none;">\n                    <div class="progress-header">\n                        <h6>Comprimindo vídeo...</h6>\n                        <button type="button" class="btn btn-sm btn-outline-secondary" id="cancelCompression">\n                            Cancelar\n                        </button>\n                    </div>\n                    <div class="progress mb-2">\n                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>\n                    </div>\n                    <div class="progress-details">\n                        <small class="text-muted">\n                            <span id="progressStatus">Iniciando...</span>\n                            <span class="float-end" id="progressTime">0s</span>\n                        </small>\n                    </div>\n                    <div class="progress-actions mt-2">\n                        <button type="button" class="btn btn-sm btn-warning" id="fallbackToDirectUpload" style="display: none;">\n                            <i class="fas fa-upload"></i>\n                            Enviar sem compressão\n                        </button>\n                    </div>\n                </div>\n\n                \x3c!-- Quality Validation Results --\x3e\n                <div class="quality-validation" style="display: none;">\n                    <div class="validation-header">\n                        <h6>Validação de Qualidade</h6>\n                    </div>\n                    <div class="validation-results" id="validationResults">\n                        \x3c!-- Populated dynamically --\x3e\n                    </div>\n                </div>\n            </div>\n        '),this.cacheElements()}cacheElements(){this.elements={panel:this.container.querySelector(".medical-compression-panel"),toggle:this.container.querySelector("#enableCompression"),options:this.container.querySelector(".compression-options"),contentType:this.container.querySelector("#contentType"),qualityPreset:this.container.querySelector("#qualityPreset"),estimates:this.container.querySelector(".compression-estimates"),progress:this.container.querySelector(".compression-progress"),progressBar:this.container.querySelector(".progress-bar"),progressStatus:this.container.querySelector("#progressStatus"),progressTime:this.container.querySelector("#progressTime"),validation:this.container.querySelector(".quality-validation"),emergencyBypass:this.container.querySelector("#emergencyBypass"),cancelCompression:this.container.querySelector("#cancelCompression"),fallbackUpload:this.container.querySelector("#fallbackToDirectUpload")}}bindEvents(){this.elements.toggle.addEventListener("change",(e=>{this.toggleCompression(e.target.checked)})),this.elements.contentType.addEventListener("change",(e=>{this.updateContentType(e.target.value)})),this.elements.qualityPreset.addEventListener("change",(e=>{this.updateQualityPreset(e.target.value)})),this.elements.emergencyBypass.addEventListener("click",(()=>{this.triggerEmergencyBypass()})),this.elements.cancelCompression.addEventListener("click",(()=>{this.cancelCompression()})),this.elements.fallbackUpload.addEventListener("click",(()=>{this.fallbackToDirectUpload()}))}showForFile(e){this.currentFile=e,this.elements.panel.style.display="block",this.updateEstimates(),this.checkMedicalCompliance()}hide(){this.elements.panel.style.display="none",this.currentFile=null,this.reset()}toggleCompression(e){e?(this.elements.options.style.display="block",this.populateQualityPresets()):this.elements.options.style.display="none"}updateContentType(e){this.contentType=e,this.updateContentTypeHelp(),this.populateQualityPresets(),this.updateEstimates(),this.checkMedicalCompliance()}updateQualityPreset(e){this.selectedPreset=e,this.updateQualityHelp(),this.updateEstimates()}updateDeviceCapabilities(){const e=this.compressionManager.getCapabilities();if(!e?.supported)return void(this.elements.panel.style.display="none");const t=e.score,s=this.getDeviceClass(t);this.updateUIForDeviceClass(s)}populateQualityPresets(){const e=this.compressionManager.getCapabilities(),t=this.presetManager.getPresetsForDevice(e).filter((e=>"diagnostic"!==this.contentType||e.medicalSettings.diagnosticSafe));this.elements.qualityPreset.innerHTML="",t.forEach((e=>{const t=document.createElement("option");t.value=e.key,t.textContent=e.name,this.elements.qualityPreset.appendChild(t)}));const s=this.qualityValidator.getRecommendedPresetForMedicalContent(this.contentType,this.currentFile?.size||0,e);s&&this.elements.qualityPreset.querySelector(`option[value="${s}"]`)&&(this.elements.qualityPreset.value=s,this.selectedPreset=s)}updateEstimates(){if(!this.currentFile||!this.selectedPreset)return void(this.elements.estimates.style.display="none");const e=this.compressionManager.estimateCompression(this.currentFile,this.selectedPreset);this.container.querySelector("#estimatedTime").textContent=`${e.estimatedTime}s`,this.container.querySelector("#sizeReduction").textContent=`${(100*e.sizeReduction).toFixed(0)}%`;const t=this.qualityValidator.getPresetQualityScore(this.selectedPreset);this.container.querySelector("#qualityScore").textContent=this.getQualityLabel(t),this.elements.estimates.style.display="block"}checkMedicalCompliance(){if(!this.presetManager.getPreset(this.selectedPreset))return;const e=this.presetManager.validatePresetForMedicalUse(this.selectedPreset,this.contentType),t=this.container.querySelector("#complianceStatus");e.valid?e.warnings.length>0?t.innerHTML=`\n                    <span class="text-warning">Conforme com avisos</span>\n                    <ul class="mt-1 mb-0">\n                        ${e.warnings.map((e=>`<li>${e}</li>`)).join("")}\n                    </ul>\n                `:t.innerHTML='<span class="text-success">Totalmente conforme</span>':t.innerHTML=`<span class="text-danger">Não conforme: ${e.reason}</span>`}async startCompression(){if(!this.currentFile||!this.selectedPreset)throw new Error("File and preset must be selected");this.compressionInProgress=!0,this.showProgressUI();try{return this.compressionManager.onProgress=e=>{this.updateProgress(e)},this.compressionManager.onComplete=e=>{this.handleCompressionComplete(e)},this.compressionManager.onError=e=>{this.handleCompressionError(e)},await this.compressionManager.compressVideo(this.currentFile,{preset:this.selectedPreset,contentType:this.contentType})}catch(e){throw this.handleCompressionError(e),e}}showProgressUI(){this.elements.options.style.display="none",this.elements.progress.style.display="block",this.startProgressTimer()}updateProgress(e){const t=Math.round(100*e.progress);this.elements.progressBar.style.width=`${t}%`,this.elements.progressBar.textContent=`${t}%`,e.stage&&(this.elements.progressStatus.textContent=this.getProgressMessage(e.stage))}async handleCompressionComplete(e){this.compressionInProgress=!1,this.hideProgressUI();const t=await this.qualityValidator.validateCompressedVideo(this.currentFile,e.compressedFile,this.selectedPreset);this.showValidationResults(t),t.passed?this.triggerCompressionSuccess(e.compressedFile,t):this.showQualityWarnings(t)}handleCompressionError(e){this.compressionInProgress=!1,this.hideProgressUI(),this.elements.fallbackUpload.style.display="block",this.showErrorMessage(e.message)}triggerEmergencyBypass(){confirm("Tem certeza que deseja pular a compressão?\n\nO arquivo será enviado sem compressão, o que pode resultar em upload mais lento.")&&this.triggerDirectUpload()}cancelCompression(){this.compressionInProgress&&(this.compressionManager.cancelCompression(),this.compressionInProgress=!1,this.hideProgressUI(),this.elements.options.style.display="block")}fallbackToDirectUpload(){this.triggerDirectUpload()}reset(){this.compressionInProgress=!1,this.elements.options.style.display="none",this.elements.progress.style.display="none",this.elements.validation.style.display="none",this.elements.toggle.checked=!1,this.clearProgressTimer()}getDeviceClass(e){return e>=80?"high-end":e>=60?"mid-range":"low-end"}updateUIForDeviceClass(e){const t=this.elements.panel;t.classList.remove("device-high-end","device-mid-range","device-low-end"),t.classList.add(`device-${e}`)}updateContentTypeHelp(){this.container.querySelector("#contentTypeHelp").textContent={documentation:"Documentação médica padrão",diagnostic:"Conteúdo para diagnóstico - máxima qualidade",consultation:"Compartilhamento para consulta",emergency:"Upload rápido para emergências"}[this.contentType]}updateQualityHelp(){const e=this.presetManager.getPreset(this.selectedPreset);e&&(this.container.querySelector("#qualityHelp").textContent=e.description)}getQualityLabel(e){return e>=.9?"Excelente":e>=.8?"Muito Boa":e>=.7?"Boa":e>=.6?"Adequada":"Básica"}getProgressMessage(e){return{analyzing:"Analisando arquivo...",compressing:"Comprimindo vídeo...",finalizing:"Finalizando...",validating:"Validando qualidade..."}[e]||"Processando..."}startProgressTimer(){this.progressStartTime=Date.now(),this.progressTimer=setInterval((()=>{const e=Math.round((Date.now()-this.progressStartTime)/1e3);this.elements.progressTime.textContent=`${e}s`}),1e3)}clearProgressTimer(){this.progressTimer&&(clearInterval(this.progressTimer),this.progressTimer=null)}hideProgressUI(){this.elements.progress.style.display="none",this.elements.fallbackUpload.style.display="none",this.clearProgressTimer()}showValidationResults(e){this.elements.validation.style.display="block";const t=this.container.querySelector("#validationResults");let s="";e.passed?s+='<div class="alert alert-success alert-sm">Qualidade validada com sucesso!</div>':s+='<div class="alert alert-warning alert-sm">Avisos de qualidade encontrados</div>',e.warnings.length>0&&(s+='<div class="mt-2"><strong>Avisos:</strong><ul>',e.warnings.forEach((e=>{s+=`<li>${e.message}</li>`})),s+="</ul></div>"),e.recommendations.length>0&&(s+='<div class="mt-2"><strong>Recomendações:</strong><ul>',e.recommendations.forEach((e=>{s+=`<li>${e}</li>`})),s+="</ul></div>"),t.innerHTML=s}showQualityWarnings(e){confirm("Avisos de qualidade detectados:\n\n"+e.warnings.map((e=>`• ${e.message}`)).join("\n")+"\n\nDeseja continuar com o arquivo comprimido?")?this.triggerCompressionSuccess(null,e):this.elements.options.style.display="block"}showErrorMessage(e){const t=document.createElement("div");t.className="alert alert-danger alert-sm",t.innerHTML=`<strong>Erro na compressão:</strong> ${e}`,this.elements.progress.appendChild(t),setTimeout((()=>{t.remove()}),5e3)}triggerCompressionSuccess(e,t){const s=new CustomEvent("compressionComplete",{detail:{originalFile:this.currentFile,compressedFile:e,validation:t,preset:this.selectedPreset,contentType:this.contentType}});this.container.dispatchEvent(s)}triggerDirectUpload(){const e=new CustomEvent("directUpload",{detail:{file:this.currentFile,reason:"compression_bypassed"}});this.container.dispatchEvent(e)}}},818:()=>{window.CompressionErrorHandler=class{constructor(){this.errorHistory=[],this.recoveryStrategies=new Map,this.interruptions=new Map,this.medicalContext=null,this.setupRecoveryStrategies(),this.setupMedicalWorkflowHandlers()}async handleError(e,t={}){const s=this._analyzeError(e,t);if(this._logError(s),this._shouldAttemptRecovery(s)){const e=await this._attemptRecovery(s);if(e.success)return e}return this._createFallbackResponse(s)}setupRecoveryStrategies(){this.recoveryStrategies.set("network_interruption",{retryable:!0,maxRetries:3,retryDelay:2e3,strategy:async e=>await this._retryWithDelay(e)}),this.recoveryStrategies.set("memory_exhaustion",{retryable:!0,maxRetries:2,retryDelay:1e3,strategy:async e=>await this._retryWithLowerSettings(e)}),this.recoveryStrategies.set("device_overheating",{retryable:!0,maxRetries:1,retryDelay:1e4,strategy:async e=>await this._retryAfterCooling(e)}),this.recoveryStrategies.set("tab_backgrounded",{retryable:!0,maxRetries:2,retryDelay:1e3,strategy:async e=>await this._retryInForeground(e)}),this.recoveryStrategies.set("ffmpeg_load_failed",{retryable:!1,maxRetries:0,strategy:async e=>({success:!1,reason:"ffmpeg_unavailable"})}),this.recoveryStrategies.set("compression_timeout",{retryable:!0,maxRetries:1,retryDelay:500,strategy:async e=>await this._retryWithFasterSettings(e)})}_analyzeError(e,t){const s={type:"unknown",message:e.message||"Unknown error",timestamp:Date.now(),context:t,recoverable:!1,priority:"medium"},i=e.message.toLowerCase();return i.includes("network")||i.includes("fetch")?(s.type="network_interruption",s.recoverable=!0,s.priority="high"):i.includes("memory")||i.includes("out of memory")?(s.type="memory_exhaustion",s.recoverable=!0,s.priority="high"):i.includes("timeout")?(s.type="compression_timeout",s.recoverable=!0,s.priority="medium"):i.includes("background")||i.includes("visibility")?(s.type="tab_backgrounded",s.recoverable=!0,s.priority="low"):i.includes("ffmpeg")||i.includes("wasm")?(s.type="ffmpeg_load_failed",s.recoverable=!1,s.priority="critical"):(i.includes("thermal")||i.includes("overheating"))&&(s.type="device_overheating",s.recoverable=!0,s.priority="high"),this._isLowBattery()&&(s.deviceConditions={lowBattery:!0},s.priority="high"),this._isMemoryPressure()&&(s.deviceConditions={memoryPressure:!0},s.priority="high"),s}_shouldAttemptRecovery(e){const t=this.errorHistory.filter((e=>Date.now()-e.timestamp<3e5));if(t.length>=5)return!1;if(!e.recoverable)return!1;const s=t.filter((t=>t.type===e.type)),i=this.recoveryStrategies.get(e.type);return s.length<(i?.maxRetries||0)}async _attemptRecovery(e){const t=this.recoveryStrategies.get(e.type);if(!t)return{success:!1,reason:"no_strategy"};try{return t.retryDelay&&await new Promise((e=>setTimeout(e,t.retryDelay))),await t.strategy(e.context)}catch(e){return{success:!1,reason:"recovery_failed",error:e.message}}}async _retryWithDelay(e){return{success:!0,action:"retry",modifications:{}}}async _retryWithLowerSettings(e){return{success:!0,action:"retry",modifications:{preset:"mobile-optimized",maxOutputSize:.95*e.originalFile?.size,chunkSize:Math.min(e.chunkSize||1/0,26214400)}}}async _retryAfterCooling(e){return await new Promise((e=>setTimeout(e,3e4))),{success:!0,action:"retry",modifications:{preset:"mobile-optimized",priority:"background"}}}async _retryInForeground(e){return document.hidden?(this._notifyUserFocusRequired(),{success:!1,reason:"tab_not_focused"}):{success:!0,action:"retry",modifications:{}}}async _retryWithFasterSettings(e){return{success:!0,action:"retry",modifications:{preset:"mobile-optimized",priority:"speed",maxCompressionTime:3e4}}}_createFallbackResponse(e){const t={success:!1,fallback:!0,errorType:e.type,userMessage:this._getUserFriendlyMessage(e),recommendations:this._getRecommendations(e),techDetails:e.message};switch(e.type){case"network_interruption":t.action="retry_later",t.userMessage="Falha na conexão durante a compressão. Tente novamente quando a conexão estiver estável.";break;case"memory_exhaustion":t.action="direct_upload",t.userMessage="Memória insuficiente para compressão. O arquivo será enviado diretamente.";break;case"device_overheating":t.action="wait_and_retry",t.userMessage="Dispositivo aquecido. Aguarde alguns minutos antes de tentar novamente.";break;case"ffmpeg_load_failed":t.action="direct_upload",t.userMessage="Compressão não disponível neste dispositivo. O arquivo será enviado diretamente.";break;default:t.action="direct_upload",t.userMessage="Não foi possível comprimir o vídeo. O arquivo será enviado diretamente."}return t}_getUserFriendlyMessage(e){const t={network_interruption:"Problema de conexão durante a compressão",memory_exhaustion:"Memória insuficiente para processar o arquivo",compression_timeout:"Compressão demorou mais que o esperado",tab_backgrounded:"Compressão pausada - mantenha a aba ativa",ffmpeg_load_failed:"Funcionalidade de compressão não disponível",device_overheating:"Dispositivo aquecido - processamento pausado",unknown:"Erro inesperado durante a compressão"};return t[e.type]||t.unknown}_getRecommendations(e){return{network_interruption:["Verifique sua conexão com a internet","Tente novamente quando a conexão estiver estável","Considere usar uma rede mais confiável"],memory_exhaustion:["Feche outras abas ou aplicativos","Tente com um arquivo menor","Use o envio direto para arquivos grandes"],compression_timeout:["Tente com um arquivo menor","Use configurações de compressão mais rápidas","Considere o envio direto"],device_overheating:["Aguarde o dispositivo esfriar","Remova o dispositivo de fontes de calor","Tente novamente em alguns minutos"],ffmpeg_load_failed:["Atualize seu navegador","Tente em outro dispositivo","Use o envio direto"]}[e.type]||["Tente o envio direto do arquivo"]}async _isLowBattery(){try{if("getBattery"in navigator){const e=await navigator.getBattery();return!e.charging&&e.level<.2}}catch(e){console.warn("Battery API unavailable:",e.message)}return!1}_isThermalThrottling(){try{const e=performance.now();if(performance.timing.navigationStart,this._lastPerformanceCheck){const t=Date.now()-this._lastPerformanceCheckTime,s=e-this._lastPerformanceCheck;if(Math.abs(t-s)>1e3)return!0}return this._lastPerformanceCheck=e,this._lastPerformanceCheckTime=Date.now(),!1}catch(e){return!1}}_isMemoryPressure(){if("memory"in performance){const e=performance.memory;return e.usedJSHeapSize/e.jsHeapSizeLimit>.8}return!1}_notifyUserFocusRequired(){console.log("User focus required for compression to continue")}_logError(e){this.errorHistory.push(e);const t=Date.now()-864e5;this.errorHistory=this.errorHistory.filter((e=>e.timestamp>t)),console.warn("Compression error:",e),this._sendToAnalytics(e)}_sendToAnalytics(e){console.log("Analytics: Compression error",{type:e.type,priority:e.priority,recoverable:e.recoverable,userAgent:navigator.userAgent.substring(0,100)})}getErrorStats(){const e={totalErrors:this.errorHistory.length,errorsByType:{},recentErrors:0,criticalErrors:0},t=Date.now()-36e5;return this.errorHistory.forEach((s=>{e.errorsByType[s.type]=(e.errorsByType[s.type]||0)+1,s.timestamp>t&&e.recentErrors++,"critical"===s.priority&&e.criticalErrors++})),e}setupMedicalWorkflowHandlers(){this.emergencyBypass={enabled:!0,reason:null,timestamp:null},this.medicalPriorities={emergency:{timeout:15e3,skipCompression:!0},urgent:{timeout:3e4,fallbackQuick:!0},routine:{timeout:6e4,allowRetries:!0}},document.addEventListener("visibilitychange",(()=>{this._handleVisibilityChange()})),window.addEventListener("beforeunload",(e=>{this._saveCompressionState()}))}setMedicalContext(e){this.medicalContext={priority:e.priority||"routine",patientId:e.patientId,emergencyCase:e.emergencyCase||!1,workflowStep:e.workflowStep||"documentation"}}shouldSkipCompression(){return!!(this.medicalContext&&("emergency"===this.medicalContext.priority||this.medicalContext.emergencyCase||this.emergencyBypass.enabled&&this.emergencyBypass.reason))}activateEmergencyBypass(e="user_requested"){this.emergencyBypass={enabled:!0,reason:e,timestamp:Date.now()},console.log("Emergency bypass activated:",e),this._showMedicalEmergencyMessage()}_handleVisibilityChange(){document.hidden?this._saveCompressionState():this._checkResumedCompressions()}_saveCompressionState(){const e=this._getActiveCompressions();if(e.length>0){const t={compressions:e,timestamp:Date.now(),medicalContext:this.medicalContext};try{sessionStorage.setItem("videoCompressionState",JSON.stringify(t))}catch(e){console.warn("Failed to save compression state:",e)}}}_checkResumedCompressions(){try{const e=sessionStorage.getItem("videoCompressionState");if(!e)return;const t=JSON.parse(e);Date.now()-t.timestamp<3e5?this._offerCompressionResume(t):sessionStorage.removeItem("videoCompressionState")}catch(e){console.warn("Failed to check resumed compressions:",e)}}_offerCompressionResume(e){confirm("Compressão de vídeo foi interrompida. Deseja continuar onde parou?")?this._resumeCompressions(e.compressions):this._offerDirectUpload(e.compressions),sessionStorage.removeItem("videoCompressionState")}async _resumeCompressions(e){for(const t of e)try{await this._restartCompression(t)}catch(e){console.warn("Failed to resume compression:",e),this._fallbackToDirectUpload(t)}}_getActiveCompressions(){return[]}async _restartCompression(e){console.log("Restarting compression:",e.fileName)}_offerDirectUpload(e){const t=e.length;confirm(1===t?"Enviar arquivo diretamente sem compressão?":`Enviar ${t} arquivos diretamente sem compressão?`)&&e.forEach((e=>{this._fallbackToDirectUpload(e)}))}_fallbackToDirectUpload(e){console.log("Falling back to direct upload:",e.fileName);const t=new CustomEvent("compressionFallback",{detail:{file:e.file,reason:"user_choice"}});document.dispatchEvent(t)}_showMedicalEmergencyMessage(){const e="Modo de emergência ativado. Arquivos serão enviados diretamente sem compressão para agilizar o processo.";"function"==typeof window.showMedicalNotification?window.showMedicalNotification(e,"warning"):console.warn("Medical Emergency Mode:",e)}_analyzeError(e,t){const s={type:"unknown",message:e.message||"Unknown error",timestamp:Date.now(),context:t,recoverable:!1,priority:"medium",medicalImpact:"low"},i=e.message.toLowerCase();return i.includes("network")||i.includes("fetch")?(s.type="network_interruption",s.recoverable=!0,s.priority="emergency"===this.medicalContext?.priority?"critical":"high",s.medicalImpact="emergency"===this.medicalContext?.priority?"high":"medium"):i.includes("memory")||i.includes("out of memory")?(s.type="memory_exhaustion",s.recoverable=!0,s.priority="high",s.medicalImpact="medium"):i.includes("timeout")?(s.type="compression_timeout",s.recoverable=!0,s.priority="emergency"===this.medicalContext?.priority?"high":"medium",s.medicalImpact="emergency"===this.medicalContext?.priority?"high":"low"):i.includes("background")||i.includes("visibility")?(s.type="tab_backgrounded",s.recoverable=!0,s.priority="low",s.medicalImpact="low"):i.includes("ffmpeg")||i.includes("wasm")?(s.type="ffmpeg_load_failed",s.recoverable=!1,s.priority="critical",s.medicalImpact="low"):(i.includes("thermal")||i.includes("overheating"))&&(s.type="device_overheating",s.recoverable=!0,s.priority="high",s.medicalImpact="medium"),this._isLowBattery().then((e=>{e&&(s.deviceConditions={lowBattery:!0},s.priority="high",s.medicalImpact="high")})),this._isMemoryPressure()&&(s.deviceConditions={memoryPressure:!0},s.priority="high"),this._isThermalThrottling()&&(s.deviceConditions={thermalThrottling:!0},s.priority="high"),s}_createFallbackResponse(e){const t={success:!1,fallback:!0,errorType:e.type,userMessage:this._getUserFriendlyMessage(e),recommendations:this._getRecommendations(e),techDetails:e.message,medicalWorkflow:{allowDirectUpload:!0,emergencyBypass:this.shouldSkipCompression(),urgencyLevel:this.medicalContext?.priority||"routine"}};if("emergency"===this.medicalContext?.priority||this.medicalContext?.emergencyCase)t.action="direct_upload_immediate",t.userMessage="Caso de emergência detectado. Arquivo será enviado imediatamente sem compressão.",t.medicalWorkflow.skipAllProcessing=!0;else switch(e.type){case"network_interruption":t.action="urgent"===this.medicalContext?.priority?"direct_upload":"retry_later",t.userMessage="urgent"===this.medicalContext?.priority?"Caso urgente: Arquivo será enviado diretamente devido a problema de conexão.":"Falha na conexão durante a compressão. Tente novamente quando a conexão estiver estável.";break;case"memory_exhaustion":t.action="direct_upload",t.userMessage="Memória insuficiente para compressão. O arquivo será enviado diretamente.";break;case"device_overheating":t.action="urgent"===this.medicalContext?.priority?"direct_upload":"wait_and_retry",t.userMessage="urgent"===this.medicalContext?.priority?"Dispositivo aquecido. Enviando diretamente devido à urgência do caso.":"Dispositivo aquecido. Aguarde alguns minutos antes de tentar novamente.";break;case"ffmpeg_load_failed":t.action="direct_upload",t.userMessage="Compressão não disponível neste dispositivo. O arquivo será enviado diretamente.";break;default:t.action="direct_upload",t.userMessage="Não foi possível comprimir o vídeo. O arquivo será enviado diretamente."}return t}clearErrorHistory(){this.errorHistory=[]}cleanup(){this.clearErrorHistory();try{sessionStorage.removeItem("videoCompressionState")}catch(e){console.warn("Failed to clean up compression state:",e)}}}},865:(e,t,s)=>{class i{constructor(){this.ffmpegInstance=null,this.isLoaded=!1,this.isLoading=!1,this.loadPromise=null}async loadFFmpeg(){if(this.isLoaded&&this.ffmpegInstance)return this.ffmpegInstance;if(this.isLoading)return this.loadPromise;this.isLoading=!0;try{return this.loadPromise=this._loadFFmpegModules(),this.ffmpegInstance=await this.loadPromise,this.isLoaded=!0,this.ffmpegInstance}catch(e){throw this.isLoading=!1,this.loadPromise=null,new Error(`Failed to load FFmpeg: ${e.message}`)}}async _loadFFmpegModules(){const{FFmpeg:e}=await s.e(509).then(s.bind(s,502)),{toBlobURL:t}=await s.e(509).then(s.bind(s,166)),i=new e;i.on("log",(({message:e})=>{console.log("[FFmpeg]",e)})),i.on("progress",(({progress:e,time:t})=>{self.postMessage({type:"progress",progress:100*e,time:t})}));const o="https://unpkg.com/@ffmpeg/core@0.12.6/dist/esm";return await i.load({coreURL:await t(`${o}/ffmpeg-core.js`,"text/javascript"),wasmURL:await t(`${o}/ffmpeg-core.wasm`,"application/wasm"),workerURL:await t(`${o}/ffmpeg-core.worker.js`,"text/javascript")}),console.log("FFmpeg loaded successfully"),i}isFFmpegAvailable(){return"undefined"!=typeof WebAssembly&&("undefined"==typeof SharedArrayBuffer&&console.warn("SharedArrayBuffer not available - ffmpeg.wasm may not work"),!0)}getMedicalPresets(){return{"medical-high":{quality:"high",crf:18,preset:"medium",profile:"high",maxBitrate:"8M",description:"High quality for diagnostic content"},"medical-standard":{quality:"standard",crf:23,preset:"medium",profile:"main",maxBitrate:"4M",description:"Balanced quality and file size"},"mobile-optimized":{quality:"optimized",crf:28,preset:"fast",profile:"baseline",maxBitrate:"2M",description:"Fast compression for mobile devices"}}}buildCompressionArgs(e,t,s="medical-standard"){const i=this.getMedicalPresets(),o=i[s]||i["medical-standard"];return["-i",e,"-c:v","libx264","-crf",o.crf.toString(),"-preset",o.preset,"-profile:v",o.profile,"-maxrate",o.maxBitrate,"-bufsize",2*parseInt(o.maxBitrate)+"M","-c:a","aac","-b:a","128k","-movflags","+faststart","-pix_fmt","yuv420p","-colorspace","bt709",t]}async compressVideo(e,t="medical-standard",s=null){if(!this.isFFmpegAvailable())throw new Error("FFmpeg not available on this browser");const i=await this.loadFFmpeg();try{const s=new Uint8Array(await e.arrayBuffer()),o="input."+this._getFileExtension(e.name),n="output.mp4";await i.writeFile(o,s);const r=this.buildCompressionArgs(o,n,t);await i.exec(r);const a=await i.readFile(n),c=new Blob([a],{type:"video/mp4"});return await this._cleanup(i,[o,n]),{success:!0,compressedFile:c,compressionRatio:c.size/e.size,originalSize:e.size,compressedSize:c.size,format:"mp4",preset:t}}catch(t){return console.error("Compression failed:",t),{success:!1,error:t.message,originalFile:e}}}_getFileExtension(e){return e.split(".").pop().toLowerCase()}async _cleanup(e,t){for(const s of t)try{await e.deleteFile(s)}catch(e){console.warn(`Failed to delete ${s}:`,e)}}terminate(){this.ffmpegInstance&&(this.ffmpegInstance.terminate(),this.ffmpegInstance=null,this.isLoaded=!1)}}"undefined"!=typeof window?window.FFmpegDynamicLoader=i:self.FFmpegDynamicLoader=i},918:()=>{window.CompressionControls=class{constructor(e,t={}){this.container=e,this.options={showPresets:!0,showProgress:!0,showEmergencyBypass:!0,medicalContext:null,...t},this.state={compressionEnabled:!1,selectedPreset:"medical-standard",isCompressing:!1,progress:0},this.init()}init(){this.createCompressionToggle(),this.createPresetSelector(),this.createProgressIndicator(),this.createEmergencyBypass(),this.setupEventHandlers()}createCompressionToggle(){const e=`\n            <div class="compression-toggle-container mb-3">\n                <div class="form-check form-switch">\n                    <input class="form-check-input" type="checkbox" role="switch" \n                           id="compressionToggle" ${this.state.compressionEnabled?"checked":""}>\n                    <label class="form-check-label fw-bold" for="compressionToggle">\n                        <i class="bi bi-cpu me-1"></i>\n                        Comprimir vídeo antes do envio\n                    </label>\n                </div>\n                <div class="form-text">\n                    <i class="bi bi-info-circle me-1"></i>\n                    Reduz o tamanho do arquivo mantendo a qualidade médica necessária\n                </div>\n            </div>\n        `;this.container.insertAdjacentHTML("afterbegin",e)}createPresetSelector(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="compression-presets" id="compressionPresets" style="display: none;">\n                <label class="form-label fw-bold mb-2">\n                    <i class="bi bi-sliders me-1"></i>\n                    Qualidade de Compressão\n                </label>\n                <div class="row g-3">\n                    <div class="col-md-4">\n                        <div class="compression-preset-card" data-preset="medical-high">\n                            <div class="preset-header">\n                                <i class="bi bi-award text-primary"></i>\n                                <span class="preset-name">Alta Qualidade</span>\n                            </div>\n                            <div class="preset-description">\n                                Ideal para conteúdo diagnóstico\n                            </div>\n                            <div class="preset-specs">\n                                <small class="text-muted">\n                                    • Qualidade: 95%<br>\n                                    • Redução: ~30%<br>\n                                    • Tempo: +30s\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-4">\n                        <div class="compression-preset-card active" data-preset="medical-standard">\n                            <div class="preset-header">\n                                <i class="bi bi-check-circle text-success"></i>\n                                <span class="preset-name">Padrão Médico</span>\n                            </div>\n                            <div class="preset-description">\n                                Equilibrio entre qualidade e tamanho\n                            </div>\n                            <div class="preset-specs">\n                                <small class="text-muted">\n                                    • Qualidade: 85%<br>\n                                    • Redução: ~50%<br>\n                                    • Tempo: +15s\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-4">\n                        <div class="compression-preset-card" data-preset="mobile-optimized">\n                            <div class="preset-header">\n                                <i class="bi bi-phone text-info"></i>\n                                <span class="preset-name">Otimizado</span>\n                            </div>\n                            <div class="preset-description">\n                                Rápido para dispositivos móveis\n                            </div>\n                            <div class="preset-specs">\n                                <small class="text-muted">\n                                    • Qualidade: 75%<br>\n                                    • Redução: ~70%<br>\n                                    • Tempo: +10s\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ')}createProgressIndicator(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="compression-progress-container" id="compressionProgress" style="display: none;">\n                <div class="progress-header mb-2">\n                    <span class="progress-label">Comprimindo vídeo...</span>\n                    <span class="progress-percentage">0%</span>\n                </div>\n                <div class="progress mb-2" style="height: 8px;">\n                    <div class="progress-bar bg-medical-primary" role="progressbar" \n                         style="width: 0%" id="compressionProgressBar"></div>\n                </div>\n                <div class="progress-details">\n                    <small class="text-muted">\n                        <span id="compressionStage">Inicializando...</span>\n                        <span class="float-end">\n                            <span id="compressionETA">Calculando tempo...</span>\n                        </span>\n                    </small>\n                </div>\n                <div class="progress-actions mt-2">\n                    <button type="button" class="btn btn-sm btn-outline-secondary" id="cancelCompression">\n                        <i class="bi bi-x-circle me-1"></i>\n                        Cancelar e Enviar Direto\n                    </button>\n                </div>\n            </div>\n        ')}createEmergencyBypass(){this.container.insertAdjacentHTML("beforeend",'\n            <div class="emergency-bypass-container mt-3">\n                <button type="button" class="btn btn-outline-danger btn-sm" id="emergencyBypass">\n                    <i class="bi bi-exclamation-triangle me-1"></i>\n                    Emergência: Enviar Imediatamente\n                </button>\n                <div class="form-text">\n                    <small class="text-muted">\n                        Para casos de emergência médica que requerem envio imediato\n                    </small>\n                </div>\n            </div>\n        ')}setupEventHandlers(){const e=document.getElementById("compressionToggle");e?.addEventListener("change",(e=>{this.toggleCompression(e.target.checked)})),document.querySelectorAll(".compression-preset-card").forEach((e=>{e.addEventListener("click",(()=>{this.selectPreset(e.dataset.preset)}))})),document.getElementById("cancelCompression")?.addEventListener("click",(()=>{this.cancelCompression()})),document.getElementById("emergencyBypass")?.addEventListener("click",(()=>{this.activateEmergencyBypass()}))}toggleCompression(e){this.state.compressionEnabled=e;const t=document.getElementById("compressionPresets");e?(t.style.display="block",this.emit("compressionEnabled",{preset:this.state.selectedPreset})):(t.style.display="none",this.emit("compressionDisabled"))}selectPreset(e){document.querySelectorAll(".compression-preset-card").forEach((e=>{e.classList.remove("active")})),document.querySelector(`[data-preset="${e}"]`).classList.add("active"),this.state.selectedPreset=e,this.emit("presetSelected",{preset:e})}updateProgress(e,t,s=null){const i=document.getElementById("compressionProgress"),o=document.getElementById("compressionProgressBar"),n=i.querySelector(".progress-percentage"),r=document.getElementById("compressionStage"),a=document.getElementById("compressionETA");this.state.isCompressing||(i.style.display="block",this.state.isCompressing=!0),o.style.width=`${t}%`,n.textContent=`${Math.round(t)}%`,r.textContent={initializing:"Inicializando compressão...",loading:"Carregando módulos...",processing:"Comprimindo vídeo...",finalizing:"Finalizando...",completed:"Compressão concluída!"}[e]||e,s&&(a.textContent=`${s}s restantes`),this.emit("progressUpdate",{stage:e,progress:t,eta:s})}completeCompression(e){document.getElementById("compressionProgress").style.display="none",this.state.isCompressing=!1;const t=`\n            <div class="alert alert-success" role="alert">\n                <i class="bi bi-check-circle me-2"></i>\n                <strong>Compressão concluída!</strong>\n                Arquivo reduzido em ${Math.round(100*(1-e.compressionRatio))}%\n            </div>\n        `;this.container.insertAdjacentHTML("beforeend",t),this.emit("compressionComplete",e)}handleCompressionError(e){document.getElementById("compressionProgress").style.display="none",this.state.isCompressing=!1;const t=`\n            <div class="alert alert-warning" role="alert">\n                <i class="bi bi-exclamation-triangle me-2"></i>\n                <strong>Falha na compressão:</strong> ${e.message}\n                <div class="mt-2">\n                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="this.parentElement.parentElement.remove()">\n                        <i class="bi bi-upload me-1"></i>\n                        Continuar com envio direto\n                    </button>\n                </div>\n            </div>\n        `;this.container.insertAdjacentHTML("beforeend",t),this.emit("compressionError",e)}cancelCompression(){this.state.isCompressing=!1,document.getElementById("compressionProgress").style.display="none",this.emit("compressionCancelled")}activateEmergencyBypass(){if(confirm("Ativar modo de emergência? O vídeo será enviado imediatamente sem compressão.")){this.state.compressionEnabled=!1,document.getElementById("compressionToggle").checked=!1,document.getElementById("compressionPresets").style.display="none";const e='\n                <div class="alert alert-danger" role="alert">\n                    <i class="bi bi-exclamation-triangle me-2"></i>\n                    <strong>Modo de Emergência Ativado</strong>\n                    O arquivo será enviado imediatamente sem compressão.\n                </div>\n            ';this.container.insertAdjacentHTML("afterbegin",e),this.emit("emergencyBypass")}}getSettings(){return{enabled:this.state.compressionEnabled,preset:this.state.selectedPreset,medicalContext:this.options.medicalContext}}setMedicalContext(e){this.options.medicalContext=e,"emergency"===e.priority?this.activateEmergencyBypass():"urgent"===e.priority&&this.selectPreset("mobile-optimized")}emit(e,t={}){const s=new CustomEvent(`compression:${e}`,{detail:t});this.container.dispatchEvent(s)}}},927:()=>{window.VideoCompressionPhase3=class{constructor(e={}){this.options={enableFeatureFlags:!0,enableMonitoring:!0,enableLazyLoading:!0,medicalContext:null,...e},this.initialized=!1,this.components={},this.compressionQueue=[],this.activeCompressions=new Map,this.init()}async init(){try{console.log("Initializing Phase 3 Video Compression System..."),await this.initializeComponents(),this.options.medicalContext&&this.setMedicalContext(this.options.medicalContext),this.setupEventListeners(),this.options.enableLazyLoading&&await this.preloadCriticalModules(),this.initialized=!0,console.log("Phase 3 Video Compression System initialized successfully"),this.emit("initialized",{timestamp:Date.now()})}catch(e){console.error("Failed to initialize Phase 3 compression:",e),this.handleInitializationError(e)}}async initializeComponents(){if(this.options.enableFeatureFlags&&"undefined"!=typeof CompressionFeatureFlags)try{this.components.featureFlags=new CompressionFeatureFlags,await this.components.featureFlags.updateFlags()}catch(e){console.warn("Failed to initialize CompressionFeatureFlags:",e),this.options.enableFeatureFlags=!1}if(this.options.enableMonitoring&&"undefined"!=typeof CompressionMonitoring)try{this.components.monitoring=new CompressionMonitoring}catch(e){console.warn("Failed to initialize CompressionMonitoring:",e),this.options.enableMonitoring=!1}if("undefined"!=typeof CompressionErrorHandler)try{this.components.errorHandler=new CompressionErrorHandler}catch(e){console.warn("Failed to initialize CompressionErrorHandler:",e)}if("undefined"!=typeof CompressionPerformanceMonitor)try{this.components.performanceMonitor=new CompressionPerformanceMonitor}catch(e){console.warn("Failed to initialize CompressionPerformanceMonitor:",e)}if(this.options.enableLazyLoading&&"undefined"!=typeof CompressionLazyLoader)try{this.components.lazyLoader=new CompressionLazyLoader}catch(e){console.warn("Failed to initialize CompressionLazyLoader:",e),this.options.enableLazyLoading=!1}const e=Object.keys(this.components).length;console.log(`${e} compression components initialized successfully`)}setMedicalContext(e){this.medicalContext=e,this.components.errorHandler&&this.components.errorHandler.setMedicalContext(e),this.components.monitoring&&this.components.monitoring.trackEvent("medical_context_set",e)}async checkCompressionAvailability(e,t={}){const s={available:!1,recommended:!1,reason:"",settings:null,warnings:[]};try{if(!this.isFeatureEnabled("compression_enabled",{medicalPriority:this.medicalContext?.priority}))return s.reason="Feature disabled",s;if(this.components.errorHandler?.shouldSkipCompression())return s.reason="Emergency bypass active",s.available=!0,s;if(this.components.performanceMonitor?.isMobileDevice){const e=this.components.performanceMonitor.shouldAllowCompressionOnMobile();if(!e.allowed)return s.reason=`Mobile limitation: ${e.reason}`,s;e.warning&&s.warnings.push(`Mobile warning: ${e.warning}`)}return this.isValidCompressionFile(e)?this.components.lazyLoader&&!await this.loadCompressionModules(t)?(s.reason="Failed to load compression modules",s):(s.settings=this.getOptimizedSettings(e,t),s.recommended=this.isCompressionRecommended(e,s.settings),s.available=!0,s.reason="Compression available",s):(s.reason="File not suitable for compression",s)}catch(e){return console.error("Error checking compression availability:",e),s.reason=`Error: ${e.message}`,s}}async compressVideo(e,t={}){const s=this.generateCompressionId();try{const i=await this.checkCompressionAvailability(e,t);if(!i.available)throw new Error(`Compression not available: ${i.reason}`);this.components.monitoring&&this.components.monitoring.startCompressionTracking(s,{fileSize:e.size,fileName:e.name,preset:t.preset,medicalContext:this.medicalContext,...t}),this.components.performanceMonitor&&this.components.performanceMonitor.startCompressionTracking(s,{originalFile:e,preset:t.preset}),this.activeCompressions.set(s,{file:e,options:t,startTime:Date.now(),status:"starting"}),this.emit("compressionStarted",{compressionId:s,file:e,options:t});const o=await this.performCompression(s,e,{...t,settings:i.settings});return this.components.monitoring&&this.components.monitoring.completeCompressionTracking(s,o),this.components.performanceMonitor&&this.components.performanceMonitor.completeCompressionTracking(s,o),this.activeCompressions.delete(s),this.emit("compressionCompleted",{compressionId:s,result:o}),{success:!0,compressionId:s,...o}}catch(i){console.error("Compression failed:",i);const o=await this.handleCompressionError(s,i,{file:e,options:t});return o&&o.success?await this.compressVideo(e,{...t,...o.modifications}):(this.components.monitoring&&this.components.monitoring.completeCompressionTracking(s,{success:!1,error:i.message}),this.activeCompressions.delete(s),this.emit("compressionError",{compressionId:s,error:i}),{success:!1,compressionId:s,error:i.message,fallback:o?.fallback||!0})}}async performCompression(e,t,s){try{this.updateCompressionStage(e,"initializing",0),this.updateCompressionStage(e,"loading",20);const i=await this.getCompressionWorker();this.updateCompressionStage(e,"processing",30);const o=await new Promise(((o,n)=>{const r=setTimeout((()=>{n(new Error("Compression timeout"))}),this.getCompressionTimeout(s));i.postMessage({type:"compress",compressionId:e,file:t,settings:s.settings});const a=t=>{const{type:s,data:c}=t.data;switch(s){case"progress":this.updateCompressionStage(e,"processing",30+.6*c.progress);break;case"complete":clearTimeout(r),i.removeEventListener("message",a),this.updateCompressionStage(e,"finalizing",95),o(c);break;case"error":clearTimeout(r),i.removeEventListener("message",a),n(new Error(c.message))}};i.addEventListener("message",a)}));return this.updateCompressionStage(e,"completed",100),{success:!0,compressedFile:o.compressedFile,originalSize:t.size,compressedSize:o.size,compressionRatio:1-o.size/t.size,duration:Date.now()-this.activeCompressions.get(e).startTime}}catch(t){throw this.updateCompressionStage(e,"error",0,{error:t.message}),t}}async handleCompressionError(e,t,s){if(!this.components.errorHandler)return{success:!1,fallback:!0};this.components.monitoring&&this.components.monitoring.trackCompressionError(e,t,s);const i=await this.components.errorHandler.handleError(t,s);return this.components.monitoring&&this.components.monitoring.trackErrorRecovery(e,i),i}updateCompressionStage(e,t,s,i={}){const o=this.activeCompressions.get(e);o&&(o.status=t,o.progress=s),this.components.monitoring&&this.components.monitoring.updateCompressionStage(e,t,s,i),this.components.performanceMonitor&&this.components.performanceMonitor.updateCompressionStage(e,t,s,i),this.emit("compressionProgress",{compressionId:e,stage:t,progress:s,data:i})}getOptimizedSettings(e,t){let s={preset:t.preset||"medical-standard",quality:t.quality||"balanced",maxDuration:6e4,chunkSize:33554432};if(this.components.performanceMonitor?.isMobileDevice){const e=this.components.performanceMonitor.getMobileOptimizedSettings();e&&(s={...s,...e})}if(this.medicalContext)switch(this.medicalContext.priority){case"emergency":s.preset="mobile-fast",s.maxDuration=15e3,s.quality="speed";break;case"urgent":s.preset="mobile-optimized",s.maxDuration=3e4,s.quality="balanced"}return this.isFeatureEnabled("advanced_compression")&&(s.advancedCodecs=!0),s}isCompressionRecommended(e,t){if(e.size>104857600)return!0;const s=navigator.connection;if(s){if("slow-2g"===s.effectiveType||"2g"===s.effectiveType)return!0;if("4g"===s.effectiveType&&e.size<10485760)return!1}return this.components.performanceMonitor?.isMobileDevice?e.size>26214400:e.size>52428800}isValidCompressionFile(e){return["video/mp4","video/avi","video/mov","video/webm"].includes(e.type)&&e.size>=1048576&&e.size<=2147483648}async loadCompressionModules(e){if(!this.components.lazyLoader)return!0;try{const t=this.determineUseCase(e);return(await this.components.lazyLoader.loadForUseCase(t)).every(Boolean)}catch(e){return console.error("Failed to load compression modules:",e),!1}}determineUseCase(e){return this.isFeatureEnabled("advanced_compression")?"advanced_compression":this.medicalContext?"medical_workflow":"basic_compression"}async getCompressionWorker(){return this.compressionWorker||(this.compressionWorker=new Worker("/static/mediafiles/js/compression/workers/compression-worker.js")),this.compressionWorker}getCompressionTimeout(e){return"emergency"===this.medicalContext?.priority?15e3:"urgent"===this.medicalContext?.priority?3e4:this.components.performanceMonitor?.isMobileDevice?45e3:12e4}isFeatureEnabled(e,t={}){return!this.components.featureFlags||this.components.featureFlags.isEnabled(e,t)}getFeatureVariant(e,t={}){return this.components.featureFlags?this.components.featureFlags.getVariant(e,t):null}activateEmergencyBypass(e){this.components.errorHandler&&this.components.errorHandler.activateEmergencyBypass(e),this.components.featureFlags&&this.components.featureFlags.emergencyDisable(e),this.emit("emergencyBypass",{reason:e,timestamp:Date.now()})}async preloadCriticalModules(){if(!this.components.lazyLoader)return!0;try{return await this.components.lazyLoader.preloadCriticalModules()}catch(e){return console.warn("Failed to preload critical modules:",e),!1}}setupEventListeners(){window.addEventListener("online",(()=>{this.emit("networkChange",{online:!0})})),window.addEventListener("offline",(()=>{this.emit("networkChange",{online:!1})})),document.addEventListener("visibilitychange",(()=>{this.emit("visibilityChange",{hidden:document.hidden})})),window.addEventListener("compression-performance-warning",(e=>{this.emit("performanceWarning",e.detail)})),window.addEventListener("compression-low-battery",(e=>{this.emit("lowBattery",e.detail)})),window.addEventListener("compression-thermal-throttling",(e=>{this.emit("thermalThrottling",e.detail)}))}handleInitializationError(e){console.error("Initialization failed:",e),this.options.enableFeatureFlags=!1,this.options.enableMonitoring=!1,this.options.enableLazyLoading=!1,this.emit("initializationError",{error:e,fallbackMode:!0})}generateCompressionId(){return`compression_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getSystemStatus(){return{initialized:this.initialized,activeCompressions:this.activeCompressions.size,components:{featureFlags:!!this.components.featureFlags,monitoring:!!this.components.monitoring,errorHandler:!!this.components.errorHandler,performanceMonitor:!!this.components.performanceMonitor,lazyLoader:!!this.components.lazyLoader},medicalContext:this.medicalContext,options:this.options}}getDetailedMetrics(){const e={systemStatus:this.getSystemStatus(),activeCompressions:Array.from(this.activeCompressions.entries())};return this.components.monitoring&&(e.monitoring=this.components.monitoring.getStatistics()),this.components.performanceMonitor&&(e.performance=this.components.performanceMonitor.getCompressionStats()),this.components.errorHandler&&(e.errors=this.components.errorHandler.getErrorStats()),this.components.featureFlags&&(e.featureFlags=this.components.featureFlags.getDebugInfo()),e}emit(e,t){const s=new CustomEvent(`videoCompression:${e}`,{detail:t});window.dispatchEvent(s)}cleanup(){this.activeCompressions.clear(),Object.values(this.components).forEach((e=>{e.cleanup&&e.cleanup()})),this.compressionWorker&&this.compressionWorker.terminate(),this.initialized=!1,console.log("Phase 3 Video Compression System cleaned up")}}},989:()=>{window.MedicalMetadataManager=class{constructor(){this.hipaaCompliantFields=["creation_time","timecode","duration","encoder","major_brand","minor_version","compatible_brands"],this.sensitiveFields=["location","gps","artist","comment","description","title","album","date","copyright","track"],this.diagnosticFields=["creation_time","timecode","duration","frame_rate","bit_rate","width","height","color_space","color_primaries","color_transfer"]}analyzeMetadataCompliance(e){const t={compliant:!0,sensitiveFieldsFound:[],recommendations:[],preservedFields:[],strippedFields:[]};for(const s in e)this.sensitiveFields.includes(s.toLowerCase())&&(t.sensitiveFieldsFound.push(s),t.compliant=!1);t.sensitiveFieldsFound.length>0&&t.recommendations.push({type:"security",message:`Found ${t.sensitiveFieldsFound.length} potentially sensitive metadata fields`,action:"strip_sensitive_metadata",fields:t.sensitiveFieldsFound});for(const s in e)this.hipaaCompliantFields.includes(s.toLowerCase())?t.preservedFields.push(s):t.strippedFields.push(s);return t}getPreservationStrategy(e,t){const s={diagnostic:{preserve:this.diagnosticFields,strip:this.sensitiveFields,reasoning:"Preserve diagnostic metadata for medical analysis"},documentation:{preserve:["creation_time","duration","encoder"],strip:this.sensitiveFields,reasoning:"Minimal metadata for documentation purposes"},consultation:{preserve:["creation_time","duration"],strip:[...this.sensitiveFields,"location","gps"],reasoning:"Basic metadata for consultation sharing"},emergency:{preserve:["creation_time"],strip:"*",reasoning:"Emergency upload with minimal metadata"}};return s[e]||s.documentation}generateMetadataArgs(e,t={}){const s=[];return"*"===e.strip?(s.push("-map_metadata","-1"),e.preserve.forEach((e=>{t[e]&&s.push("-metadata",`${e}=${t[e]}`)}))):(s.push("-map_metadata","0"),e.strip.forEach((e=>{s.push("-metadata",`${e}=`)}))),s}createAuditTrailEntry(e,t,s){return{timestamp:(new Date).toISOString(),operation:e,metadataCompliance:{strategy:s,originalFieldCount:Object.keys(t).length,preservedFields:s.preserve,strippedFields:s.strip,reasoning:s.reasoning},hipaaCompliant:!0,medicalStandards:{colorSpacePreserved:this._checkColorSpacePreservation(t),timestampAccurate:this._checkTimestampAccuracy(t),diagnosticDataIntact:this._checkDiagnosticDataIntegrity(t,s)}}}validateMetadataPreservation(e,t,s){const i={passed:!0,issues:[],recommendations:[]},o=this._getCriticalFieldsForContentType(s);for(const s of o)e[s]&&!t[s]&&(i.issues.push({type:"missing_critical_field",field:s,message:`Critical medical field '${s}' was removed during processing`}),i.passed=!1);const n=this._checkSensitiveDataLeakage(t);return n.length>0&&(i.issues.push({type:"sensitive_data_leak",fields:n,message:"Sensitive metadata fields were not properly stripped"}),i.passed=!1),i.issues.length>0&&i.recommendations.push({action:"review_metadata_settings",message:"Review metadata preservation settings to ensure medical compliance"}),i}secureCleanup(e){return e&&"object"==typeof e&&Object.keys(e).forEach((t=>{delete e[t]})),window.gc&&window.gc(),{cleaned:!0,timestamp:(new Date).toISOString(),method:"secure_reference_clearing"}}getSafeMetadataSummary(e){const t={};return["duration","width","height","frame_rate","bit_rate","encoder","format","creation_time"].forEach((s=>{void 0!==e[s]&&(t[s]=e[s])})),t}_getCriticalFieldsForContentType(e){const t={diagnostic:["creation_time","timecode","duration","frame_rate"],documentation:["creation_time","duration"],consultation:["creation_time","duration"],emergency:["creation_time"]};return t[e]||t.documentation}_checkSensitiveDataLeakage(e){const t=[];for(const s in e)this.sensitiveFields.includes(s.toLowerCase())&&t.push(s);return t}_checkColorSpacePreservation(e){return void 0!==e.color_space||void 0!==e.color_primaries||void 0!==e.color_transfer}_checkTimestampAccuracy(e){return void 0!==e.creation_time&&!isNaN(Date.parse(e.creation_time))}_checkDiagnosticDataIntegrity(e,t){const s=this.diagnosticFields,i=t.preserve.filter((e=>s.includes(e)));return{totalDiagnosticFields:s.length,preservedDiagnosticFields:i.length,integrityScore:i.length/s.length,intact:i.length>=3}}},window.HIPAAComplianceChecker=class{constructor(){this.complianceRules={safeguards:{administrative:["audit_trail","access_control","user_authentication"],physical:["secure_storage","device_control","workstation_security"],technical:["encryption","access_control","audit_controls","integrity_controls"]},phi_identifiers:["names","addresses","dates","phone_numbers","fax_numbers","email_addresses","ssn","medical_record_numbers","health_plan_numbers","account_numbers","certificate_numbers","vehicle_identifiers","device_identifiers","web_urls","ip_addresses","biometric_identifiers","full_face_photos","unique_identifying_numbers"]}}checkVideoMetadataCompliance(e){const t={compliant:!0,violations:[],recommendations:[],riskLevel:"low"},s=this._identifyPHIRisks(e);return s.length>0&&(t.compliant=!1,t.violations.push({type:"phi_exposure",risks:s,message:"Potential PHI found in video metadata"}),t.riskLevel="high"),this._hasLocationData(e)&&(t.violations.push({type:"location_data",message:"GPS or location data found in metadata",recommendation:"Strip location data before processing"}),t.riskLevel="high"),t.recommendations=this._generateHIPAARecommendations(t.violations),t}getHIPAACompliantInstructions(e){const t={diagnostic:{strip:["location","gps","artist","comment","description"],preserve:["creation_time","timecode","duration","technical_specs"],auditRequired:!0,encryptionRequired:!0},documentation:{strip:["location","gps","artist","comment","description","title"],preserve:["creation_time","duration"],auditRequired:!0,encryptionRequired:!1},consultation:{strip:["*"],preserve:["creation_time"],auditRequired:!0,encryptionRequired:!0}};return t[e]||t.documentation}_identifyPHIRisks(e){const t=[];return["artist","author","creator","title","description","comment"].forEach((s=>{e[s]&&this._containsPotentialName(e[s])&&t.push({field:s,type:"potential_name",value:e[s]})})),["date","creation_time","date_recorded"].forEach((s=>{e[s]&&this._isPotentialBirthDate(e[s])&&t.push({field:s,type:"potential_birth_date",value:e[s]})})),t}_hasLocationData(e){return["location","gps","latitude","longitude","gps_coordinates"].some((t=>void 0!==e[t]))}_containsPotentialName(e){return/\b[A-Z][a-z]+\s+[A-Z][a-z]+\b/.test(e)}_isPotentialBirthDate(e){const t=new Date(e),s=(new Date).getFullYear()-t.getFullYear();return s>=18&&s<=120}_generateHIPAARecommendations(e){const t=[];return e.some((e=>"phi_exposure"===e.type))&&t.push({priority:"high",action:"strip_phi_metadata",message:"Remove all potentially identifying metadata fields"}),e.some((e=>"location_data"===e.type))&&t.push({priority:"high",action:"remove_location_data",message:"Strip GPS and location metadata"}),e.length>0&&t.push({priority:"medium",action:"implement_audit_trail",message:"Implement comprehensive audit trail for metadata handling"}),t}}}}]);