# Generated by Django 5.2.1 on 2025-06-08 16:49

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def create_patient_groups(apps, schema_editor):
    """Create Patient Managers and Patient Viewers groups with appropriate permissions"""
    Patient = apps.get_model('patients', 'Patient')
    PatientHospitalRecord = apps.get_model('patients', 'PatientHospitalRecord')
    AllowedTag = apps.get_model('patients', 'AllowedTag')
    Tag = apps.get_model('patients', 'Tag')
    
    # Get content types
    patient_ct = ContentType.objects.get_for_model(Patient)
    record_ct = ContentType.objects.get_for_model(PatientHospitalRecord)
    allowed_tag_ct = ContentType.objects.get_for_model(AllowedTag)
    tag_ct = ContentType.objects.get_for_model(Tag)
    
    # Create Patient Managers group with full permissions
    managers_group, created = Group.objects.get_or_create(name='Patient Managers')
    if created:
        # Add all patient-related permissions
        manager_permissions = [
            'add_patient', 'change_patient', 'delete_patient', 'view_patient',
            'add_patienthospitalrecord', 'change_patienthospitalrecord', 'delete_patienthospitalrecord', 'view_patienthospitalrecord',
            'add_allowedtag', 'change_allowedtag', 'delete_allowedtag', 'view_allowedtag',
            'add_tag', 'change_tag', 'delete_tag', 'view_tag',
        ]
        
        for perm_codename in manager_permissions:
            try:
                if perm_codename.endswith('_patient'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=patient_ct)
                elif perm_codename.endswith('_patienthospitalrecord'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=record_ct)
                elif perm_codename.endswith('_allowedtag'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=allowed_tag_ct)
                elif perm_codename.endswith('_tag'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=tag_ct)
                else:
                    continue
                managers_group.permissions.add(perm)
            except Permission.DoesNotExist:
                pass  # Permission doesn't exist yet, skip
    
    # Create Patient Viewers group with read-only permissions
    viewers_group, created = Group.objects.get_or_create(name='Patient Viewers')
    if created:
        # Add view-only permissions
        viewer_permissions = [
            'view_patient',
            'view_patienthospitalrecord',
            'view_allowedtag',
            'view_tag',
        ]
        
        for perm_codename in viewer_permissions:
            try:
                if perm_codename.endswith('_patient'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=patient_ct)
                elif perm_codename.endswith('_patienthospitalrecord'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=record_ct)
                elif perm_codename.endswith('_allowedtag'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=allowed_tag_ct)
                elif perm_codename.endswith('_tag'):
                    perm = Permission.objects.get(codename=perm_codename, content_type=tag_ct)
                else:
                    continue
                viewers_group.permissions.add(perm)
            except Permission.DoesNotExist:
                pass  # Permission doesn't exist yet, skip


def reverse_create_patient_groups(apps, schema_editor):
    """Remove Patient Managers and Patient Viewers groups"""
    Group.objects.filter(name__in=['Patient Managers', 'Patient Viewers']).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('patients', '0005_allowedtag_tag_patient_tags'),
    ]

    operations = [
        migrations.RunPython(create_patient_groups, reverse_create_patient_groups),
    ]
