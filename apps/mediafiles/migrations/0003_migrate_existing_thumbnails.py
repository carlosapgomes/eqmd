# Generated by Django 5.2.1 on 2025-06-22 01:38

import os
import shutil
from pathlib import Path
from django.conf import settings
from django.db import migrations
from django.utils import timezone


def migrate_thumbnails_forward(apps, schema_editor):
    """
    Move existing thumbnails from flat structure to organized structure.
    """
    MediaFile = apps.get_model('mediafiles', 'MediaFile')
    
    # Get media root
    media_root = Path(settings.MEDIA_ROOT)
    old_thumbnails_dir = media_root / 'thumbnails'
    
    # Skip if old thumbnails directory doesn't exist
    if not old_thumbnails_dir.exists():
        return
    
    # Process each MediaFile with a thumbnail
    for media_file in MediaFile.objects.filter(thumbnail__isnull=False).exclude(thumbnail=''):
        try:
            # Get current thumbnail path
            old_thumbnail_path = media_root / media_file.thumbnail.name
            
            # Skip if file doesn't exist
            if not old_thumbnail_path.exists():
                continue
            
            # Determine media type based on MIME type
            if media_file.mime_type.startswith('image/'):
                media_type = 'photos'
            elif media_file.mime_type.startswith('video/'):
                media_type = 'videos'
            else:
                media_type = 'media'
            
            # Use file creation date for path structure
            file_date = media_file.created_at or timezone.now()
            year_month = file_date.strftime('%Y/%m')
            
            # Create new structured path
            new_thumbnail_dir = media_root / media_type / year_month / 'thumbnails'
            new_thumbnail_dir.mkdir(parents=True, exist_ok=True)
            
            # Generate new filename
            new_filename = f"{media_file.id}_thumb.jpg"
            new_thumbnail_path = new_thumbnail_dir / new_filename
            
            # Move the file
            shutil.move(str(old_thumbnail_path), str(new_thumbnail_path))
            
            # Update database record
            new_relative_path = f"{media_type}/{year_month}/thumbnails/{new_filename}"
            media_file.thumbnail = new_relative_path
            media_file.save(update_fields=['thumbnail'])
            
        except Exception as e:
            # Log error but continue with other files
            print(f"Error migrating thumbnail for MediaFile {media_file.id}: {e}")
    
    # Remove old thumbnails directory if empty
    try:
        if old_thumbnails_dir.exists() and not any(old_thumbnails_dir.iterdir()):
            old_thumbnails_dir.rmdir()
    except OSError:
        # Directory not empty or other error, leave it
        pass


def migrate_thumbnails_reverse(apps, schema_editor):
    """
    Move thumbnails back to flat structure (reverse migration).
    """
    MediaFile = apps.get_model('mediafiles', 'MediaFile')
    
    # Get media root
    media_root = Path(settings.MEDIA_ROOT)
    thumbnails_dir = media_root / 'thumbnails'
    thumbnails_dir.mkdir(exist_ok=True)
    
    # Process each MediaFile with a thumbnail
    for media_file in MediaFile.objects.filter(thumbnail__isnull=False).exclude(thumbnail=''):
        try:
            # Get current thumbnail path
            current_thumbnail_path = media_root / media_file.thumbnail.name
            
            # Skip if file doesn't exist
            if not current_thumbnail_path.exists():
                continue
            
            # Create new flat filename
            old_filename = f"thumb_{media_file.id}.jpg"
            old_thumbnail_path = thumbnails_dir / old_filename
            
            # Move the file back
            shutil.move(str(current_thumbnail_path), str(old_thumbnail_path))
            
            # Update database record
            media_file.thumbnail = f"thumbnails/{old_filename}"
            media_file.save(update_fields=['thumbnail'])
            
        except Exception as e:
            # Log error but continue with other files
            print(f"Error reverse migrating thumbnail for MediaFile {media_file.id}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('mediafiles', '0002_update_thumbnail_paths'),
    ]

    operations = [
        migrations.RunPython(
            migrate_thumbnails_forward,
            migrate_thumbnails_reverse,
            elidable=True,
        ),
    ]
