# Generated by Django 5.2.1 on 2025-06-28 08:36

import apps.mediafiles.utils
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PhotoSeries',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.event')),
                ('caption', models.TextField(blank=True, help_text='Optional caption for the photo series', verbose_name='Legenda')),
            ],
            options={
                'verbose_name': 'Série de Fotos',
                'verbose_name_plural': 'Séries de Fotos',
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='VideoClip',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.event')),
                ('file_id', models.CharField(blank=True, help_text='FilePond file identifier', max_length=100, null=True, verbose_name='File ID')),
                ('original_filename', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome Original')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Tamanho do Arquivo')),
                ('duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duração em segundos')),
                ('width', models.PositiveIntegerField(blank=True, help_text='Video width in pixels', null=True, verbose_name='Largura')),
                ('height', models.PositiveIntegerField(blank=True, help_text='Video height in pixels', null=True, verbose_name='Altura')),
                ('video_codec', models.CharField(blank=True, help_text='Video codec information (e.g., h264, vp9)', max_length=50, null=True, verbose_name='Codec do Vídeo')),
                ('caption', models.TextField(blank=True, help_text='Optional caption for the video', verbose_name='Legenda')),
            ],
            options={
                'verbose_name': 'Vídeo Curto',
                'verbose_name_plural': 'Vídeos Curtos',
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the media file', primary_key=True, serialize=False)),
                ('file', models.FileField(help_text='The actual file stored securely with UUID filename', upload_to=apps.mediafiles.utils.get_secure_upload_path, verbose_name='Arquivo')),
                ('original_filename', models.CharField(help_text='Original filename as uploaded by user', max_length=255, verbose_name='Nome Original')),
                ('file_hash', models.CharField(db_index=True, help_text='SHA-256 hash for file deduplication', max_length=64, unique=True, verbose_name='Hash do Arquivo')),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes', verbose_name='Tamanho do Arquivo')),
                ('mime_type', models.CharField(help_text='MIME type of the file', max_length=100, verbose_name='Tipo MIME')),
                ('width', models.PositiveIntegerField(blank=True, help_text='Image width in pixels', null=True, verbose_name='Largura')),
                ('height', models.PositiveIntegerField(blank=True, help_text='Image height in pixels', null=True, verbose_name='Altura')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Video duration in seconds', null=True, verbose_name='Duração')),
                ('video_codec', models.CharField(blank=True, help_text='Video codec information (e.g., h264, vp9)', max_length=50, null=True, verbose_name='Codec do Vídeo')),
                ('video_bitrate', models.PositiveIntegerField(blank=True, help_text='Video bitrate in bits per second', null=True, verbose_name='Bitrate do Vídeo')),
                ('fps', models.FloatField(blank=True, help_text='Frames per second for video files', null=True, verbose_name='FPS')),
                ('thumbnail', models.ImageField(blank=True, help_text='Generated thumbnail image', null=True, upload_to=apps.mediafiles.utils.get_thumbnail_upload_path, verbose_name='Miniatura')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional file metadata', verbose_name='Metadados')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Arquivo de Mídia',
                'verbose_name_plural': 'Arquivos de Mídia',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['file_hash'], name='mediafile_hash_idx'), models.Index(fields=['mime_type'], name='mediafile_mime_idx'), models.Index(fields=['created_at'], name='mediafile_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.event')),
                ('caption', models.TextField(blank=True, help_text='Optional caption for the photo', verbose_name='Legenda')),
                ('media_file', models.OneToOneField(help_text='The media file containing the photo', on_delete=django.db.models.deletion.CASCADE, to='mediafiles.mediafile', verbose_name='Arquivo de Mídia')),
            ],
            options={
                'verbose_name': 'Foto',
                'verbose_name_plural': 'Fotos',
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='PhotoSeriesFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the photo series file', primary_key=True, serialize=False)),
                ('order', models.PositiveIntegerField(help_text='Order of the photo in the series', verbose_name='Ordem')),
                ('description', models.TextField(blank=True, help_text='Optional description for this specific photo', verbose_name='Descrição')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('media_file', models.ForeignKey(help_text='The media file in this series', on_delete=django.db.models.deletion.CASCADE, to='mediafiles.mediafile', verbose_name='Arquivo de Mídia')),
                ('photo_series', models.ForeignKey(help_text='The photo series this file belongs to', on_delete=django.db.models.deletion.CASCADE, to='mediafiles.photoseries', verbose_name='Série de Fotos')),
            ],
            options={
                'verbose_name': 'Arquivo da Série de Fotos',
                'verbose_name_plural': 'Arquivos da Série de Fotos',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='photoseries',
            name='photos',
            field=models.ManyToManyField(help_text='Photos in this series', through='mediafiles.PhotoSeriesFile', to='mediafiles.mediafile', verbose_name='Fotos'),
        ),
        migrations.AddIndex(
            model_name='photoseriesfile',
            index=models.Index(fields=['photo_series', 'order'], name='photoseries_file_order_idx'),
        ),
        migrations.AddIndex(
            model_name='photoseriesfile',
            index=models.Index(fields=['photo_series', 'media_file'], name='photoseries_file_media_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='photoseriesfile',
            unique_together={('photo_series', 'media_file'), ('photo_series', 'order')},
        ),
    ]
